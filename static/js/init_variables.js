// Load the file randomizer/Enums/Songs.jsonc so we can store it as the Song enum.
// This file is generated by the build process.
window["Songs"] = null;
// TODO REWRITE: THIS LIST SHOULD BE GENERATED OUT OF THE SONGS FILE
window["SongLocationList"] = [
  "TrainingGrounds",
  "Isles",
  "IslesKremIsle",
  "IslesKLumsy",
  "IslesBFI",
  "IslesSnideRoom",
  "JapesLobby",
  "AztecLobby",
  "FactoryLobby",
  "GalleonLobby",
  "ForestLobby",
  "CavesLobby",
  "CastleLobby",
  "HelmLobby",
  "JapesMain",
  "JapesStart",
  "JapesTunnels",
  "JapesStorm",
  "JapesCaves",
  "JapesBlast",
  "JapesCart",
  "JapesDillo",
  "AztecMain",
  "AztecTunnels",
  "AztecTemple",
  "Aztec5DT",
  "AztecBlast",
  "AztecBeetle",
  "AztecChunkyKlaptraps",
  "AztecDogadon",
  "FactoryMain",
  "FactoryProduction",
  "FactoryResearchAndDevelopment",
  "FactoryCrusher",
  "FactoryCarRace",
  "FactoryJack",
  "GalleonTunnels",
  "GalleonOutside",
  "GalleonLighthouse",
  "GalleonMechFish",
  "Galleon2DS",
  "Galleon5DS",
  "GalleonMermaid",
  "GalleonChest",
  "GalleonBlast",
  "GalleonSealRace",
  "GalleonPufftoss",
  "ForestDay",
  "ForestNight",
  "ForestBarn",
  "ForestMill",
  "ForestAnthill",
  "ForestMushroom",
  "ForestMushroomRooms",
  "ForestSpider",
  "ForestBlast",
  "ForestRabbitRace",
  "ForestCart",
  "ForestDogadon",
  "Caves",
  "CavesIgloos",
  "CavesCabins",
  "CavesRotatingRoom",
  "CavesTantrum",
  "CavesBlast",
  "CavesIceCastle",
  "CavesBeetleRace",
  "CavesDillo",
  "Castle",
  "CastleShed",
  "CastleTree",
  "CastleTunnels",
  "CastleCrypt",
  "CastleInnerCrypts",
  "CastleDungeon_Chains",
  "CastleDungeon_NoChains",
  "CastleBallroom",
  "CastleMuseum",
  "CastleGreenhouse",
  "CastleTrash",
  "CastleTower",
  "CastleBlast",
  "CastleCart",
  "CastleKutOut",
  "HelmBoMOn",
  "HelmBoMOff",
  "HelmBonus",
  "Cranky",
  "Funky",
  "Candy",
  "Snide",
  "WrinklyKong",
  "StrongKong",
  "Rocketbarrel",
  "Sprint",
  "MiniMonkey",
  "HunkyChunky",
  "GorillaGone",
  "Rambi",
  "Enguarde",
  "BattleArena",
  "TroffNScoff",
  "AwaitingBossEntry",
  "BossIntroduction",
  "MiniBoss",
  "KRoolBattle",
  "MainMenu",
  "PauseMenu",
  "NintendoLogo",
  "IntroStory",
  "KRoolTheme",
  "KLumsyCelebration",
  "KRoolTakeoff",
  "KRoolEntrance",
  "KLumsyEnding",
  "EndSequence",
  "Minigames",
  "MadMazeMaul",
  "StealthySnoop",
  "MinecartMayhem",
  "OhBanana",
  "GBGet",
  "MoveGet",
  "GunGet",
  "BananaMedalGet",
  "BlueprintDrop",
  "BlueprintGet",
  "HeadphonesGet",
  "DropRainbowCoin",
  "RainbowCoinGet",
  "CompanyCoinGet",
  "BeanGet",
  "PearlGet",
  "MelonSliceDrop",
  "MelonSliceGet",
  "BananaCoinGet",
  "CrystalCoconutGet",
  "FairyTick",
  "MinecartCoinGet",
  "DropCoins",
  "Checkpoint",
  "NormalStar",
  "Success",
  "Failure",
  "SuccessRaces",
  "FailureRaces",
  "BossUnlock",
  "BossDefeat",
  "Bongos",
  "Guitar",
  "Trombone",
  "Saxophone",
  "Triangle",
  "BaboonBalloon",
  "Transformation",
  "VultureRing",
  "BBlastFinalStar",
  "FinalCBGet",
];
window["KongZones"] = {
  DK: ["Fur", "Tie"],
  Diddy: ["Clothes"],
  Lanky: ["Clothes", "Fur"],
  Tiny: ["Clothes", "Hair"],
  Chunky: ["Main", "Other"],
  Rambi: ["Skin"],
  Enguarde: ["Skin"],
};
window["MusicSelectionPanel"] = {
  BGM: {
    name: "BGM",
    subcategories: {
      Isles: {
        name: "DK Isles",
        type: "BGM",
        songs: [
          { name: "Training Grounds", value: "TrainingGrounds" },
          { name: "DK Isles", value: "Isles" },
          { name: "DK Isles (K. Rool's Ship)", value: "IslesKremIsle" },
          { name: "DK Isles (K. Lumsy's Prison)", value: "IslesKLumsy" },
          { name: "DK Isles (Banana Fairy Island)", value: "IslesBFI" },
          { name: "DK Isles (Snide's Room)", value: "IslesSnideRoom" },
          { name: "Jungle Japes (Lobby)", value: "JapesLobby" },
          { name: "Angry Aztec (Lobby)", value: "AztecLobby" },
          { name: "Frantic Factory (Lobby)", value: "FactoryLobby" },
          { name: "Gloomy Galleon (Lobby)", value: "GalleonLobby" },
          { name: "Fungi Forest (Lobby)", value: "ForestLobby" },
          { name: "Crystal Caves (Lobby)", value: "CavesLobby" },
          { name: "Creepy Castle (Lobby)", value: "CastleLobby" },
          { name: "Hideout Helm (Lobby)", value: "HelmLobby" },
        ],
      },
      Japes: {
        name: "Jungle Japes",
        type: "BGM",
        songs: [
          { name: "Jungle Japes", value: "JapesMain" },
          { name: "Jungle Japes (Starting Area)", value: "JapesStart" },
          { name: "Jungle Japes (Tunnels)", value: "JapesTunnels" },
          { name: "Jungle Japes (Cranky's Area)", value: "JapesStorm" },
          { name: "Jungle Japes (Caves/Underground)", value: "JapesCaves" },
          { name: "Jungle Japes (Baboon Blast)", value: "JapesBlast" },
          { name: "Jungle Japes (Minecart)", value: "JapesCart" },
          { name: "Jungle Japes (Army Dillo)", value: "JapesDillo" },
        ],
      },
      Aztec: {
        name: "Angry Aztec",
        type: "BGM",
        songs: [
          { name: "Angry Aztec", value: "AztecMain" },
          { name: "Angry Aztec (Tunnels)", value: "AztecTunnels" },
          { name: "Angry Aztec (Temple)", value: "AztecTemple" },
          { name: "Angry Aztec (5DT)", value: "Aztec5DT" },
          { name: "Angry Aztec (Baboon Blast)", value: "AztecBlast" },
          { name: "Angry Aztec (Beetle Slide)", value: "AztecBeetle" },
          {
            name: "Angry Aztec (Chunky Klaptraps)",
            value: "AztecChunkyKlaptraps",
          },
          { name: "Angry Aztec (Dogadon)", value: "AztecDogadon" },
        ],
      },
      Factory: {
        name: "Frantic Factory",
        type: "BGM",
        songs: [
          { name: "Frantic Factory", value: "FactoryMain" },
          {
            name: "Frantic Factory (Production Room)",
            value: "FactoryProduction",
          },
          {
            name: "Frantic Factory (R&D)",
            value: "FactoryResearchAndDevelopment",
          },
          { name: "Frantic Factory (Crusher Room)", value: "FactoryCrusher" },
          { name: "Frantic Factory (Car Race)", value: "FactoryCarRace" },
          { name: "Frantic Factory (Mad Jack)", value: "FactoryJack" },
        ],
      },
      Galleon: {
        name: "Gloomy Galleon",
        type: "BGM",
        songs: [
          { name: "Gloomy Galleon (Tunnels)", value: "GalleonTunnels" },
          { name: "Gloomy Galleon (Outside)", value: "GalleonOutside" },
          { name: "Gloomy Galleon (Lighthouse)", value: "GalleonLighthouse" },
          {
            name: "Gloomy Galleon (Mechanical Fish)",
            value: "GalleonMechFish",
          },
          { name: "Gloomy Galleon (2DS)", value: "Galleon2DS" },
          { name: "Gloomy Galleon (5DS/Submarine)", value: "Galleon5DS" },
          { name: "Gloomy Galleon (Mermaid Palace)", value: "GalleonMermaid" },
          { name: "Gloomy Galleon (Pearls Chest)", value: "GalleonChest" },
          { name: "Gloomy Galleon (Baboon Blast)", value: "GalleonBlast" },
          { name: "Gloomy Galleon (Seal Race)", value: "GalleonSealRace" },
          { name: "Gloomy Galleon (Pufftoss)", value: "GalleonPufftoss" },
        ],
      },
      Forest: {
        name: "Fungi Forest",
        type: "BGM",
        songs: [
          { name: "Fungi Forest (Day)", value: "ForestDay" },
          { name: "Fungi Forest (Night)", value: "ForestNight" },
          { name: "Fungi Forest (Barn)", value: "ForestBarn" },
          { name: "Fungi Forest (Mill)", value: "ForestMill" },
          { name: "Fungi Forest (Anthill)", value: "ForestAnthill" },
          { name: "Fungi Forest (Giant Mushroom)", value: "ForestMushroom" },
          {
            name: "Fungi Forest (Mushroom Top Rooms)",
            value: "ForestMushroomRooms",
          },
          { name: "Fungi Forest (Spider)", value: "ForestSpider" },
          { name: "Fungi Forest (Baboon Blast)", value: "ForestBlast" },
          { name: "Fungi Forest (Rabbit Race)", value: "ForestRabbitRace" },
          { name: "Fungi Forest (Minecart)", value: "ForestCart" },
          { name: "Fungi Forest (Dogadon)", value: "ForestDogadon" },
        ],
      },
      Caves: {
        name: "Crystal Caves",
        type: "BGM",
        songs: [
          { name: "Crystal Caves", value: "Caves" },
          { name: "Crystal Caves (Igloos)", value: "CavesIgloos" },
          { name: "Crystal Caves (Cabins)", value: "CavesCabins" },
          { name: "Crystal Caves (Rotating Room)", value: "CavesRotatingRoom" },
          {
            name: "Crystal Caves (Giant Kosha Tantrum)",
            value: "CavesTantrum",
          },
          { name: "Crystal Caves (Baboon Blast)", value: "CavesBlast" },
          { name: "Crystal Caves (Tile Flipping)", value: "CavesIceCastle" },
          { name: "Crystal Caves (Beetle Race)", value: "CavesBeetleRace" },
          { name: "Crystal Caves (Army Dillo)", value: "CavesDillo" },
        ],
      },
      Castle: {
        name: "Creepy Castle",
        type: "BGM",
        songs: [
          { name: "Creepy Castle", value: "Castle" },
          { name: "Fungi Forest (Winch)", value: "CastleShed" },
          { name: "Creepy Castle (Tree)", value: "CastleTree" },
          { name: "Creepy Castle (Tunnels)", value: "CastleTunnels" },
          { name: "Creepy Castle (Crypt)", value: "CastleCrypt" },
          { name: "Creepy Castle (Inner Crypts)", value: "CastleInnerCrypts" },
          {
            name: "Creepy Castle (Dungeon w/ Chains)",
            value: "CastleDungeon_Chains",
          },
          {
            name: "Creepy Castle (Dungeon w/out Chains)",
            value: "CastleDungeon_NoChains",
          },
          { name: "Creepy Castle (Ballroom)", value: "CastleBallroom" },
          { name: "Creepy Castle (Museum)", value: "CastleMuseum" },
          { name: "Creepy Castle (Greenhouse)", value: "CastleGreenhouse" },
          { name: "Creepy Castle (Trash Can)", value: "CastleTrash" },
          { name: "Creepy Castle (Wind Tower)", value: "CastleTower" },
          { name: "Creepy Castle (Baboon Blast)", value: "CastleBlast" },
          { name: "Creepy Castle (Minecart)", value: "CastleCart" },
          { name: "Creepy Castle (King Kut-Out)", value: "CastleKutOut" },
        ],
      },
      Helm: {
        name: "Hideout Helm",
        type: "BGM",
        songs: [
          { name: "Hideout Helm (Blast-O-Matic On)", value: "HelmBoMOn" },
          { name: "Hideout Helm (Blast-O-Matic Off)", value: "HelmBoMOff" },
          { name: "Hideout Helm (Bonus Barrels)", value: "HelmBonus" },
        ],
      },
      NPC: {
        name: "NPCs",
        type: "BGM",
        songs: [
          { name: "Cranky's Lab", value: "Cranky" },
          { name: "Funky's Hut", value: "Funky" },
          { name: "Candy's Music Shop", value: "Candy" },
          { name: "Snide's HQ", value: "Snide" },
          { name: "Wrinkly Kong", value: "WrinklyKong" },
        ],
      },
      Moves: {
        name: "Moves and Animals",
        type: "BGM",
        songs: [
          { name: "Strong Kong", value: "StrongKong" },
          { name: "Rocketbarrel Boost", value: "Rocketbarrel" },
          { name: "Orangstand Sprint", value: "Sprint" },
          { name: "Mini Monkey", value: "MiniMonkey" },
          { name: "Hunky Chunky", value: "HunkyChunky" },
          { name: "Gorilla Gone", value: "GorillaGone" },
          { name: "Rambi", value: "Rambi" },
          { name: "Enguarde", value: "Enguarde" },
        ],
      },
      Battle: {
        name: "Battles",
        type: "BGM",
        songs: [
          { name: "Battle Arena", value: "BattleArena" },
          { name: "Troff 'n' Scoff", value: "TroffNScoff" },
          { name: "Awaiting Entering the Boss", value: "AwaitingBossEntry" },
          { name: "Boss Introduction", value: "BossIntroduction" },
          { name: "Mini Boss", value: "MiniBoss" },
          { name: "K. Rool's Battle", value: "KRoolBattle" },
        ],
      },
      Story: {
        name: "Menus and Story",
        type: "BGM",
        songs: [
          { name: "Main Menu", value: "MainMenu" },
          { name: "Pause Menu", value: "PauseMenu" },
          { name: "Nintendo Logo", value: "NintendoLogo" },
          { name: "Intro Story Medley", value: "IntroStory" },
          { name: "K. Rool's Theme", value: "KRoolTheme" },
          { name: "K. Lumsy Celebration", value: "KLumsyCelebration" },
          { name: "K. Rool Takeoff", value: "KRoolTakeoff" },
          { name: "K. Rool's Entrance", value: "KRoolEntrance" },
          { name: "K. Lumsy Ending", value: "KLumsyEnding" },
          { name: "End Sequence", value: "EndSequence" },
        ],
      },
      Minigame: {
        name: "Minigames",
        type: "BGM",
        songs: [
          { name: "Bonus Minigames", value: "Minigames" },
          { name: "Mad Maze Maul", value: "MadMazeMaul" },
          { name: "Stealthy Snoop", value: "StealthySnoop" },
          { name: "Minecart Mayhem", value: "MinecartMayhem" },
        ],
      },
    },
  },
  ItemsEvents: {
    name: "Items and Events",
    subcategories: {
      MajorItem: {
        name: "Major Items",
        type: "MajorItem",
        songs: [
          { name: "Oh Banana", value: "OhBanana" },
          { name: "Golden Banana/Key Get", value: "GBGet" },
          { name: "Move Get", value: "MoveGet" },
          { name: "Gun Get", value: "GunGet" },
          { name: "Banana Medal Get", value: "BananaMedalGet" },
          { name: "Blueprint Drop", value: "BlueprintDrop" },
          { name: "Blueprint Get", value: "BlueprintGet" },
          { name: "Headphones Get", value: "HeadphonesGet" },
          { name: "Drop Rainbow Coin", value: "DropRainbowCoin" },
          { name: "Rainbow Coin Get", value: "RainbowCoinGet" },
          { name: "Company Coin Get", value: "CompanyCoinGet" },
          { name: "Bean Get", value: "BeanGet" },
          { name: "Pearl Get", value: "PearlGet" },
        ],
      },
      MinorItem: {
        name: "Minor Items",
        type: "MinorItem",
        songs: [
          { name: "Melon Slice Drop", value: "MelonSliceDrop" },
          { name: "Melon Slice Get", value: "MelonSliceGet" },
          { name: "Banana Coin Get", value: "BananaCoinGet" },
          { name: "Crystal Coconut Get", value: "CrystalCoconutGet" },
          { name: "Fairy Tick", value: "FairyTick" },
          { name: "Minecart Coin Get", value: "MinecartCoinGet" },
          { name: "Drop Coins (Minecart)", value: "DropCoins" },
          { name: "Checkpoint", value: "Checkpoint" },
          { name: "Normal Star", value: "NormalStar" },
        ],
      },
      Event: {
        name: "Events",
        type: "Event",
        songs: [
          { name: "Success", value: "Success" },
          { name: "Failure", value: "Failure" },
          { name: "Success (Races)", value: "SuccessRaces" },
          { name: "Failure (Races & Try Again)", value: "FailureRaces" },
          { name: "Boss Unlock", value: "BossUnlock" },
          { name: "Boss Defeat", value: "BossDefeat" },
          { name: "Bongo Blast", value: "Bongos" },
          { name: "Guitar Gazump", value: "Guitar" },
          { name: "Trombone Tremor", value: "Trombone" },
          { name: "Saxophone Slam", value: "Saxophone" },
          { name: "Triangle Trample", value: "Triangle" },
          { name: "Baboon Balloon", value: "BaboonBalloon" },
          { name: "Transformation", value: "Transformation" },
          { name: "Going through Vulture Ring", value: "VultureRing" },
          { name: "Barrel Blast Final Star", value: "BBlastFinalStar" },
          { name: "100th CB Get", value: "FinalCBGet" },
        ],
      },
    },
  },
};
// Do the fetch using jquery async: false to ensure that the Songs enum is loaded before the rest of the script runs.
function loadFiles(fileList) {
  fileList.forEach(function (file) {
    $.ajax({
      url: `/randomizer/Enums/${file}.jsonc`,
      async: false,
      cache: true,
      success: function (data) {
        try {
          // Clean up and parse the JSONC file (removing comments)
          const parsedData = JSON.parse(
            data.replace(/\/\/.*|\/\*[\s\S]*?\*\//g, "")
          );

          // Iterate over the top-level keys of the parsed data
          Object.keys(parsedData).forEach((topLevelKey) => {
            const topLevelObject = parsedData[topLevelKey];

            // Iterate over the keys inside this top-level object
            Object.keys(topLevelObject).forEach((key) => {
              const entry = topLevelObject[key];

              // Check if 'obj' field exists and is valid
              if (entry && entry.obj) {
                const objName = entry.obj;
                // split at the period for everything before the period
                const objNameSplit = objName.split(".");
                // Check if the object is defined in the global `window`
                if (window[objName] || window[objNameSplit[0]]) {
                  // If there is a period map it to the object + attribute
                  if (objNameSplit.length > 1) {
                    topLevelObject[key] =
                      window[objNameSplit[0]][objNameSplit[1]];
                  } else {
                    // Map the key to the actual object from `window`
                    topLevelObject[key] = window[objName];
                  }
                } else {
                  // Object not found, provide more meaningful info only if needed
                  console.warn(`Object ${objName} not found for key: ${key}`);
                }
              }
            });

            // Assign the parsed top-level object (e.g., SettingsMap) dynamically to the global scope
            window[topLevelKey] = topLevelObject;
          });
        } catch (error) {
          console.error(`Failed to parse ${file}.jsonc: ${error}`);
        }
      },
    });
  });
}

// Usage: Load your files dynamically (no assumptions about structure)
loadFiles([
  "Collectibles",
  "DoorType",
  "Enemies",
  "EnemySubtypes",
  "Events",
  "ExitCategories",
  "HintType",
  "Items",
  "Kongs",
  "Levels",
  "Locations",
  "Maps",
  "Minigames",
  "MinigameType",
  "Regions",
  "Settings",
  "Songs",
  "Types",
  "VendorType",
]);
