# fmt: off
"""Shufflable exit class and list file."""

from randomizer.Enums.ExitCategories import ExitCategories
from randomizer.Enums.Transitions import Transitions
from randomizer.Enums.Regions import Regions
from randomizer.Enums.Kongs import Kongs
from randomizer.LogicClasses import Region, TransitionBack


class ShufflableFront:
    """Class that stores data about an exit to be shuffled."""

    def __init__(self, name, region, originalBack, category=None, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.lanky, Kongs.tiny, Kongs.chunky}, regionKongs={}, move=False):
        """Initialize with given parameters."""
        self.name = name
        self.region = region
        self.back = originalBack
        self.category = category
        self.entryKongs = entryKongs  # Indicates either need to be one of a certain set of kongs to gain access to this (front)
        self.regionKongs = regionKongs  # Indicates need to be a certain kong or kongs in this area. Should only apply if the region doesn't have a tag barrel
        self.move = move  # Indicates this exit needs a kong-specific move to access, so it's even more restrictive
        # Here dest is the entrance to go to, rather than just the target region
        # Initialized as its original value
        self.dest = originalBack
        self.shuffled = False
        self.toBeShuffled = False


ShufflableFronts = {
    # Level Exits
    Transitions.IslesToJapes: ShufflableFront("DK Isles to Jungle Japes", Regions.JungleJapesLobby, Transitions.JapesToIsles, ExitCategories.JapesLobby),
    Transitions.JapesToIsles: ShufflableFront("Jungle Japes to DK Isles", Regions.JungleJapesMain, Transitions.IslesToJapes, ExitCategories.JapesExterior),
    Transitions.IslesToAztec: ShufflableFront("DK Isles to Angry Aztec", Regions.AngryAztecLobby, Transitions.AztecToIsles, ExitCategories.AztecLobby),
    Transitions.AztecToIsles: ShufflableFront("Angry Aztec to DK Isles", Regions.AngryAztecStart, Transitions.IslesToAztec, ExitCategories.AztecExterior),
    Transitions.IslesToFactory: ShufflableFront("DK Isles to Frantic Factory", Regions.FranticFactoryLobby, Transitions.FactoryToIsles, ExitCategories.FactoryLobby),
    Transitions.FactoryToIsles: ShufflableFront("Frantic Factory to DK Isles", Regions.FranticFactoryStart, Transitions.IslesToFactory, ExitCategories.FactoryExterior),
    Transitions.IslesToGalleon: ShufflableFront("DK Isles to Gloomy Galleon", Regions.GloomyGalleonLobby, Transitions.GalleonToIsles, ExitCategories.GalleonLobby),
    Transitions.GalleonToIsles: ShufflableFront("Gloomy Galleon to DK Isles", Regions.GloomyGalleonStart, Transitions.IslesToGalleon, ExitCategories.GalleonExterior),
    Transitions.IslesToForest: ShufflableFront("DK Isles to Fungi Forest", Regions.FungiForestLobby, Transitions.ForestToIsles, ExitCategories.ForestLobby),
    Transitions.ForestToIsles: ShufflableFront("Fungi Forest to DK Isles", Regions.FungiForestStart, Transitions.IslesToForest, ExitCategories.ForestExterior),
    Transitions.IslesToCaves: ShufflableFront("DK Isles to Crystal Caves", Regions.CrystalCavesLobby, Transitions.CavesToIsles, ExitCategories.CavesLobby),
    Transitions.CavesToIsles: ShufflableFront("Crystal Caves to DK Isles", Regions.CrystalCavesMain, Transitions.IslesToCaves, ExitCategories.CavesExterior),
    Transitions.IslesToCastle: ShufflableFront("DK Isles to Creepy Castle", Regions.CreepyCastleLobby, Transitions.CastleToIsles, ExitCategories.CastleLobby),
    Transitions.CastleToIsles: ShufflableFront("Creepy Castle to DK Isles", Regions.CreepyCastleMain, Transitions.IslesToCastle, ExitCategories.CastleExterior),
    # DK Isles Exits
    Transitions.IslesMainToFairy: ShufflableFront("DK Isles Main to Banana Fairy Queen", Regions.IslesMain, Transitions.IslesFairyToMain, ExitCategories.IslesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.IslesFairyToMain: ShufflableFront("DK Isles Banana Fairy Queen to Main", Regions.BananaFairyRoom, Transitions.IslesMainToFairy, regionKongs={Kongs.tiny}),
    Transitions.IslesMainToSnideRoom: ShufflableFront("DK Isles Crocodile Isle to Snide Room", Regions.CrocodileIsleBeyondLift, Transitions.IslesSnideRoomToMain, ExitCategories.IslesExterior),
    Transitions.IslesSnideRoomToMain: ShufflableFront("DK Isles Snide Room to Crocodile Isle", Regions.IslesSnideRoom, Transitions.IslesMainToSnideRoom),
    Transitions.IslesMainToJapesLobby: ShufflableFront("DK Isles Main to Jungle Japes Lobby", Regions.IslesMain, Transitions.IslesJapesLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesJapesLobbyToMain: ShufflableFront("DK Isles Jungle Japes Lobby to Main", Regions.JungleJapesLobby, Transitions.IslesMainToJapesLobby, ExitCategories.JapesLobby),
    Transitions.IslesMainToAztecLobby: ShufflableFront("DK Isles Main to Angry Aztec Lobby", Regions.IslesMain, Transitions.IslesAztecLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesAztecLobbyToMain: ShufflableFront("DK Isles Angry Aztec Lobby to Main", Regions.AngryAztecLobby, Transitions.IslesMainToAztecLobby, ExitCategories.AztecLobby),
    Transitions.IslesMainToFactoryLobby: ShufflableFront("DK Isles Main to Frantic Factory Lobby", Regions.CrocodileIsleBeyondLift, Transitions.IslesFactoryLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesFactoryLobbyToMain: ShufflableFront("DK Isles Frantic Factory Lobby to Main", Regions.FranticFactoryLobby, Transitions.IslesMainToFactoryLobby, ExitCategories.FactoryLobby),
    Transitions.IslesMainToGalleonLobby: ShufflableFront("DK Isles Main to Gloomy Galleon Lobby", Regions.IslesMain, Transitions.IslesGalleonLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesGalleonLobbyToMain: ShufflableFront("DK Isles Gloomy Galleon Lobby to Main", Regions.GloomyGalleonLobby, Transitions.IslesMainToGalleonLobby, ExitCategories.GalleonLobby),
    Transitions.IslesMainToForestLobby: ShufflableFront("DK Isles Cabin Isle to Fungi Forest Lobby", Regions.CabinIsle, Transitions.IslesForestLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesForestLobbyToMain: ShufflableFront("DK Isles Fungi Forest Lobby to Cabin Isle", Regions.FungiForestLobby, Transitions.IslesMainToForestLobby, ExitCategories.ForestLobby),
    Transitions.IslesMainToCavesLobby: ShufflableFront("DK Isles Main to Crystal Caves Lobby", Regions.IslesMain, Transitions.IslesCavesLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesCavesLobbyToMain: ShufflableFront("DK Isles Crystal Caves Lobby to Main", Regions.CrystalCavesLobby, Transitions.IslesMainToCavesLobby, ExitCategories.CavesLobby),
    Transitions.IslesMainToCastleLobby: ShufflableFront("DK Isles Main to Creepy Castle Lobby", Regions.IslesMain, Transitions.IslesCastleLobbyToMain, ExitCategories.IslesExterior),
    Transitions.IslesCastleLobbyToMain: ShufflableFront("DK Isles Creepy Castle Lobby to Main", Regions.CreepyCastleLobby, Transitions.IslesMainToCastleLobby, ExitCategories.CastleLobby),
    # Jungle Japes Exits
    Transitions.JapesMainToMine: ShufflableFront("Jungle Japes Main to Mine", Regions.JungleJapesMain, Transitions.JapesMineToMain, ExitCategories.JapesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.JapesMineToMain: ShufflableFront("Jungle Japes Mine to Main", Regions.Mine, Transitions.JapesMainToMine, ExitCategories.JapesMine, regionKongs={Kongs.diddy}),
    Transitions.JapesMainToLankyCave: ShufflableFront("Jungle Japes Main to Lanky Cave", Regions.IslesMain, Transitions.JapesLankyCaveToMain, ExitCategories.JapesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.JapesLankyCaveToMain: ShufflableFront("Jungle Japes Lanky Cave to Main", Regions.JapesLankyCave, Transitions.JapesMainToLankyCave, regionKongs={Kongs.lanky}),
    Transitions.JapesMainToCatacomb: ShufflableFront("Jungle Japes Main to Catacomb", Regions.JungleJapesMain, Transitions.JapesCatacombToMain, ExitCategories.JapesExterior, entryKongs={Kongs.chunky}),
    Transitions.JapesCatacombToMain: ShufflableFront("Jungle Japes Catacomb to Main", Regions.JapesCatacomb, Transitions.JapesMainToCatacomb, regionKongs={Kongs.chunky}),
    Transitions.JapesMainToTinyHive: ShufflableFront("Jungle Japes Main to Tiny Hive", Regions.JapesBeyondFeatherGate, Transitions.JapesTinyHiveToMain, ExitCategories.JapesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.JapesTinyHiveToMain: ShufflableFront("Jungle Japes Tiny Hive to Main", Regions.TinyHive, Transitions.JapesMainToTinyHive, regionKongs={Kongs.tiny}),
    # Angry Aztec Exits
    # Exits.AztecStartToTemple: ShufflableExit("Angry Aztec Start to Temple", Regions.AngryAztecStart, Exits.AztecTempleToStart, ExitCategories.AztecExterior),
    # Exits.AztecTempleToStart: ShufflableExit("Angry Aztec Temple to Start", Regions.TempleStart, Exits.AztecStartToTemple),
    Transitions.AztecMainToDonkey: ShufflableFront("Angry Aztec Main to Donkey 5DT", Regions.AngryAztecMain, Transitions.AztecDonkeyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.AztecDonkeyToMain: ShufflableFront("Angry Aztec Donkey 5DT to Main", Regions.DonkeyTemple, Transitions.AztecMainToDonkey, regionKongs={Kongs.donkey}),
    Transitions.AztecMainToDiddy: ShufflableFront("Angry Aztec Main to Diddy 5DT", Regions.AngryAztecMain, Transitions.AztecDiddyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.AztecDiddyToMain: ShufflableFront("Angry Aztec Diddy 5DT to Main", Regions.DiddyTemple, Transitions.AztecMainToDiddy, regionKongs={Kongs.diddy}),
    Transitions.AztecMainToLanky: ShufflableFront("Angry Aztec Main to Lanky 5DT", Regions.AngryAztecMain, Transitions.AztecLankyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.AztecLankyToMain: ShufflableFront("Angry Aztec Lanky 5DT to Main", Regions.LankyTemple, Transitions.AztecMainToLanky, regionKongs={Kongs.lanky}),
    Transitions.AztecMainToTiny: ShufflableFront("Angry Aztec Main to Tiny 5DT", Regions.AngryAztecMain, Transitions.AztecTinyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.AztecTinyToMain: ShufflableFront("Angry Aztec Tiny 5DT To Main", Regions.TinyTemple, Transitions.AztecMainToTiny, regionKongs={Kongs.tiny}),
    Transitions.AztecMainToChunky: ShufflableFront("Angry Aztec Main to Chunky 5DT", Regions.AngryAztecMain, Transitions.AztecChunkyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.AztecChunkyToMain: ShufflableFront("Angry Aztec Chunky 5DT to Main", Regions.ChunkyTemple, Transitions.AztecMainToChunky, regionKongs={Kongs.chunky}),
    Transitions.AztecMainToRace: ShufflableFront("Angry Aztec Main to Beetle Race", Regions.AngryAztecMain, Transitions.AztecRaceToMain, ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.AztecRaceToMain: ShufflableFront("Angry Aztec Beetle Race to Main", Regions.AztecTinyRace, Transitions.AztecMainToRace, regionKongs={Kongs.tiny}),
    # Exits.AztecMainToLlama: ShufflableExit("Angry Aztec Main to Llama Temple", Regions.AngryAztecMain, Exits.AztecLlamaToMain, ExitCategories.AztecExterior),
    # Exits.AztecLlamaToMain: ShufflableExit("Angry Aztec Llama Temple to Main", Regions.LlamaTemple, Exits.AztecMainToLlama),
    # Frantic Factory Exits
    Transitions.FactoryRandDToRace: ShufflableFront("Frantic Factory R&D to Car Race", Regions.RandD, Transitions.FactoryRaceToRandD, ExitCategories.FactoryExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.FactoryRaceToRandD: ShufflableFront("Frantic Factory Car Race to R&D", Regions.FactoryTinyRace, Transitions.FactoryRandDToRace, regionKongs={Kongs.tiny}),
    Transitions.FactoryChunkyRoomToPower: ShufflableFront("Frantic Factory Chunky Room to Power Room", Regions.ChunkyRoomPlatform, Transitions.FactoryPowerToChunkyRoom, ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}),
    Transitions.FactoryPowerToChunkyRoom: ShufflableFront("Frantic Factory Power Room to Chunky Room", Regions.PowerHut, Transitions.FactoryChunkyRoomToPower, regionKongs={Kongs.donkey}),
    Transitions.FactoryBeyondHatchToInsideCore: ShufflableFront("Frantic Factory Beyond Hatch to Inside Core", Regions.BeyondHatch, Transitions.FactoryInsideCoreToBeyondHatch, ExitCategories.FactoryExterior),
    Transitions.FactoryInsideCoreToBeyondHatch: ShufflableFront("Frantic Factory Inside Core to Beyond Hatch", Regions.InsideCore, Transitions.FactoryBeyondHatchToInsideCore, regionKongs={Kongs.donkey, Kongs.lanky}),
    # Gloomy Galleon Exits
    Transitions.GalleonLighthouseAreaToLighthouse: ShufflableFront("Gloomy Galleon Main to Lighthouse", Regions.LighthouseArea, Transitions.GalleonLighthouseToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}),
    Transitions.GalleonLighthouseToLighthouseArea: ShufflableFront("Gloomy Galleon Lighthouse to Main", Regions.Lighthouse, Transitions.GalleonLighthouseAreaToLighthouse, regionKongs={Kongs.donkey}),
    Transitions.GalleonLighthousAreaToMermaid: ShufflableFront("Gloomy Galleon Main to Mermaid Room", Regions.LighthouseArea, Transitions.GalleonMermaidToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonMermaidToLighthouseArea: ShufflableFront("Gloomy Galleon Mermaid Room to Main", Regions.MermaidRoom, Transitions.GalleonLighthousAreaToMermaid, regionKongs={Kongs.tiny}),
    Transitions.GalleonLighthouseAreaToSickBay: ShufflableFront("Gloomy Galleon Main to Sick Bay", Regions.LighthouseArea, Transitions.GalleonSickBayToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.GalleonSickBayToLighthouseArea: ShufflableFront("Gloomy Galleon Sick Bay to Main", Regions.SickBay, Transitions.GalleonLighthouseAreaToSickBay, regionKongs={Kongs.chunky}),
    Transitions.GalleonShipyardToSeal: ShufflableFront("Gloomy Galleon Main to Seal Race", Regions.Shipyard, Transitions.GalleonSealToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.GalleonSealToShipyard: ShufflableFront("Gloomy Galleon Seal Race to Main", Regions.SealRace, Transitions.GalleonShipyardToSeal, regionKongs={Kongs.donkey}),
    Transitions.GalleonShipyardToSubmarine: ShufflableFront("Gloomy Galleon Main to Submarine", Regions.Shipyard, Transitions.GalleonSubmarineToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSubmarineToShipyard: ShufflableFront("Gloomy Galleon Submarine to Main", Regions.Submarine, Transitions.GalleonShipyardToSubmarine, regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToLanky: ShufflableFront("Gloomy Galleon Main to Lanky 2DS", Regions.Shipyard, Transitions.GalleonLankyToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}),
    Transitions.GalleonLankyToShipyard: ShufflableFront("Gloomy Galleon Lanky 2DS to Main", Regions.LankyShip, Transitions.GalleonShipyardToLanky, regionKongs={Kongs.lanky}),
    Transitions.GalleonShipyardToTiny: ShufflableFront("Gloomy Galleon Main to Tiny 2DS", Regions.Shipyard, Transitions.GalleonTinyToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}),
    Transitions.GalleonTinyToShipyard: ShufflableFront("Gloomy Galleon Tiny 2DS to Main", Regions.TinyShip, Transitions.GalleonShipyardToTiny, regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToBongos: ShufflableFront("Gloomy Galleon Main to Donkey 5DS", Regions.Shipyard, Transitions.GalleonBongosToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.GalleonBongosToShipyard: ShufflableFront("Gloomy Galleon Donkey 5DS to Main", Regions.BongosShip, Transitions.GalleonShipyardToBongos, regionKongs={Kongs.donkey}),
    Transitions.GalleonShipyardToGuitar: ShufflableFront("Gloomy Galleon Main to Diddy 5DS", Regions.Shipyard, Transitions.GalleonGuitarToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.GalleonGuitarToShipyard: ShufflableFront("Gloomy Galleon Diddy 5DS to Main", Regions.GuitarShip, Transitions.GalleonShipyardToGuitar, regionKongs={Kongs.diddy}),
    Transitions.GalleonShipyardToTrombone: ShufflableFront("Gloomy Galleon Main to Lanky 5DS", Regions.Shipyard, Transitions.GalleonTromboneToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.GalleonTromboneToShipyard: ShufflableFront("Gloomy Galleon Lanky 5DS to Main", Regions.TromboneShip, Transitions.GalleonShipyardToTrombone, regionKongs={Kongs.lanky}),
    Transitions.GalleonShipyardToSaxophone: ShufflableFront("Gloomy Galleon Main to Tiny 5DS", Regions.Shipyard, Transitions.GalleonSaxophoneToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSaxophoneToShipyard: ShufflableFront("Gloomy Galleon Tiny 5DS to Main", Regions.SaxophoneShip, Transitions.GalleonShipyardToSaxophone, regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToTriangle: ShufflableFront("Gloomy Galleon Main to Chunky 5DS", Regions.Shipyard, Transitions.GalleonTriangleToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.GalleonTriangleToShipyard: ShufflableFront("Gloomy Galleon Chunky 5DS to Main", Regions.TriangleShip, Transitions.GalleonShipyardToTriangle, regionKongs={Kongs.chunky}),
    Transitions.GalleonTreasureToChest: ShufflableFront("Gloomy Galleon Main to Chest", Regions.TreasureRoom, Transitions.GalleonChestToTreasure, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonChestToTreasure: ShufflableFront("Gloomy Galleon Chest to Main", Regions.TinyChest, Transitions.GalleonTreasureToChest, regionKongs={Kongs.tiny}),
    # Fungi Forest Exits
    Transitions.ForestMainToLowerMushroom: ShufflableFront("Fungi Forest Main to Mushroom Lower", Regions.GiantMushroomArea, Transitions.ForestLowerMushroomToMain, ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToMain: ShufflableFront("Fungi Forest Mushroom Lower to Main", Regions.MushroomLower, Transitions.ForestMainToLowerMushroom, ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToLowerMushroom: ShufflableFront("Fungi Forest Lower Exterior to Lower Mushroom", Regions.MushroomLowerExterior, Transitions.ForestLowerMushroomToLowerExterior, ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToLowerExterior: ShufflableFront("Fungi Forest Lower Mushroom to Lower Exterior", Regions.MushroomLower, Transitions.ForestLowerExteriorToLowerMushroom, ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToUpperMushroom: ShufflableFront("Fungi Forest Lower Exterior to Upper Mushroom", Regions.MushroomLowerExterior, Transitions.ForestUpperMushroomToLowerExterior, ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToLowerExterior: ShufflableFront("Fungi Forest Upper Mushroom to Lower Exterior", Regions.MushroomUpper, Transitions.ForestLowerExteriorToUpperMushroom, ExitCategories.ForestMushroom),
    Transitions.ForestUpperExteriorToUpperMushroom: ShufflableFront("Fungi Forest Upper Exterior to Upper Mushroom", Regions.MushroomUpperExterior, Transitions.ForestUpperMushroomToUpperExterior, ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToUpperExterior: ShufflableFront("Fungi Forest Upper Mushroom to Upper Exterior", Regions.MushroomUpper, Transitions.ForestUpperExteriorToUpperMushroom, ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToNight: ShufflableFront("Fungi Forest Night Exterior to Night Door", Regions.MushroomNightExterior, Transitions.ForestNightToExterior, ExitCategories.ForestExterior),
    Transitions.ForestNightToExterior: ShufflableFront("Fungi Forest Night Door to Night Exterior", Regions.MushroomNightDoor, Transitions.ForestExteriorToNight, ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToChunky: ShufflableFront("Fungi Forest Upper Exterior to Chunky Room", Regions.MushroomUpperExterior, Transitions.ForestChunkyToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.chunky}),
    Transitions.ForestChunkyToExterior: ShufflableFront("Fungi Forest Chunky Room to Upper Exterior", Regions.MushroomChunkyRoom, Transitions.ForestExteriorToChunky, regionKongs={Kongs.chunky}),
    Transitions.ForestExteriorToZingers: ShufflableFront("Fungi Forest Upper Exterior to Zinger Room", Regions.MushroomUpperExterior, Transitions.ForestZingersToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    Transitions.ForestZingersToExterior: ShufflableFront("Fungi Forest Zinger Room to Upper Exterior", Regions.MushroomLankyZingersRoom, Transitions.ForestExteriorToZingers, regionKongs={Kongs.lanky}),
    Transitions.ForestExteriorToMushrooms: ShufflableFront("Fungi Forest Upper Exterior to Mushroom Room", Regions.MushroomUpperExterior, Transitions.ForestMushroomsToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    Transitions.ForestMushroomsToExterior: ShufflableFront("Fungi Forest Mushroom Room to Upper Exterior", Regions.MushroomLankyMushroomsRoom, Transitions.ForestExteriorToMushrooms, regionKongs={Kongs.lanky}),
    Transitions.ForestTreeToAnthill: ShufflableFront("Fungi Forest Hollow Tree Area to Anthill", Regions.HollowTreeArea, Transitions.ForestAnthillToTree, ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestAnthillToTree: ShufflableFront("Fungi Forest Anthill to Hollow Tree Area", Regions.Anthill, Transitions.ForestTreeToAnthill, regionKongs={Kongs.tiny}),
    Transitions.ForestMainToChunkyMill: ShufflableFront("Fungi Forest Main to Mill Chunky Door", Regions.MillArea, Transitions.ForestChunkyMillToMain, ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.ForestChunkyMillToMain: ShufflableFront("Fungi Forest Mill Chunky Door to Mill", Regions.MillChunkyArea, Transitions.ForestMainToChunkyMill, ExitCategories.ForestMill, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestMainToTinyMill: ShufflableFront("Fungi Forest Main to Mill Tiny Entrance", Regions.MillArea, Transitions.ForestTinyMillToMain, ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestTinyMillToMain: ShufflableFront("Fungi Forest Mill Tiny Entrance to Main", Regions.MillTinyArea, Transitions.ForestMainToTinyMill, ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.ForestMainToGrinder: ShufflableFront("Fungi Forest Main to Grinder Room", Regions.MillArea, Transitions.ForestGrinderToMain, ExitCategories.ForestExterior),
    Transitions.ForestGrinderToMain: ShufflableFront("Fungi Forest Grinder Room to Main", Regions.GrinderRoom, Transitions.ForestMainToGrinder, ExitCategories.ForestGrinder),
    Transitions.ForestMainToRafters: ShufflableFront("Fungi Forest Main to Rafters", Regions.MillArea, Transitions.ForestRaftersToMain, ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.ForestRaftersToMain: ShufflableFront("Fungi Forest Rafters to Main", Regions.MillRafters, Transitions.ForestMainToRafters, regionKongs={Kongs.diddy}),
    Transitions.ForestMainToWinch: ShufflableFront("Fungi Forest Main to Winch Room", Regions.MillArea, Transitions.ForestWinchToMain, ExitCategories.ForestExterior, entryKongs={Kongs.diddy}),
    Transitions.ForestWinchToMain: ShufflableFront("Fungi Forest Winch Room to Main", Regions.WinchRoom, Transitions.ForestMainToWinch, regionKongs={Kongs.diddy}),
    Transitions.ForestMainToAttic: ShufflableFront("Fungi Forest Main to Mill Attic", Regions.MillArea, Transitions.ForestAtticToMain, ExitCategories.ForestExterior),
    Transitions.ForestAtticToMain: ShufflableFront("Fungi Forest Mill Attic to Main", Regions.MillAttic, Transitions.ForestMainToAttic, regionKongs={Kongs.lanky}),
    Transitions.ForestTinyMillToSpider: ShufflableFront("Fungi Forest Mill to Spider Boss", Regions.MillTinyArea, Transitions.ForestSpiderToTinyMill, ExitCategories.ForestMill, regionKongs={Kongs.tiny}),
    Transitions.ForestSpiderToTinyMill: ShufflableFront("Fungi Forest Spider Boss to Mill", Regions.SpiderRoom, Transitions.ForestTinyMillToSpider, regionKongs={Kongs.tiny}),
    Transitions.ForestTinyMillToGrinder: ShufflableFront("Fungi Forest Tiny Entrance to Grinder Room", Regions.MillTinyArea, Transitions.ForestGrinderToTinyMill, ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestGrinderToTinyMill: ShufflableFront("Fungi Forest Grinder Room to Tiny Entrance", Regions.GrinderRoom, Transitions.ForestTinyMillToGrinder, ExitCategories.ForestGrinder, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestMainToBarn: ShufflableFront("Fungi Forest Main to Thornvine Barn", Regions.ThornvineArea, Transitions.ForestBarnToMain, ExitCategories.ForestExterior, entryKongs={Kongs.donkey}),
    Transitions.ForestBarnToMain: ShufflableFront("Fungi Forest Thornvine Barn to Main", Regions.ThornvineBarn, Transitions.ForestMainToBarn, regionKongs={Kongs.donkey}),
    # Crystal Caves Exits
    Transitions.CavesMainToRace: ShufflableFront("Crystal Caves Main to Beetle Race", Regions.CrystalCavesMain, Transitions.CavesRaceToMain, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesRaceToMain: ShufflableFront("Crystal Caves Beetle Race to Main", Regions.CavesLankyRace, Transitions.CavesMainToRace, regionKongs={Kongs.lanky}),
    Transitions.CavesMainToCastle: ShufflableFront("Crystal Caves Main to Frozen Castle", Regions.CrystalCavesMain, Transitions.CavesCastleToMain, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}),
    Transitions.CavesCastleToMain: ShufflableFront("Crystal Caves Frozen Castle to Main", Regions.FrozenCastle, Transitions.CavesMainToCastle, regionKongs={Kongs.lanky}),
    Transitions.CavesIglooToDonkey: ShufflableFront("Crystal Caves Main to Donkey 5DI", Regions.IglooArea, Transitions.CavesDonkeyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToIgloo: ShufflableFront("Crystal Caves Donkey 5DI to Main", Regions.DonkeyIgloo, Transitions.CavesIglooToDonkey, regionKongs={Kongs.donkey}),
    Transitions.CavesIglooToDiddy: ShufflableFront("Crystal Caves Main to Diddy 5DI", Regions.IglooArea, Transitions.CavesDiddyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyToIgloo: ShufflableFront("Crystal Caves Diddy 5DI to Main", Regions.DiddyIgloo, Transitions.CavesIglooToDiddy, regionKongs={Kongs.diddy}),
    Transitions.CavesIglooToLanky: ShufflableFront("Crystal Caves Main to Lanky 5DI", Regions.IglooArea, Transitions.CavesLankyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToIgloo: ShufflableFront("Crystal Caves Lanky 5DI to Main", Regions.LankyIgloo, Transitions.CavesIglooToLanky, regionKongs={Kongs.lanky}),
    Transitions.CavesIglooToTiny: ShufflableFront("Crystal Caves Main to Tiny 5DI", Regions.IglooArea, Transitions.CavesTinyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToIgloo: ShufflableFront("Crystal Caves Tiny 5DI to Main", Regions.TinyIgloo, Transitions.CavesIglooToTiny, regionKongs={Kongs.tiny}),
    Transitions.CavesIglooToChunky: ShufflableFront("Crystal Caves Main to Chunky 5DI", Regions.IglooArea, Transitions.CavesChunkyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToIgloo: ShufflableFront("Crystal Caves Chunky 5DI to Main", Regions.ChunkyIgloo, Transitions.CavesIglooToChunky, regionKongs={Kongs.chunky}),
    Transitions.CavesCabinToRotating: ShufflableFront("Crystal Caves Main to Rotating Cabin", Regions.CabinArea, Transitions.CavesRotatingToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesRotatingToCabin: ShufflableFront("Crystal Caves Rotating Cabin to Main", Regions.RotatingCabin, Transitions.CavesCabinToRotating, regionKongs={Kongs.donkey}),
    Transitions.CavesCabinToDonkey: ShufflableFront("Crystal Caves Main to Donkey 5DC", Regions.CabinArea, Transitions.CavesDonkeyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToCabin: ShufflableFront("Crystal Caves Donkey 5DC to Main", Regions.DonkeyCabin, Transitions.CavesCabinToDonkey, regionKongs={Kongs.donkey}),
    Transitions.CavesCabinToDiddyLower: ShufflableFront("Crystal Caves Main to Diddy Lower 5DC", Regions.CabinArea, Transitions.CavesDiddyLowerToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyLowerToCabin: ShufflableFront("Crystal Caves Diddy Lower 5DC to Main", Regions.DiddyLowerCabin, Transitions.CavesCabinToDiddyLower, regionKongs={Kongs.diddy}),
    Transitions.CavesCabinToDiddyUpper: ShufflableFront("Crystal Caves Main to Diddy Upper 5DC", Regions.CabinArea, Transitions.CavesDiddyUpperToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyUpperToCabin: ShufflableFront("Crystal Caves Diddy Upper 5DC to Main", Regions.DiddyUpperCabin, Transitions.CavesCabinToDiddyUpper, regionKongs={Kongs.diddy}),
    Transitions.CavesCabinToLanky: ShufflableFront("Crystal Caves Main to Lanky 1DC", Regions.CabinArea, Transitions.CavesLankyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToCabin: ShufflableFront("Crystal Caves Lanky 1DC to Main", Regions.LankyCabin, Transitions.CavesCabinToLanky, regionKongs={Kongs.lanky}),
    Transitions.CavesCabinToTiny: ShufflableFront("Crystal Caves Main to Tiny 5DC", Regions.CabinArea, Transitions.CavesTinyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToCabin: ShufflableFront("Crystal Caves Tiny 5DC to Main", Regions.TinyCabin, Transitions.CavesCabinToTiny, regionKongs={Kongs.tiny}),
    Transitions.CavesCabinToChunky: ShufflableFront("Crystal Caves Main to Chunky 5DC", Regions.CabinArea, Transitions.CavesChunkyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToCabin: ShufflableFront("Crystal Caves Chunky 5DC to Main", Regions.ChunkyCabin, Transitions.CavesCabinToChunky, regionKongs={Kongs.chunky}),
    # Creepy Castle Exits
    Transitions.CastleMainToTree: ShufflableFront("Creepy Castle Main to Tree", Regions.CreepyCastleMain, Transitions.CastleTreeToMain, ExitCategories.CastleExterior),
    Transitions.CastleTreeToMain: ShufflableFront("Creepy Castle Tree to Main", Regions.CastleTree, Transitions.CastleMainToTree, regionKongs={Kongs.donkey, Kongs.chunky}),
    # At some point add tree drain pipe
    Transitions.CastleMainToLibrary: ShufflableFront("Creepy Castle Main to Library", Regions.CreepyCastleMain, Transitions.CastleLibraryToMain, ExitCategories.CastleExterior, entryKongs={Kongs.donkey}),
    Transitions.CastleLibraryToMain: ShufflableFront("Creepy Castle Library to Main", Regions.Library, Transitions.CastleMainToLibrary, regionKongs={Kongs.donkey}),
    # At some point add library back door
    Transitions.CastleMainToBallroom: ShufflableFront("Creepy Castle Main to Ballroom", Regions.CreepyCastleMain, Transitions.CastleBallroomToMain, ExitCategories.CastleExterior),
    Transitions.CastleBallroomToMain: ShufflableFront("Creepy Castle Ballroom to Main", Regions.Ballroom, Transitions.CastleMainToBallroom, ExitCategories.CastleBallroom),
    Transitions.CastleMainToTower: ShufflableFront("Creepy Castle Main to Tower", Regions.CreepyCastleMain, Transitions.CastleTowerToMain, ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    Transitions.CastleTowerToMain: ShufflableFront("Creepy Castle Tower to Main", Regions.Tower, Transitions.CastleMainToTower, regionKongs={Kongs.lanky}),
    Transitions.CastleMainToGreenhouse: ShufflableFront("Creepy Castle Main to Greenhouse", Regions.CreepyCastleMain, Transitions.CastleGreenhouseToMain, ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    Transitions.CastleGreenhouseToMain: ShufflableFront("Creepy Castle Greenhouse to Main", Regions.Greenhouse, Transitions.CastleMainToGreenhouse, regionKongs={Kongs.lanky}),
    # At some point add one to differentiate greenhouse back door/front door
    Transitions.CastleMainToTrash: ShufflableFront("Creepy Castle Main to Trash Can", Regions.CreepyCastleMain, Transitions.CastleTrashToMain, ExitCategories.CastleExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CastleTrashToMain: ShufflableFront("Creepy Castle Trash Can to Main", Regions.TrashCan, Transitions.CastleMainToTrash, regionKongs={Kongs.tiny}),
    Transitions.CastleMainToShed: ShufflableFront("Creepy Castle Main to Shed", Regions.CreepyCastleMain, Transitions.CastleShedToMain, ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CastleShedToMain: ShufflableFront("Creepy Castle Shed to Main", Regions.Shed, Transitions.CastleMainToShed, regionKongs={Kongs.chunky}),
    Transitions.CastleMainToMuseum: ShufflableFront("Creepy Castle Main to Museum", Regions.CreepyCastleMain, Transitions.CastleMuseumToMain, ExitCategories.CastleExterior, entryKongs={Kongs.chunky}),
    Transitions.CastleMuseumToMain: ShufflableFront("Creepy Castle Museum to Main", Regions.Museum, Transitions.CastleMainToMuseum, regionKongs={Kongs.chunky}),
    Transitions.CastleMainToLower: ShufflableFront("Creepy Castle Main to Lower Cave", Regions.CreepyCastleMain, Transitions.CastleLowerToMain, ExitCategories.CastleExterior),
    Transitions.CastleLowerToMain: ShufflableFront("Creepy Castle Lower Cave to Main", Regions.LowerCave, Transitions.CastleMainToLower, ExitCategories.CastleLower),
    Transitions.CastleMainToUpper: ShufflableFront("Creepy Castle Main to Upper Cave", Regions.CreepyCastleMain, Transitions.CastleUpperToMain, ExitCategories.CastleExterior),
    Transitions.CastleUpperToMain: ShufflableFront("Creepy Castle Upper Cave to Main", Regions.UpperCave, Transitions.CastleMainToUpper, ExitCategories.CastleUpper),
    Transitions.CastleWaterfallToUpper: ShufflableFront("Creepy Castle Waterfall to Upper Cave", Regions.CastleWaterfall, Transitions.CastleUpperToWaterfall, ExitCategories.CastleExterior),
    Transitions.CastleUpperToWaterfall: ShufflableFront("Creepy Castle Upper Cave to Waterfall", Regions.UpperCave, Transitions.CastleWaterfallToUpper, ExitCategories.CastleUpper),
    Transitions.CastleBallroomToRace: ShufflableFront("Creepy Castle Ballroom to Car Race", Regions.Ballroom, Transitions.CastleRaceToBallroom, ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}),
    Transitions.CastleRaceToBallroom: ShufflableFront("Creepy Castle Car Race to Ballroom", Regions.CastleTinyRace, Transitions.CastleBallroomToRace, regionKongs={Kongs.tiny}),
    Transitions.CastleLowerToCrypt: ShufflableFront("Creepy Castle Lower Cave to Crypt", Regions.LowerCave, Transitions.CastleCryptToLower, ExitCategories.CastleLower, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleCryptToLower: ShufflableFront("Creepy Castle Crypt to Lower Cave", Regions.Crypt, Transitions.CastleLowerToCrypt, ExitCategories.CastleCrypt, regionKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleLowerToMausoleum: ShufflableFront("Creepy Castle Lower Cave to Mausoleum", Regions.LowerCave, Transitions.CastleMausoleumToLower, ExitCategories.CastleLower, entryKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleMausoleumToLower: ShufflableFront("Creepy Castle Mausoleum to Lower cave", Regions.Mausoleum, Transitions.CastleLowerToMausoleum, regionKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleCryptToCarts: ShufflableFront("Creepy Castle Crypt to Minecarts", Regions.Crypt, Transitions.CastleCartsToCrypt, ExitCategories.CastleCrypt, entryKongs={Kongs.donkey}),
    Transitions.CastleCartsToCrypt: ShufflableFront("Creepy Castle Minecarts to Crypt", Regions.CastleMinecarts, Transitions.CastleCryptToCarts, regionKongs={Kongs.donkey}),
    Transitions.CastleUpperToDungeon: ShufflableFront("Creepy Castle Upper Cave to Dungeon", Regions.UpperCave, Transitions.CastleDungeonToUpper, ExitCategories.CastleUpper),
    Transitions.CastleDungeonToUpper: ShufflableFront("Creepy Castle Dungeon to Upper Cave", Regions.Dungeon, Transitions.CastleUpperToDungeon),
}

ShufflableBacks = {
    # DK Isles
    TransitionBack(Regions.IslesMain, "From Training Grounds"),
    TransitionBack(Regions.IslesMain, "From K-Lumsy"),
    TransitionBack(Regions.IslesMain, "From Japes Lobby"),
    TransitionBack(Regions.IslesMain, "From Aztec Lobby"),
    TransitionBack(Regions.CrocodileIsleBeyondLift, "From Factory Lobby"),
    TransitionBack(Regions.IslesMain, "From Galleon Lobby"),
    TransitionBack(Regions.IslesMain, "From Fungi Lobby"),
    TransitionBack(Regions.CrocodileIsleBeyondLift, "From Helm Lobby"),
    TransitionBack(Regions.IslesMain, "From Banana Fairy Isle"),
    TransitionBack(Regions.CrocodileIsleBeyondLift, "From Snide's Room"),
    TransitionBack(Regions.IslesMain, "From Caves Lobby"),
    TransitionBack(Regions.IslesMain, "From Castle Lobby"),
    TransitionBack(Regions.IslesMain, "From K Rool"),
    # Jungle Japes
    TransitionBack(Regions.JungleJapesMain, "From Japes Lobby"),
    TransitionBack(Regions.JapesBeyondFeatherGate, "From Beehive"),
    TransitionBack(Regions.JungleJapesMain, "From Mountain"),
    TransitionBack(Regions.JungleJapesMain, "From Painting Room"),
    TransitionBack(Regions.JungleJapesMain,	"From BBlast"),
    TransitionBack(Regions.JungleJapesMain,	"From Underground"),
    TransitionBack(Regions.JungleJapesMain, "From Minecart"),
    # Angry Aztec
    TransitionBack(Regions.AngryAztecStart, "From Aztec Lobby"),
    TransitionBack(Regions.AngryAztecStart, "From Tiny Temple"),
    TransitionBack(Regions.AngryAztecMain, "From Llama Temple"),
    TransitionBack(Regions.AngryAztecMain, "From Tiny 5DTemple"),
    TransitionBack(Regions.AngryAztecMain, "From Chunky 5DTemple"),
    TransitionBack(Regions.AngryAztecMain, "From DK 5DTemple"),
    TransitionBack(Regions.AngryAztecMain, "From Diddy 5DTemple"),
    TransitionBack(Regions.AngryAztecMain, "From Lanky 5DTemple"),
    TransitionBack(Regions.AngryAztecMain, "From BBlast"),
    TransitionBack(Regions.AngryAztecMain, "From Beetle Race"),
    # Frantic Factory
    TransitionBack(Regions.FranticFactoryStart,	"From Factory Lobby"),
    TransitionBack(Regions.BeyondHatch,	"From Power Shed"),
    TransitionBack(Regions.BeyondHatch,	"From Crusher Room"),
    TransitionBack(Regions.BeyondHatch, "From BBlast"),
    TransitionBack(Regions.FactoryTinyRaceLobby, "From Car Race"),
	# Gloomy Galleon
    TransitionBack(Regions.GloomyGalleonStart, "From Galleon Lobby"),
    TransitionBack(Regions.Shipyard, "From Diddy 5DShip"),
    TransitionBack(Regions.Shipyard, "From Chunky 5DShip"),
    TransitionBack(Regions.Shipyard, "From Lanky 5DShip"),
    TransitionBack(Regions.TreasureRoom, "From Pearls Chest"),
    TransitionBack(Regions.LighthouseArea, "From Mermaid"),
    TransitionBack(Regions.Shipyard, "From Tiny 5DShip"),
    TransitionBack(Regions.Shipyard, "From DK 5DShip"),
    TransitionBack(Regions.Shipyard, "From Tiny 2DShip"),
    TransitionBack(Regions.Shipyard, "From Lanky 2DShip"),
    TransitionBack(Regions.LighthouseArea, "From Lighthouse"),
    TransitionBack(Regions.LighthouseArea, "From Seasick Ship"),
    TransitionBack(Regions.LighthouseArea, "From BBlast"),
    TransitionBack(Regions.Shipyard, "From Seal Race"),
    TransitionBack(Regions.Shipyard, "From Submarine"),
    TransitionBack(Regions.GuitarShip, "From Galleon (Diddy Entrance)"),
    TransitionBack(Regions.TriangleShip, "From Galleon (Chunky Entrance)"),
    TransitionBack(Regions.TromboneShip, "From Galleon (Lanky Entrance)"),
    TransitionBack(Regions.BongosShip, "From Galleon (DK Entrance)"),
    TransitionBack(Regions.SaxophoneShip, "From Galleon (Tiny Entrance)"),
    TransitionBack(Regions.TinyShip, "From Galleon (Tiny Entrance)"),
    TransitionBack(Regions.LankyShip, "From Galleon (Lanky Entrance)"),
    # Fungi Forest
    TransitionBack(Regions.FungiForestStart, "From Fungi Lobby"),
    TransitionBack(Regions.MillArea, "From Lanky Attic"),
    TransitionBack(Regions.MillArea, "From Diddy Attic"),
    TransitionBack(Regions.MillArea, "From Diddy Barn"),
    TransitionBack(Regions.ThornvineArea, "From DK Barn"),
    TransitionBack(Regions.MillArea, "From Mill (Rear, PPunch Door)"),
    TransitionBack(Regions.MillArea, "From Mill (Front)"),
    TransitionBack(Regions.MillArea, "From Mill (Rear, Tiny Hole)"),
    TransitionBack(Regions.GiantMushroomArea, "From G. Mush (Lower)"),
    TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Low Middle)"),
    TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Middle)"),
    TransitionBack(Regions.MushroomNightExterior, "From G. Mush (High Middle)"),
    TransitionBack(Regions.MushroomUpperExterior, "From G. Mush (High)"),
    TransitionBack(Regions.MushroomUpperExterior, "From Face Puzzle (Chunky)"),
    TransitionBack(Regions.MushroomUpperExterior, "From Light Room (Lanky)"),
    TransitionBack(Regions.MushroomUpperExterior, "From Dark Room (Lanky)"),
    TransitionBack(Regions.MillArea, "From Minecart"),
    TransitionBack(Regions.HollowTreeArea, "From Anthill"),
    TransitionBack(Regions.MushroomLowerExterior, "From BBlast"),
    TransitionBack(Regions.GrinderRoom,	"From Fungi (W1 Door)"),
    TransitionBack(Regions.GrinderRoom, "From Mill (Rear)"),
    TransitionBack(Regions.MillChunkyArea, "From Fungi (PPunch Door)"),
    TransitionBack(Regions.MillChunkyArea, "From Spider Boss"),
    TransitionBack(Regions.MillChunkyArea, "From Mill (Front)"),
    TransitionBack(Regions.MillChunkyArea, "From Fungi (Tiny Hole)"),
    TransitionBack(Regions.MushroomLower, "From Fungi (Low)"),
    TransitionBack(Regions.MushroomLower, "From Fungi (Low Middle)"),
    TransitionBack(Regions.MushroomUpper, "From Fungi (Middle)"),
    TransitionBack(Regions.MushroomUpper, "From Fungi (High Middle)"),
    TransitionBack(Regions.MushroomUpper, "From Fungi (High)"),
    # Crystal Caves
    TransitionBack(Regions.CrystalCavesMain, "From Caves Lobby"),
    TransitionBack(Regions.IglooArea, "From Diddy 5DIgloo"),
    TransitionBack(Regions.IglooArea, "From DK 5DIgloo"),
    TransitionBack(Regions.IglooArea, "From Lanky 5DIgloo"),
    TransitionBack(Regions.IglooArea, "From Chunky 5DIgloo"),
    TransitionBack(Regions.IglooArea, "From Tiny 5DIgloo"),
    TransitionBack(Regions.CrystalCavesMain, "From Beetle Race"),
	TransitionBack(Regions.CabinArea, "From DK 5DCabin"),
    TransitionBack(Regions.CabinArea, "From Chunky 5DCabin"),
    TransitionBack(Regions.CabinArea, "From Tiny 5DCabin"),
    TransitionBack(Regions.CabinArea, "From Diddy 5DCabin (Lower)"),
    TransitionBack(Regions.CabinArea, "From Diddy 5DCabin (Upper)"),
    TransitionBack(Regions.CabinArea, "From Rotating Room"),
    TransitionBack(Regions.CabinArea, "From Lanky Cabin"),
    TransitionBack(Regions.CrystalCavesMain, "From BBlast"),
    TransitionBack(Regions.CrystalCavesMain, "From Tile Flipping"),
    # Creepy Castle
    TransitionBack(Regions.CreepyCastleMain, "From Castle Lobby"),
    TransitionBack(Regions.CreepyCastleMain, "From Tree (Entrance)"),
    TransitionBack(Regions.CreepyCastleMain, "From Tree (Exit)"),
    TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Front)"),
    TransitionBack(Regions.CreepyCastleMain, "From Crypt"),
    TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Rear)"),
    TransitionBack(Regions.CreepyCastleMain, "From Museum"),
    TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (Front)"),
    TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (Rear)"),
    TransitionBack(Regions.CreepyCastleMain, "From Shed"),
    TransitionBack(Regions.CreepyCastleMain, "From Ballroom"),
    TransitionBack(Regions.CreepyCastleMain, "From Library (Entrance)"),
    TransitionBack(Regions.CreepyCastleMain, "From Library (Exit)"),
    TransitionBack(Regions.CreepyCastleMain, "From Tower"),
    TransitionBack(Regions.CreepyCastleMain, "From Trash Can"),
    TransitionBack(Regions.CreepyCastleMain, "From BBlast"),
	TransitionBack(Regions.Ballroom, "From Castle"),
    TransitionBack(Regions.Ballroom, "From Museum (Monkeyport)"),
    TransitionBack(Regions.Crypt, "From Crypt"),
    TransitionBack(Regions.Crypt, "From Minecart"),
    TransitionBack(Regions.Mausoleum, "From Castle"),
    TransitionBack(Regions.Museum, "From Car Race"),
    TransitionBack(Regions.Museum, "From Ballroom (Monkeyport)"),
    TransitionBack(Regions.Library, "From Castle (Entrance)"),
    TransitionBack(Regions.Library, "From Castle (Exit)"),
    TransitionBack(Regions.UpperCave, "From Castle (Front)"),
    TransitionBack(Regions.UpperCave, "From Castle (Rear)"),
    TransitionBack(Regions.UpperCave, "From Dungeon"),
	TransitionBack(Regions.LowerCave, "From Castle"),
    TransitionBack(Regions.LowerCave, "From Crypt (DK/Diddy/Chunky)"),
    TransitionBack(Regions.LowerCave, "From Crypt (Lanky/Tiny)"),
    # Level Lobbies
    TransitionBack(Regions.JungleJapesLobby, "From DK Isles"),
    TransitionBack(Regions.JungleJapesLobby, "From Japes"),
    TransitionBack(Regions.AngryAztecLobby,	"From DK Isles"),
    TransitionBack(Regions.AngryAztecLobby,	"From Aztec"),
    TransitionBack(Regions.FranticFactoryLobby, "From DK Isles"),
    TransitionBack(Regions.FranticFactoryLobby, "From Factory"),
    TransitionBack(Regions.GloomyGalleonLobby, "From DK Isles"),
    TransitionBack(Regions.GloomyGalleonLobby, "From Galleon"),
    TransitionBack(Regions.FungiForestLobby, "From DK Isles"),
    TransitionBack(Regions.FungiForestLobby, "From Fungi"),
    TransitionBack(Regions.CrystalCavesLobby, "From DK Isles"),
    TransitionBack(Regions.CrystalCavesLobby, "From Caves"),
    TransitionBack(Regions.CreepyCastleLobby, "From DK Isles"),
    TransitionBack(Regions.CreepyCastleLobby, "From Castle"),
    TransitionBack(Regions.HideoutHelmLobby, "From DK Isles"),
    TransitionBack(Regions.HideoutHelmLobby, "From Helm"),
    TransitionBack(Regions.StartArea, "From DK Isles"),
    TransitionBack(Regions.StartArea, "From DK's Treehouse"),
}
