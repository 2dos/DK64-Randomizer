# fmt: off
"""Shufflable exit class and list file."""

from randomizer.Enums.ExitCategories import ExitCategories
from randomizer.Enums.Kongs import Kongs
from randomizer.Enums.Regions import Regions
from randomizer.Enums.Transitions import Transitions
from randomizer.LogicClasses import TransitionBack


class ShufflableExit:
    """Class that stores data about an exit to be shuffled."""

    def __init__(self, name, region, back, backName, category=None, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.lanky, Kongs.tiny, Kongs.chunky}, regionKongs={}, move=False):
        """Initialize with given parameters."""
        self.name = name
        self.region = region
        self.back = back
        self.backName = backName
        self.category = category
        self.entryKongs = entryKongs  # Indicates either need to be one of a certain set of kongs to gain access to this transition
        self.regionKongs = regionKongs  # Indicates need to be a certain kong or kongs on the back side of the transition. Should only apply if the destination region doesn't have a tag barrel
        self.move = move  # Indicates this transition needs a kong-specific move to access, so it's even more restrictive
        # shuffledId is pointing to the shuffled destination exit within ShufflableExits
        # Initialized as none until it gets shuffled
        self.shuffledId = None
        self.shuffled = False
        self.toBeShuffled = False


ShufflableExits = {
    # Level Exits
    Transitions.IslesToJapes: ShufflableExit("Japes Lobby to Jungle Japes", Regions.JungleJapesLobby, TransitionBack(Regions.JungleJapesMain, "From Japes Lobby", Transitions.JapesToIsles), "Japes Lobby from Jungle Japes", ExitCategories.JapesLobby),
    Transitions.JapesToIsles: ShufflableExit("Jungle Japes to Japes Lobby", Regions.JungleJapesMain, TransitionBack(Regions.JungleJapesLobby, "From Japes", Transitions.IslesToJapes), "Jungle Japes from Japes Lobby", ExitCategories.JapesExterior),
    Transitions.IslesToAztec: ShufflableExit("Aztec Lobby to Angry Aztec", Regions.AngryAztecLobby, TransitionBack(Regions.AngryAztecStart, "From Aztec Lobby", Transitions.AztecToIsles), "Aztec Lobby from Angry Aztec", ExitCategories.AztecLobby),
    Transitions.AztecToIsles: ShufflableExit("Angry Aztec to Aztec Lobby", Regions.AngryAztecStart, TransitionBack(Regions.AngryAztecLobby, "From Aztec", Transitions.IslesToAztec), "Angry Aztec from Aztec Lobby", ExitCategories.AztecExterior),
    Transitions.IslesToFactory: ShufflableExit("Factory Lobby to Frantic Factory", Regions.FranticFactoryLobby, TransitionBack(Regions.FranticFactoryStart, "From Factory Lobby", Transitions.FactoryToIsles), "Factory Lobby from Frantic Factory", ExitCategories.FactoryLobby),
    Transitions.FactoryToIsles: ShufflableExit("Frantic Factory to Factory Lobby", Regions.FranticFactoryStart, TransitionBack(Regions.FranticFactoryLobby, "From Factory", Transitions.IslesToFactory), "Frantic Factory from Factory Lobby", ExitCategories.FactoryExterior),
    Transitions.IslesToGalleon: ShufflableExit("Galleon Lobby to Gloomy Galleon", Regions.GloomyGalleonLobby, TransitionBack(Regions.GloomyGalleonStart, "From Galleon Lobby", Transitions.GalleonToIsles), "Galleon Lobby from Gloomy Galleon", ExitCategories.GalleonLobby),
    Transitions.GalleonToIsles: ShufflableExit("Gloomy Galleon to Galleon Lobby", Regions.GloomyGalleonStart, TransitionBack(Regions.GloomyGalleonLobby, "From Galleon", Transitions.IslesToGalleon), "Gloomy Galleon from Galleon Lobby", ExitCategories.GalleonExterior),
    Transitions.IslesToForest: ShufflableExit("Fungi Lobby to Fungi Forest", Regions.FungiForestLobby, TransitionBack(Regions.FungiForestStart, "From Fungi Lobby", Transitions.ForestToIsles), "Fungi Lobby from Fungi Forest", ExitCategories.ForestLobby),
    Transitions.ForestToIsles: ShufflableExit("Fungi Forest to Fungi Lobby", Regions.FungiForestStart, TransitionBack(Regions.FungiForestLobby, "From Fungi", Transitions.IslesToForest), "Fungi Forest from Fungi Lobby", ExitCategories.ForestExterior),
    Transitions.IslesToCaves: ShufflableExit("Caves Lobby to Crystal Caves", Regions.CrystalCavesLobby, TransitionBack(Regions.CrystalCavesMain, "From Caves Lobby", Transitions.CavesToIsles), "Caves Lobby from Crystal Caves", ExitCategories.CavesLobby),
    Transitions.CavesToIsles: ShufflableExit("Crystal Caves to Caves Lobby", Regions.CrystalCavesMain, TransitionBack(Regions.CrystalCavesLobby, "From Caves", Transitions.IslesToCaves), "Crystal Caves from Caves Lobby", ExitCategories.CavesExterior),
    Transitions.IslesToCastle: ShufflableExit("Castle Lobby to Creepy Castle", Regions.CreepyCastleLobby, TransitionBack(Regions.CreepyCastleMain, "From Castle Lobby", Transitions.CastleToIsles), "Castle Lobby from Creepy Castle", ExitCategories.CastleLobby),
    Transitions.CastleToIsles: ShufflableExit("Creepy Castle to Castle Lobby", Regions.CreepyCastleMain, TransitionBack(Regions.CreepyCastleLobby, "From Castle", Transitions.IslesToCastle), "Creepy Castle from Castle Lobby", ExitCategories.CastleExterior),

    # DK Isles Exits
    Transitions.IslesTreehouseToStart: ShufflableExit("DK's Treehouse to Training Grounds", Regions.Treehouse, TransitionBack(Regions.TrainingGrounds, "From Treehouse", Transitions.IslesStartToTreehouse), "Training Grounds from DK's Treehouse", ExitCategories.IslesTreehouse),
    Transitions.IslesStartToTreehouse: ShufflableExit("Training Grounds to DK's Treehouse", Regions.TrainingGrounds, TransitionBack(Regions.Treehouse, "From Training Grounds", Transitions.IslesTreehouseToStart), "DK's Treehouse (Training Grounds)", ExitCategories.IslesTrainingGrounds),
    Transitions.IslesStartToMain: ShufflableExit("Training Grounds to DK Isles Main", Regions.TrainingGrounds, TransitionBack(Regions.IslesMain, "From Training Grounds", Transitions.IslesMainToStart), "DK Isles Main from Training Grounds", ExitCategories.IslesTrainingGrounds),
    Transitions.IslesMainToStart: ShufflableExit("DK Isles Main to Training Grounds", Regions.IslesMain, TransitionBack(Regions.TrainingGrounds, "From DK Isles", Transitions.IslesStartToMain), "Training Grounds from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesMainToFairy: ShufflableExit("DK Isles Main to Banana Fairy Isle", Regions.IslesMain, TransitionBack(Regions.BananaFairyRoom, "From DK Isles", Transitions.IslesFairyToMain), "Banana Fairy Isle", ExitCategories.IslesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.IslesFairyToMain: ShufflableExit("DK Isles Banana Fairy Isle to Main", Regions.BananaFairyRoom, TransitionBack(Regions.IslesMain, "From Banana Fairy Isle", Transitions.IslesMainToFairy), "DK Isles Main from Banana Fairy Isle"),
    Transitions.IslesMainToSnideRoom: ShufflableExit("DK Isles Main to Snide's Room", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.IslesSnideRoom, "From DK Isles", Transitions.IslesSnideRoomToMain), "Snide's Room (DK Isles)", ExitCategories.IslesExterior),
    Transitions.IslesSnideRoomToMain: ShufflableExit("DK Isles Snide's Room to Main", Regions.IslesSnideRoom, TransitionBack(Regions.CrocodileIsleBeyondLift, "From Snide's Room", Transitions.IslesMainToSnideRoom), "DK Isles Main from Snide's Room"),
    Transitions.IslesMainToJapesLobby: ShufflableExit("DK Isles Main to Japes Lobby", Regions.IslesMain, TransitionBack(Regions.JungleJapesLobby, "From DK Isles", Transitions.IslesJapesLobbyToMain), "Japes Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesJapesLobbyToMain: ShufflableExit("DK Isles Japes Lobby to Main", Regions.JungleJapesLobby, TransitionBack(Regions.IslesMain, "From Japes Lobby", Transitions.IslesMainToJapesLobby), "DK Isles Main from Japes Lobby", ExitCategories.JapesLobby),
    Transitions.IslesMainToAztecLobby: ShufflableExit("DK Isles Main to Aztec Lobby", Regions.IslesMainUpper, TransitionBack(Regions.AngryAztecLobby, "From DK Isles", Transitions.IslesAztecLobbyToMain), "Aztec Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesAztecLobbyToMain: ShufflableExit("DK Isles Aztec Lobby to Main", Regions.AngryAztecLobby, TransitionBack(Regions.IslesMainUpper, "From Aztec Lobby", Transitions.IslesMainToAztecLobby), "DK Isles Main from Aztec Lobby", ExitCategories.AztecLobby),
    Transitions.IslesMainToFactoryLobby: ShufflableExit("DK Isles Main to Factory Lobby", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.FranticFactoryLobby, "From DK Isles", Transitions.IslesFactoryLobbyToMain), "Factory Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesFactoryLobbyToMain: ShufflableExit("DK Isles Factory Lobby to Main", Regions.FranticFactoryLobby, TransitionBack(Regions.CrocodileIsleBeyondLift, "From Factory Lobby", Transitions.IslesMainToFactoryLobby), "DK Isles Main from Factory Lobby", ExitCategories.FactoryLobby),
    Transitions.IslesMainToGalleonLobby: ShufflableExit("DK Isles Main to Galleon Lobby", Regions.IslesMain, TransitionBack(Regions.GloomyGalleonLobby, "From DK Isles", Transitions.IslesGalleonLobbyToMain), "Galleon Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesGalleonLobbyToMain: ShufflableExit("DK Isles Galleon Lobby to Main", Regions.GloomyGalleonLobby, TransitionBack(Regions.IslesMain, "From Galleon Lobby", Transitions.IslesMainToGalleonLobby), "DK Isles Main from Galleon Lobby", ExitCategories.GalleonLobby),
    Transitions.IslesMainToForestLobby: ShufflableExit("DK Isles Main to Fungi Lobby", Regions.CabinIsle, TransitionBack(Regions.FungiForestLobby, "From DK Isles", Transitions.IslesForestLobbyToMain), "Fungi Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesForestLobbyToMain: ShufflableExit("DK Isles Fungi Lobby to Main", Regions.FungiForestLobby, TransitionBack(Regions.CabinIsle, "From Fungi Lobby", Transitions.IslesMainToForestLobby), "DK Isles Main from Fungi Lobby", ExitCategories.ForestLobby),
    Transitions.IslesMainToCavesLobby: ShufflableExit("DK Isles Main to Caves Lobby", Regions.IslesMainUpper, TransitionBack(Regions.CrystalCavesLobby, "From DK Isles", Transitions.IslesCavesLobbyToMain), "Caves Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesCavesLobbyToMain: ShufflableExit("DK Isles Caves Lobby to Main", Regions.CrystalCavesLobby, TransitionBack(Regions.IslesMainUpper, "From Caves Lobby", Transitions.IslesMainToCavesLobby), "DK Isles Main from Caves Lobby", ExitCategories.CavesLobby),
    Transitions.IslesMainToCastleLobby: ShufflableExit("DK Isles Main to Castle Lobby", Regions.IslesMain, TransitionBack(Regions.CreepyCastleLobby, "From DK Isles", Transitions.IslesCastleLobbyToMain), "Castle Lobby from DK Isles Main", ExitCategories.IslesExterior),
    Transitions.IslesCastleLobbyToMain: ShufflableExit("DK Isles Castle Lobby to Main", Regions.CreepyCastleLobby, TransitionBack(Regions.IslesMain, "From Castle Lobby", Transitions.IslesMainToCastleLobby), "DK Isles Main from Castle Lobby", ExitCategories.CastleLobby),

    # Jungle Japes Exits
    Transitions.JapesMainToMine: ShufflableExit("Jungle Japes Main to Mountain", Regions.JungleJapesMain, TransitionBack(Regions.Mine, "From Japes Main", Transitions.JapesMineToMain), "Jungle Japes Mountain from Main", ExitCategories.JapesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.JapesMineToMain: ShufflableExit("Jungle Japes Mountain to Main", Regions.Mine, TransitionBack(Regions.JungleJapesMain, "From Mountain", Transitions.JapesMainToMine), "Jungle Japes Main from Mountain", ExitCategories.JapesMine),
    Transitions.JapesMainToLankyCave: ShufflableExit("Jungle Japes Main to Painting Room", Regions.JungleJapesMain, TransitionBack(Regions.JapesLankyCave, "From Japes Main", Transitions.JapesLankyCaveToMain), "Jungle Japes Painting Room", ExitCategories.JapesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.JapesLankyCaveToMain: ShufflableExit("Jungle Japes Painting Room to Main", Regions.JapesLankyCave, TransitionBack(Regions.JungleJapesMain, "From Painting Room", Transitions.JapesMainToLankyCave), "Jungle Japes Main from Painting Room"),
    Transitions.JapesMainToCatacomb: ShufflableExit("Jungle Japes Main to Underground", Regions.JungleJapesMain, TransitionBack(Regions.JapesCatacomb, "From Japes Main", Transitions.JapesCatacombToMain), "Jungle Japes Underground", ExitCategories.JapesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.JapesCatacombToMain: ShufflableExit("Jungle Japes Underground to Main", Regions.JapesCatacomb, TransitionBack(Regions.JungleJapesMain, "From Underground", Transitions.JapesMainToCatacomb), "Jungle Japes Main from Underground"),
    Transitions.JapesMainToTinyHive: ShufflableExit("Jungle Japes Main to Beehive", Regions.JapesBeyondFeatherGate, TransitionBack(Regions.TinyHive, "From Japes Main", Transitions.JapesTinyHiveToMain), "Jungle Japes Beehive", ExitCategories.JapesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.JapesTinyHiveToMain: ShufflableExit("Jungle Japes Beehive to Main", Regions.TinyHive, TransitionBack(Regions.JapesBeyondFeatherGate, "From Beehive", Transitions.JapesMainToTinyHive), "Jungle Japes Main from Beehive"),
    # Transitions.JapesMainToBBlast: ShufflableExit("Jungle Japes Main to Baboon Blast", Regions.JungleJapesMain, TransitionBack(Regions.JapesBaboonBlast, "From Japes Main"), "Jungle Japes Baboon Blast", ExitCategories.JapesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.JapesMineToCarts: ShufflableExit("Jungle Japes Mountain to Minecart", Regions.Mine, TransitionBack(Regions.JapesMinecarts, "From Mountain"), "Jungle Japes Minecart", ExitCategories.JapesMine, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}),
    Transitions.JapesCartsToMain: ShufflableExit("Jungle Japes Minecart to Main", Regions.JapesMinecarts, TransitionBack(Regions.JungleJapesMain, "From Minecart"), "Jungle Japes Main from Minecart"),

    # Angry Aztec Exits
    Transitions.AztecTempleToStart: ShufflableExit("Angry Aztec Tiny Temple to Main", Regions.TempleStart, TransitionBack(Regions.AngryAztecMain, "From Tiny Temple"), "Angry Aztec Main from Tiny Temple"),
    Transitions.AztecMainToDonkey: ShufflableExit("Angry Aztec Main to Donkey 5DTemple", Regions.AngryAztecMain, TransitionBack(Regions.DonkeyTemple, "From Aztec Main", Transitions.AztecDonkeyToMain), "Angry Aztec DK 5DTemple", ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.AztecDonkeyToMain: ShufflableExit("Angry Aztec Donkey 5DTemple to Main", Regions.DonkeyTemple, TransitionBack(Regions.AngryAztecMain, "From DK 5DTemple", Transitions.AztecMainToDonkey), "Angry Aztec Main from DK 5DTemple"),
    Transitions.AztecMainToDiddy: ShufflableExit("Angry Aztec Main to Diddy 5DTemple", Regions.AngryAztecMain, TransitionBack(Regions.DiddyTemple, "From Aztec Main", Transitions.AztecDiddyToMain), "Angry Aztec Diddy 5DTemple", ExitCategories.AztecExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.AztecDiddyToMain: ShufflableExit("Angry Aztec Diddy 5DTemple to Main", Regions.DiddyTemple, TransitionBack(Regions.AngryAztecMain, "From Diddy 5DTemple", Transitions.AztecMainToDiddy), "Angry Aztec Main from Diddy 5DTemple"),
    Transitions.AztecMainToLanky: ShufflableExit("Angry Aztec Main to Lanky 5DTemple", Regions.AngryAztecMain, TransitionBack(Regions.LankyTemple, "From Aztec Main", Transitions.AztecLankyToMain), "Angry Aztec Lanky 5DTemple", ExitCategories.AztecExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.AztecLankyToMain: ShufflableExit("Angry Aztec Lanky 5DTemple to Main", Regions.LankyTemple, TransitionBack(Regions.AngryAztecMain, "From Lanky 5DTemple", Transitions.AztecMainToLanky), "Angry Aztec Main from Lanky 5DTemple"),
    Transitions.AztecMainToTiny: ShufflableExit("Angry Aztec Main to Tiny 5DTemple", Regions.AngryAztecMain, TransitionBack(Regions.TinyTemple, "From Aztec Main", Transitions.AztecTinyToMain), "Angry Aztec Tiny 5DTemple", ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.AztecTinyToMain: ShufflableExit("Angry Aztec Tiny 5DTemple To Main", Regions.TinyTemple, TransitionBack(Regions.AngryAztecMain, "From Tiny 5DTemple", Transitions.AztecMainToTiny), "Angry Aztec Main from Tiny 5DTemple"),
    Transitions.AztecMainToChunky: ShufflableExit("Angry Aztec Main to Chunky 5DTemple", Regions.AngryAztecMain, TransitionBack(Regions.ChunkyTemple, "From Aztec Main", Transitions.AztecChunkyToMain), "Angry Aztec Chunky 5DTemple", ExitCategories.AztecExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.AztecChunkyToMain: ShufflableExit("Angry Aztec Chunky 5DTemple to Main", Regions.ChunkyTemple, TransitionBack(Regions.AngryAztecMain, "From Chunky 5DTemple", Transitions.AztecMainToChunky), "Angry Aztec Main from Chunky 5DTemple"),
    Transitions.AztecMainToRace: ShufflableExit("Angry Aztec Main to Beetle Race", Regions.AngryAztecMain, TransitionBack(Regions.AztecTinyRace, "From Aztec Main", Transitions.AztecRaceToMain), "Angry Aztec Beetle Race", ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.AztecRaceToMain: ShufflableExit("Angry Aztec Beetle Race to Main", Regions.AztecTinyRace, TransitionBack(Regions.AngryAztecMain, "From Beetle Race", Transitions.AztecMainToRace), "Angry Aztec Main from Beetle Race"),
    Transitions.AztecLlamaToMain: ShufflableExit("Angry Aztec Llama Temple to Main", Regions.LlamaTemple, TransitionBack(Regions.AngryAztecMain, "From Llama Temple"), "Angry Aztec Main from Llama Temple"),
    # Transitions.AztecMainToBBlast: ShufflableExit("Angry Aztec Main to Baboon Blast", Regions.AngryAztecMain, TransitionBack(Regions.AztecBaboonBlast, "From Aztec Main"), "Angry Aztec Baboon Blast", ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Frantic Factory Exits
    Transitions.FactoryRandDToRace: ShufflableExit("Frantic Factory R&D to Car Race", Regions.RandD, TransitionBack(Regions.FactoryTinyRace, "From Factory Main", Transitions.FactoryRaceToRandD), "Frantic Factory Car Race", ExitCategories.FactoryExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.FactoryRaceToRandD: ShufflableExit("Frantic Factory Car Race to R&D", Regions.FactoryTinyRace, TransitionBack(Regions.FactoryTinyRaceLobby, "From Car Race", Transitions.FactoryRandDToRace), "Frantic Factory Main from Car Race"),
    Transitions.FactoryChunkyRoomToPower: ShufflableExit("Frantic Factory Main to Power Shed", Regions.ChunkyRoomPlatform, TransitionBack(Regions.PowerHut, "From Factory Main", Transitions.FactoryPowerToChunkyRoom), "Frantic Factory Power Shed", ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.FactoryPowerToChunkyRoom: ShufflableExit("Frantic Factory Power Room to Chunky Room", Regions.PowerHut, TransitionBack(Regions.BeyondHatch, "From Power Shed", Transitions.FactoryChunkyRoomToPower), "Frantic Factory Main from Power Shed"),
    Transitions.FactoryBeyondHatchToInsideCore: ShufflableExit("Frantic Factory Main to Crusher Room", Regions.BeyondHatch, TransitionBack(Regions.InsideCore, "From Factory Main", Transitions.FactoryInsideCoreToBeyondHatch), "Frantic Factory Crusher Room", ExitCategories.FactoryExterior, regionKongs={Kongs.donkey, Kongs.lanky}),
    Transitions.FactoryInsideCoreToBeyondHatch: ShufflableExit("Frantic Factory Crusher Room to Main", Regions.InsideCore, TransitionBack(Regions.BeyondHatch, "From Crusher Room", Transitions.FactoryBeyondHatchToInsideCore), "Frantic Factory Main from Crusher Room"),
    # Transitions.FactoryMainToBBlast: ShufflableExit("Frantic Factory Main to BBlast", Regions.BeyondHatch, TransitionBack(Regions.FactoryBaboonBlast, "From Factory Main"), "Frantic Factory Baboon Blast", ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Gloomy Galleon Exits
    Transitions.GalleonLighthouseAreaToLighthouse: ShufflableExit("Gloomy Galleon Main to Lighthouse", Regions.LighthouseArea, TransitionBack(Regions.Lighthouse, "From Galleon Main", Transitions.GalleonLighthouseToLighthouseArea), "Gloomy Galleon Lighthouse", ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.GalleonLighthouseToLighthouseArea: ShufflableExit("Gloomy Galleon Lighthouse to Main", Regions.Lighthouse, TransitionBack(Regions.LighthouseArea, "From Lighthouse", Transitions.GalleonLighthouseAreaToLighthouse), "Gloomy Galleon Main from Lightouse"),
    Transitions.GalleonLighthousAreaToMermaid: ShufflableExit("Gloomy Galleon Main to Mermaid", Regions.LighthouseArea, TransitionBack(Regions.MermaidRoom, "From Galleon Main", Transitions.GalleonMermaidToLighthouseArea), "Gloomy Galleon Mermaid", ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonMermaidToLighthouseArea: ShufflableExit("Gloomy Galleon Mermaid to Main", Regions.MermaidRoom, TransitionBack(Regions.LighthouseArea, "From Mermaid", Transitions.GalleonLighthousAreaToMermaid), "Gloomy Galleon Main from Mermaid"),
    Transitions.GalleonLighthouseAreaToSickBay: ShufflableExit("Gloomy Galleon Main to Seasick Ship", Regions.LighthouseArea, TransitionBack(Regions.SickBay, "From Galleon Main", Transitions.GalleonSickBayToLighthouseArea), "Gloomy Galleon Seasick Ship", ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.GalleonSickBayToLighthouseArea: ShufflableExit("Gloomy Galleon Seasick Ship to Main", Regions.SickBay, TransitionBack(Regions.LighthouseArea, "From Seasick Ship", Transitions.GalleonLighthouseAreaToSickBay), "Gloomy Galleon Main from Seasick Ship"),
    Transitions.GalleonShipyardToSeal: ShufflableExit("Gloomy Galleon Main to Seal Race", Regions.Shipyard, TransitionBack(Regions.SealRace, "From Galleon Main", Transitions.GalleonSealToShipyard), "Gloomy Galleon Seal Race", ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.GalleonSealToShipyard: ShufflableExit("Gloomy Galleon Seal Race to Main", Regions.SealRace, TransitionBack(Regions.Shipyard, "From Seal Race", Transitions.GalleonShipyardToSeal), "Gloomy Galleon Main from Seal Race"),
    Transitions.GalleonShipyardToSubmarine: ShufflableExit("Gloomy Galleon Main to Submarine", Regions.Shipyard, TransitionBack(Regions.Submarine, "From Galleon Main", Transitions.GalleonSubmarineToShipyard), "Gloomy Galleon Submarine", ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSubmarineToShipyard: ShufflableExit("Gloomy Galleon Submarine to Main", Regions.Submarine, TransitionBack(Regions.Shipyard, "From Submarine", Transitions.GalleonShipyardToSubmarine), "Gloomy Galleon Main from Submarine"),
    Transitions.GalleonShipyardToLanky: ShufflableExit("Gloomy Galleon Main to Lanky 2DSship", Regions.Shipyard, TransitionBack(Regions.LankyShip, "From Galleon (Lanky Entrance)", Transitions.GalleonLankyToShipyard), "Gloomy Galleon Lanky 2DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.GalleonLankyToShipyard: ShufflableExit("Gloomy Galleon Lanky 2DShip to Main", Regions.LankyShip, TransitionBack(Regions.Shipyard, "From Lanky 2DShip", Transitions.GalleonShipyardToLanky), "Gloomy Galleon Main from Lanky 2DShip"),
    Transitions.GalleonShipyardToTiny: ShufflableExit("Gloomy Galleon Main to Tiny 2DShip", Regions.Shipyard, TransitionBack(Regions.TinyShip, "From Galleon (Tiny Entrance)", Transitions.GalleonTinyToShipyard), "Gloomy Galleon Tiny 2DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.GalleonTinyToShipyard: ShufflableExit("Gloomy Galleon Tiny 2DShip to Main", Regions.TinyShip, TransitionBack(Regions.Shipyard, "From Tiny 2DShip", Transitions.GalleonShipyardToTiny), "Gloomy Galleon Main from Tiny 2DShip"),
    Transitions.GalleonShipyardToBongos: ShufflableExit("Gloomy Galleon Main to DK 5DShip", Regions.Shipyard, TransitionBack(Regions.BongosShip, "From Galleon (DK Entrance)", Transitions.GalleonBongosToShipyard), "Gloomy Galleon DK 5DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.GalleonBongosToShipyard: ShufflableExit("Gloomy Galleon DK 5DShip to Main", Regions.BongosShip, TransitionBack(Regions.Shipyard, "From Donkey 5DShip", Transitions.GalleonShipyardToBongos), "Gloomy Galleon Main from DK 5DShip"),
    Transitions.GalleonShipyardToGuitar: ShufflableExit("Gloomy Galleon Main to Diddy 5DShip", Regions.Shipyard, TransitionBack(Regions.GuitarShip, "From Galleon (Diddy Entrance)", Transitions.GalleonGuitarToShipyard), "Gloomy Galleon Diddy 5DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.GalleonGuitarToShipyard: ShufflableExit("Gloomy Galleon Diddy 5DShip to Main", Regions.GuitarShip, TransitionBack(Regions.Shipyard, "From Diddy 5DShip", Transitions.GalleonShipyardToGuitar), "Gloomy Galleon Main from Diddy 5DShip"),
    Transitions.GalleonShipyardToTrombone: ShufflableExit("Gloomy Galleon Main to Lanky 5DShip", Regions.Shipyard, TransitionBack(Regions.TromboneShip, "From Galleon (Lanky Entrance)", Transitions.GalleonTromboneToShipyard), "Gloomy Galleon Lanky 5DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.GalleonTromboneToShipyard: ShufflableExit("Gloomy Galleon Lanky 5DShip to Main", Regions.TromboneShip, TransitionBack(Regions.Shipyard, "From Lanky 5DShip", Transitions.GalleonShipyardToTrombone), "Gloomy Galleon Main from Lanky 5DShip"),
    Transitions.GalleonShipyardToSaxophone: ShufflableExit("Gloomy Galleon Main to Tiny 5DShip", Regions.Shipyard, TransitionBack(Regions.SaxophoneShip, "From Galleon (Tiny Entrance)", Transitions.GalleonSaxophoneToShipyard), "Gloomy Galleon Tiny 5DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSaxophoneToShipyard: ShufflableExit("Gloomy Galleon Tiny 5DShip to Main", Regions.SaxophoneShip, TransitionBack(Regions.Shipyard, "From Tiny 5DShip", Transitions.GalleonShipyardToSaxophone), "Gloomy Galleon Main from Tiny 5DShip"),
    Transitions.GalleonShipyardToTriangle: ShufflableExit("Gloomy Galleon Main to Chunky 5DShip", Regions.Shipyard, TransitionBack(Regions.TriangleShip, "From Galleon (Chunky Entrance)", Transitions.GalleonTriangleToShipyard), "Gloomy Galleon Chunky 5DShip", ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.GalleonTriangleToShipyard: ShufflableExit("Gloomy Galleon Chunky 5DShip to Main", Regions.TriangleShip, TransitionBack(Regions.Shipyard, "From Chunky 5DShip", Transitions.GalleonShipyardToTriangle), "Gloomy Galleon Main from Chunky 5DShip"),
    Transitions.GalleonTreasureToChest: ShufflableExit("Gloomy Galleon Main to Treasure Chest", Regions.TreasureRoom, TransitionBack(Regions.TinyChest, "From Galleon Main", Transitions.GalleonChestToTreasure), "Gloomy Galleon Treasure Chest", ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonChestToTreasure: ShufflableExit("Gloomy Galleon Treasure Chest to Main", Regions.TinyChest, TransitionBack(Regions.TreasureRoom, "From Treasure Chest", Transitions.GalleonTreasureToChest), "Gloomy Galleon Main from Treasure Chest"),
    # Transitions.GalleonMainToBBlast: ShufflableExit("Gloomy Galleon Main to Baboon Blast", Regions.LighthouseArea, TransitionBack(Regions.GalleonBaboonBlast, "From Galleon Main"), "Gloomy Galleon Baboon Blast", ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Fungi Forest Exits
    Transitions.ForestMainToCarts: ShufflableExit("Fungi Forest Main To Minecart", Regions.FungiForestStart, TransitionBack(Regions.ForestMinecarts, "From Fungi Main"), "Fungi Forest Minecart", ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestCartsToMain: ShufflableExit("Fungi Forest Minecart To Main", Regions.ForestMinecarts, TransitionBack(Regions.MillArea, "From Minecart"), "Fungi Forest Main from Minecart"),
    Transitions.ForestMainToLowerMushroom: ShufflableExit("Fungi Forest Main to Giant Mushroom (Lower)", Regions.GiantMushroomArea, TransitionBack(Regions.MushroomLower, "From Fungi (Low)", Transitions.ForestLowerMushroomToMain), "Fungi Forest Giant Mushroom (Lower) from Low door", ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToMain: ShufflableExit("Fungi Forest Giant Mushroom (Lower) to Main", Regions.MushroomLower, TransitionBack(Regions.GiantMushroomArea, "From G. Mush (Low)", Transitions.ForestMainToLowerMushroom), "Fungi Forest Main from Giant Mushroom (Bottom)", ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToLowerMushroom: ShufflableExit("Fungi Forest Main to Giant Mushroom (Middle Low)", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, "From Fungi (Low Middle)", Transitions.ForestLowerMushroomToLowerExterior), "Fungi Forest Giant Mushroom (Middle Low)", ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToLowerExterior: ShufflableExit("Fungi Forest Giant Mushroom (Middle Low) to Main", Regions.MushroomLower, TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Low Middle)", Transitions.ForestLowerExteriorToLowerMushroom), "Fungi Forest Main from Giant Mushroom (Middle low)", ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToUpperMushroom: ShufflableExit("Fungi Forest Main to Giant Mushroom (Middle High)", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, "From Fungi (Middle)", Transitions.ForestUpperMushroomToLowerExterior), "Fungi Forest Giant Mushroom (Middle High)", ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToLowerExterior: ShufflableExit("Fungi Forest Giant Mushroom (Middle High) to Main", Regions.MushroomUpper, TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Middle)", Transitions.ForestLowerExteriorToUpperMushroom), "Fungi Forest Main from Giant Mushroom (Middle high)", ExitCategories.ForestMushroom),
    Transitions.ForestUpperExteriorToUpperMushroom: ShufflableExit("Fungi Forest Main to Giant Mushroom (Top)", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomUpper, "From Fungi (High)", Transitions.ForestUpperMushroomToUpperExterior), "Fungi Forest Giant Mushroom (Top)", ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToUpperExterior: ShufflableExit("Fungi Forest Giant Mushroom (Top) to Main", Regions.MushroomUpper, TransitionBack(Regions.MushroomUpperExterior, "From G. Mush (High)", Transitions.ForestUpperExteriorToUpperMushroom), "Fungi Forest Main from Giant Mushroom (Top)", ExitCategories.ForestMushroom),
    # Transitions.ForestMainToBBlast: ShufflableExit("Fungi Forest Main to Baboon Blast", Regions.MushroomLowerExterior, TransitionBack(Regions.ForestBaboonBlast, "From Fungi Main"), "Fungi Forest Baboon Blast", ExitCategories.ForestExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.ForestExteriorToNight: ShufflableExit("Fungi Forest Main to Giant Mushroom (Night Door)", Regions.MushroomNightExterior, TransitionBack(Regions.MushroomNightDoor, "From Fungi (High Middle)", Transitions.ForestNightToExterior), "Fungi Forest Giant Mushroom from Night door", ExitCategories.ForestExterior),
    Transitions.ForestNightToExterior: ShufflableExit("Fungi Forest Giant Mushroom (Night Door) to Main", Regions.MushroomNightDoor, TransitionBack(Regions.MushroomNightExterior, "From G. Mush (High Middle)", Transitions.ForestExteriorToNight), "Fungi Forest Main from Giant Mushroom (Night door)", ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToChunky: ShufflableExit("Fungi Forest Main to Face Puzzle (Chunky)", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomChunkyRoom, "From Fungi Main", Transitions.ForestChunkyToExterior), "Fungi Forest Face Puzzle (Chunky)", ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestChunkyToExterior: ShufflableExit("Fungi Forest Face Puzzle (Chunky) to Main", Regions.MushroomChunkyRoom, TransitionBack(Regions.MushroomUpperExterior, "From Face Puzzle (Chunky)", Transitions.ForestExteriorToChunky), "Fungi Forest Main from Face Puzzle (Chunky)"),
    Transitions.ForestExteriorToZingers: ShufflableExit("Fungi Forest Main to Bouncy Shrooms (Lanky)", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyZingersRoom, "From Fungi Main", Transitions.ForestZingersToExterior), "Fungi Forest Bouncy Shrooms (Lanky)", ExitCategories.ForestExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.ForestZingersToExterior: ShufflableExit("Fungi Forest Bouncy Shrooms (Lanky) to Main", Regions.MushroomLankyZingersRoom, TransitionBack(Regions.MushroomUpperExterior, "From Zingers Room (Lanky)", Transitions.ForestExteriorToZingers), "Fungi Forest Main from Bouncy Shrooms (Lanky)"),
    Transitions.ForestExteriorToMushrooms: ShufflableExit("Fungi Forest Main to Mushroom Puzzle (Lanky)", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyMushroomsRoom, "From Fungi Main", Transitions.ForestMushroomsToExterior), "Fungi Forest Mushroom Puzzle (Lanky)", ExitCategories.ForestExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.ForestMushroomsToExterior: ShufflableExit("Fungi Forest Mushroom Puzzle (Lanky) to Main", Regions.MushroomLankyMushroomsRoom, TransitionBack(Regions.MushroomUpperExterior, "From Mushrooms Room (Lanky)", Transitions.ForestExteriorToMushrooms), "Fungi Forest Main from Mushroom Puzzle (Lanky)"),
    Transitions.ForestTreeToAnthill: ShufflableExit("Fungi Forest Main to Anthill", Regions.HollowTreeArea, TransitionBack(Regions.Anthill, "From Fungi Main", Transitions.ForestAnthillToTree), "Fungi Forest Anthill", ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestAnthillToTree: ShufflableExit("Fungi Forest Anthill to Main", Regions.Anthill, TransitionBack(Regions.HollowTreeArea, "From Anthill", Transitions.ForestTreeToAnthill), "Fungi Forest Main from Anthill"),
    Transitions.ForestMainToChunkyMill: ShufflableExit("Fungi Forest Main to Mill Back Door", Regions.MillArea, TransitionBack(Regions.MillChunkyArea, "From Fungi (PPunch Door)", Transitions.ForestChunkyMillToMain), "Fungi Forest Back Mill from Back Door", ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.ForestChunkyMillToMain: ShufflableExit("Fungi Forest Mill Back Door to Main", Regions.MillChunkyArea, TransitionBack(Regions.MillArea, "From Mill (PPunch Door)", Transitions.ForestMainToChunkyMill), "Fungi Forest Main from Mill (Back Door)", ExitCategories.ForestMill, entryKongs={Kongs.chunky}),
    Transitions.ForestMainToTinyMill: ShufflableExit("Fungi Forest Main to Mill Tiny Hole", Regions.MillArea, TransitionBack(Regions.MillTinyArea, "From Fungi (Tiny Hole)", Transitions.ForestTinyMillToMain), "Fungi Forest Back Mill from Tiny Hole", ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestTinyMillToMain: ShufflableExit("Fungi Forest Mill Tiny Hole to Main", Regions.MillTinyArea, TransitionBack(Regions.MillArea, "From Mill (Tiny Hole)", Transitions.ForestMainToTinyMill), "Fungi Forest Main from Mill (Tiny Hole)", ExitCategories.ForestMill, entryKongs={Kongs.tiny}),
    Transitions.ForestMainToGrinder: ShufflableExit("Fungi Forest Main to Mill Front Door", Regions.MillArea, TransitionBack(Regions.GrinderRoom, "From Fungi (Front)", Transitions.ForestGrinderToMain), "Fungi Forest Front Mill from Main", ExitCategories.ForestExterior),
    Transitions.ForestGrinderToMain: ShufflableExit("Fungi Forest Mill Front Door to Main", Regions.GrinderRoom, TransitionBack(Regions.MillArea, "From Mill (Front)", Transitions.ForestMainToGrinder), "Fungi Forest Main from Mill (Front)", ExitCategories.ForestGrinder),
    Transitions.ForestMainToRafters: ShufflableExit("Fungi Forest Main to Dark Rafters", Regions.MillArea, TransitionBack(Regions.MillRafters, "From Fungi Main", Transitions.ForestRaftersToMain), "Fungi Forest Dark Rafters", ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.ForestRaftersToMain: ShufflableExit("Fungi Forest Dark Rafters to Main", Regions.MillRafters, TransitionBack(Regions.MillArea, "From Rafters", Transitions.ForestMainToRafters), "Fungi Forest Main from Dark Rafters"),
    Transitions.ForestMainToWinch: ShufflableExit("Fungi Forest Main to Winch Room", Regions.MillArea, TransitionBack(Regions.WinchRoom, "From Fungi Main", Transitions.ForestWinchToMain), "Fungi Forest Winch Room", ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}),
    Transitions.ForestWinchToMain: ShufflableExit("Fungi Forest Winch Room to Main", Regions.WinchRoom, TransitionBack(Regions.MillArea, "From Winch", Transitions.ForestMainToWinch), "Fungi Forest Main from Winch Room"),
    Transitions.ForestMainToAttic: ShufflableExit("Fungi Forest Main to Mill Attic (Lanky)", Regions.MillArea, TransitionBack(Regions.MillAttic, "From Fungi Main", Transitions.ForestAtticToMain), "Fungi Forest Mill Attic (Lanky)", ExitCategories.ForestExterior, regionKongs={Kongs.lanky}),
    Transitions.ForestAtticToMain: ShufflableExit("Fungi Forest Mill Attic (Lanky) to Main", Regions.MillAttic, TransitionBack(Regions.MillArea, "From Mill Attic", Transitions.ForestMainToAttic), "Fungi Forest Main from Mill Attic (Lanky)"),
    Transitions.ForestTinyMillToSpider: ShufflableExit("Fungi Forest Back Mill to Spider", Regions.MillTinyArea, TransitionBack(Regions.SpiderRoom, "From Mill (Rear)", Transitions.ForestSpiderToTinyMill), "Fungi Forest Spider", ExitCategories.ForestMill, regionKongs={Kongs.tiny}),
    Transitions.ForestSpiderToTinyMill: ShufflableExit("Fungi Forest Spider to Back Mill", Regions.SpiderRoom, TransitionBack(Regions.MillTinyArea, "From Spider Boss", Transitions.ForestTinyMillToSpider), "Fungi Forest Back Mill from Spider", regionKongs={Kongs.tiny}),
    Transitions.ForestTinyMillToGrinder: ShufflableExit("Fungi Forest Back Mill to Front Mill", Regions.MillTinyArea, TransitionBack(Regions.GrinderRoom, "From Mill (Rear)", Transitions.ForestGrinderToTinyMill), "Fungi Forest Front Mill from Back Mill", ExitCategories.ForestMill, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestGrinderToTinyMill: ShufflableExit("Fungi Forest Front Mill to Back Mill", Regions.GrinderRoom, TransitionBack(Regions.MillTinyArea, "From Mill (Front)", Transitions.ForestTinyMillToGrinder), "Fungi Forest Back Mill from Front Mill", ExitCategories.ForestGrinder, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestMainToBarn: ShufflableExit("Fungi Forest Main to Thornvine Barn", Regions.ThornvineArea, TransitionBack(Regions.ThornvineBarn, "From Fungi Main", Transitions.ForestBarnToMain), "Fungi Forest Thornvine Barn", ExitCategories.ForestExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.ForestBarnToMain: ShufflableExit("Fungi Forest Thornvine Barn to Main", Regions.ThornvineBarn, TransitionBack(Regions.ThornvineArea, "From Thornvine Barn", Transitions.ForestMainToBarn), "Fungi Forest Main from Thornvine Barn"),

    # Crystal Caves Exits
    Transitions.CavesMainToRace: ShufflableExit("Crystal Caves Main to Beetle Race", Regions.CrystalCavesMain, TransitionBack(Regions.CavesLankyRace, "From Caves Main", Transitions.CavesRaceToMain), "Crystal Caves Beetle Race", ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesRaceToMain: ShufflableExit("Crystal Caves Beetle Race to Main", Regions.CavesLankyRace, TransitionBack(Regions.CrystalCavesMain, "From Beetle Race", Transitions.CavesMainToRace), "Crystal Caves Main from Beetle Race"),
    Transitions.CavesMainToCastle: ShufflableExit("Crystal Caves Main to Ice Castle", Regions.CrystalCavesMain, TransitionBack(Regions.FrozenCastle, "From Caves Main", Transitions.CavesCastleToMain), "Crystal Caves Ice Castle", ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CavesCastleToMain: ShufflableExit("Crystal Caves Ice Castle to Main", Regions.FrozenCastle, TransitionBack(Regions.CrystalCavesMain, "From Tile Flipping", Transitions.CavesMainToCastle), "Crystal Caves Main from Ice Castle"),
    Transitions.CavesIglooToDonkey: ShufflableExit("Crystal Caves Main to DK 5DIgloo", Regions.IglooArea, TransitionBack(Regions.DonkeyIgloo, "From Caves Main", Transitions.CavesDonkeyToIgloo), "Crystal Caves DK 5DIgloo", ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToIgloo: ShufflableExit("Crystal Caves DK 5DIgloo to Main", Regions.DonkeyIgloo, TransitionBack(Regions.IglooArea, "From DK 5DIgloo", Transitions.CavesIglooToDonkey), "Crystal Caves Main from DK5DIgloo"),
    Transitions.CavesIglooToDiddy: ShufflableExit("Crystal Caves Main to Diddy 5DIgloo", Regions.IglooArea, TransitionBack(Regions.DiddyIgloo, "From Caves Main", Transitions.CavesDiddyToIgloo), "Crystal Caves Diddy 5DIgloo", ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyToIgloo: ShufflableExit("Crystal Caves Diddy 5DIgloo to Main", Regions.DiddyIgloo, TransitionBack(Regions.IglooArea, "From Diddy 5DIgloo", Transitions.CavesIglooToDiddy), "Crystal Caves Main from Diddy 5DIgloo"),
    Transitions.CavesIglooToLanky: ShufflableExit("Crystal Caves Main to Lanky 5DIgloo", Regions.IglooArea, TransitionBack(Regions.LankyIgloo, "From Caves Main", Transitions.CavesLankyToIgloo), "Crystal Caves Lanky 5DIgloo", ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToIgloo: ShufflableExit("Crystal Caves Lanky 5DIgloo to Main", Regions.LankyIgloo, TransitionBack(Regions.IglooArea, "From Lanky 5DIgloo", Transitions.CavesIglooToLanky), "Crystal Caves Main from Lanky 5DIgloo"),
    Transitions.CavesIglooToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DIgloo", Regions.IglooArea, TransitionBack(Regions.TinyIgloo, "From Caves Main", Transitions.CavesTinyToIgloo), "Crystal Caves Tiny 5DIgloo", ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToIgloo: ShufflableExit("Crystal Caves Tiny 5DIgloo to Main", Regions.TinyIgloo, TransitionBack(Regions.IglooArea, "From Tiny 5DIgloo", Transitions.CavesIglooToTiny), "Crystal Caves Main from Tiny 5DIgloor"),
    Transitions.CavesIglooToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DIgloo", Regions.IglooArea, TransitionBack(Regions.ChunkyIgloo, "From Caves Main", Transitions.CavesChunkyToIgloo), "Crystal Caves Chunky 5DIgloo", ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToIgloo: ShufflableExit("Crystal Caves Chunky 5DIgloo to Main", Regions.ChunkyIgloo, TransitionBack(Regions.IglooArea, "From Chunky 5DIgloo", Transitions.CavesIglooToChunky), "Crystal Caves Main from Chunky 5DIgloo"),
    Transitions.CavesCabinToRotating: ShufflableExit("Crystal Caves Main to Rotating Room", Regions.CabinArea, TransitionBack(Regions.RotatingCabin, "From Caves Main", Transitions.CavesRotatingToCabin), "Crystal Caves Rotating Room", ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesRotatingToCabin: ShufflableExit("Crystal Caves Rotating Room to Main", Regions.RotatingCabin, TransitionBack(Regions.CabinArea, "From Rotating Cabin", Transitions.CavesCabinToRotating), "Crystal Caves Main from Rotating Room"),
    Transitions.CavesCabinToDonkey: ShufflableExit("Crystal Caves Main to DK 5DCabin", Regions.CabinArea, TransitionBack(Regions.DonkeyCabin, "From Caves Main", Transitions.CavesDonkeyToCabin), "Crystal Caves DK 5DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToCabin: ShufflableExit("Crystal Caves DK 5DCabin to Main", Regions.DonkeyCabin, TransitionBack(Regions.CabinArea, "From DK 5DCabin", Transitions.CavesCabinToDonkey), "Crystal Caves Main from DK 5DCabin"),
    Transitions.CavesCabinToDiddyLower: ShufflableExit("Crystal Caves Main to Diddy Lower 5DCabin", Regions.CabinArea, TransitionBack(Regions.DiddyLowerCabin, "From Caves Main", Transitions.CavesDiddyLowerToCabin), "Crystal Caves Diddy Lower 5DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyLowerToCabin: ShufflableExit("Crystal Caves Diddy Lower 5DCabin to Main", Regions.DiddyLowerCabin, TransitionBack(Regions.CabinArea, "From Diddy Lower 5DCabin", Transitions.CavesCabinToDiddyLower), "Crystal Caves Main from Diddy Lower 5DCabin"),
    Transitions.CavesCabinToDiddyUpper: ShufflableExit("Crystal Caves Main to Diddy Upper 5DCabin", Regions.CabinArea, TransitionBack(Regions.DiddyUpperCabin, "From Caves Main", Transitions.CavesDiddyUpperToCabin), "Crystal Caves Diddy Upper 5DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyUpperToCabin: ShufflableExit("Crystal Caves Diddy Upper 5DCabin to Main", Regions.DiddyUpperCabin, TransitionBack(Regions.CabinArea, "From Diddy Upper 5DCabin", Transitions.CavesCabinToDiddyUpper), "Crystal Caves Main from Diddy Upper 5DCabin"),
    Transitions.CavesCabinToLanky: ShufflableExit("Crystal Caves Main to Lanky 1DCabin", Regions.CabinArea, TransitionBack(Regions.LankyCabin, "From Caves Main", Transitions.CavesLankyToCabin), "Crystal Caves Lanky 1DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToCabin: ShufflableExit("Crystal Caves Lanky 1DCabin to Main", Regions.LankyCabin, TransitionBack(Regions.CabinArea, "From Lanky Cabin", Transitions.CavesCabinToLanky), "Crystal Caves Main from Lanky 1DCabin"),
    Transitions.CavesCabinToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DCabin", Regions.CabinArea, TransitionBack(Regions.TinyCabin, "From Caves Main", Transitions.CavesTinyToCabin), "Crystal Caves Tiny 5DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToCabin: ShufflableExit("Crystal Caves Tiny 5DCabin to Main", Regions.TinyCabin, TransitionBack(Regions.CabinArea, "From Tiny 5DCabin", Transitions.CavesCabinToTiny), "Crystal Caves Main from Tiny 5DCabin"),
    Transitions.CavesCabinToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DCabin", Regions.CabinArea, TransitionBack(Regions.ChunkyCabin, "From Caves Main", Transitions.CavesChunkyToCabin), "Crystal Caves Chunky 5DCabin", ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToCabin: ShufflableExit("Crystal Caves Chunky 5DCabin to Main", Regions.ChunkyCabin, TransitionBack(Regions.CabinArea, "From Chunky 5DCabin", Transitions.CavesCabinToChunky), "Crystal Caves Main from Chunky 5DCabin"),
    # Transitions.CavesMainToBBlast: ShufflableExit("Crystal Caves Main to Baboon Blast", Regions.CrystalCavesMain, TransitionBack(Regions.CavesBaboonBlast, "From Caves Main"), "Crystal Caves Baboon Blast", ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Creepy Castle Exits
    # Transitions.CastleMainToBBlast: ShufflableExit("Creepy Castle Main to Baboon Blast", Regions.CreepyCastleMain, TransitionBack(Regions.CastleBaboonBlast, "From Castle Main"), "Creepy Castle Baboon Blast", ExitCategories.CastleExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CastleMainToTree: ShufflableExit("Creepy Castle Main to Tree", Regions.CreepyCastleMain, TransitionBack(Regions.CastleTree, "From Castle Main", Transitions.CastleTreeToMain), "Creepy Castle Tree (Entrance)", ExitCategories.CastleExterior, regionKongs={Kongs.donkey, Kongs.chunky}),
    Transitions.CastleTreeToMain: ShufflableExit("Creepy Castle Tree to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, "From Tree (Entrance)", Transitions.CastleMainToTree), "Creepy Castle Main from Tree (Entrance)"),
    Transitions.CastleTreeDrainToMain: ShufflableExit("Creepy Castle Tree Drain to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, "From Tree (Drain)"), "Creepy Castle Main from Tree (Drain)", entryKongs={Kongs.donkey}),
    Transitions.CastleMainToLibraryStart: ShufflableExit("Creepy Castle Main to Library (Entrance)", Regions.CreepyCastleMain, TransitionBack(Regions.Library, "From Castle Main (Start)", Transitions.CastleLibraryStartToMain), "Creepy Castle Library (Entrance)", ExitCategories.CastleExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.CastleLibraryStartToMain: ShufflableExit("Creepy Castle Library (Entrance) to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, "From Library (Start)", Transitions.CastleMainToLibraryStart), "Creepy Castle Main from Library (Entrance)"),
    Transitions.CastleMainToLibraryEnd: ShufflableExit("Creepy Castle Main to Library (Exit)", Regions.CreepyCastleMain, TransitionBack(Regions.Library, "From Castle Main (End)"), "Creepy Castle Library (Exit)", ExitCategories.CastleExterior),
    Transitions.CastleLibraryEndToMain: ShufflableExit("Creepy Castle Library (Exit) to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, "From Library (End)"), "Creepy Castle Main from Library (Exit)", entryKongs={Kongs.donkey}),
    Transitions.CastleMainToBallroom: ShufflableExit("Creepy Castle Main to Ballroom", Regions.CreepyCastleMain, TransitionBack(Regions.Ballroom, "From Castle Main", Transitions.CastleBallroomToMain), "Creepy Castle Ballroom (Entrance)", ExitCategories.CastleExterior, regionKongs={Kongs.diddy, Kongs.tiny}),
    Transitions.CastleBallroomToMain: ShufflableExit("Creepy Castle Ballroom to Main", Regions.Ballroom, TransitionBack(Regions.CreepyCastleMain, "From Ballroom", Transitions.CastleMainToBallroom), "Creepy Castle Main from Ballroom", ExitCategories.CastleBallroom),
    Transitions.CastleMainToTower: ShufflableExit("Creepy Castle Main to Tower", Regions.CreepyCastleMain, TransitionBack(Regions.Tower, "From Castle Main", Transitions.CastleTowerToMain), "Creepy Castle Tower", ExitCategories.CastleExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CastleTowerToMain: ShufflableExit("Creepy Castle Tower to Main", Regions.Tower, TransitionBack(Regions.CreepyCastleMain, "From Tower", Transitions.CastleMainToTower), "Creepy Castle Main from Tower"),
    Transitions.CastleMainToGreenhouse: ShufflableExit("Creepy Castle Main to Greenhouse", Regions.CreepyCastleMain, TransitionBack(Regions.Greenhouse, "From Castle Main", Transitions.CastleGreenhouseStartToMain), "Creepy Castle Greenhouse (Entrance)", ExitCategories.CastleExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CastleGreenhouseStartToMain: ShufflableExit("Creepy Castle Greenhouse (Entrance) to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (Start)", Transitions.CastleMainToGreenhouse), "Creepy Castle Main from Greenhouse (Entrance)"),
    Transitions.CastleGreenhouseEndToMain: ShufflableExit("Creepy Castle Greenhouse (Exit) to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (End)"), "Creepy Castle Main from Greenhouse (Exit)", entryKongs={Kongs.lanky}),
    Transitions.CastleMainToTrash: ShufflableExit("Creepy Castle Main to Trash Can", Regions.CreepyCastleMain, TransitionBack(Regions.TrashCan, "From Castle Main", Transitions.CastleTrashToMain), "Creepy Castle Trash Can", ExitCategories.CastleExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CastleTrashToMain: ShufflableExit("Creepy Castle Trash Can to Main", Regions.TrashCan, TransitionBack(Regions.CreepyCastleMain, "From Trash Can", Transitions.CastleMainToTrash), "Creepy Castle Main from Trash Can"),
    Transitions.CastleMainToShed: ShufflableExit("Creepy Castle Main to Shed", Regions.CreepyCastleMain, TransitionBack(Regions.Shed, "From Castle Main", Transitions.CastleShedToMain), "Creepy Castle Shed", ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CastleShedToMain: ShufflableExit("Creepy Castle Shed to Main", Regions.Shed, TransitionBack(Regions.CreepyCastleMain, "From Shed", Transitions.CastleMainToShed), "Creepy Castle Main from Shed"),
    Transitions.CastleMainToMuseum: ShufflableExit("Creepy Castle Main to Museum", Regions.CreepyCastleMain, TransitionBack(Regions.Museum, "From Castle Main", Transitions.CastleMuseumToMain), "Creepy Castle Museum (Entrance)", ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.CastleMuseumToMain: ShufflableExit("Creepy Castle Museum to Main", Regions.Museum, TransitionBack(Regions.CreepyCastleMain, "From Museum", Transitions.CastleMainToMuseum), "Creepy Castle Main from Museum"),
    Transitions.CastleMainToLower: ShufflableExit("Creepy Castle Main to Lower Cave", Regions.CreepyCastleMain, TransitionBack(Regions.LowerCave, "From Castle Main", Transitions.CastleLowerToMain), "Creepy Castle Lower Cave from Main", ExitCategories.CastleExterior),
    Transitions.CastleLowerToMain: ShufflableExit("Creepy Castle Lower Cave to Main", Regions.LowerCave, TransitionBack(Regions.CreepyCastleMain, "From Lower Cave", Transitions.CastleMainToLower), "Creepy Castle Main from Lower Cave", ExitCategories.CastleLower),
    Transitions.CastleMainToUpper: ShufflableExit("Creepy Castle Main to Upper Cave (Back door)", Regions.CreepyCastleMain, TransitionBack(Regions.UpperCave, "From Castle (Rear)", Transitions.CastleUpperToMain), "Creepy Castle Upper Cave from Main (Back door)", ExitCategories.CastleExterior),
    Transitions.CastleUpperToMain: ShufflableExit("Creepy Castle Upper Cave to Main (Back door)", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Rear)", Transitions.CastleMainToUpper), "Creepy Castle Main from Upper Cave (Back door)", ExitCategories.CastleUpper),
    Transitions.CastleWaterfallToUpper: ShufflableExit("Creepy Castle Main to Upper Cave (Moat door)", Regions.CastleWaterfall, TransitionBack(Regions.UpperCave, "From Castle (Front)", Transitions.CastleUpperToWaterfall), "Creepy Castle Upper Cave from Main (Moat door)", ExitCategories.CastleExterior),
    Transitions.CastleUpperToWaterfall: ShufflableExit("Creepy Castle Upper Cave to Main (Moat door)", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Front)", Transitions.CastleWaterfallToUpper), "Creepy Castle Main from Upper Cave (Moat door)", ExitCategories.CastleUpper),
    Transitions.CastleBallroomToMuseum: ShufflableExit("Creepy Castle Ballroom to Museum", Regions.Ballroom, TransitionBack(Regions.MuseumBehindGlass, "From Ballroom (Monkeyport)", Transitions.CastleMuseumToBallroom), "Creepy Castle Museum (Monkeyport)", ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleMuseumToBallroom: ShufflableExit("Creepy Castle Museum to Ballroom", Regions.MuseumBehindGlass, TransitionBack(Regions.Ballroom, "From Museum (Monkeyport)", Transitions.CastleBallroomToMuseum), "Creepy Castle Ballroom (Monkeyport)", ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleMuseumToCarRace: ShufflableExit("Creepy Castle Museum to Car Race", Regions.MuseumBehindGlass, TransitionBack(Regions.CastleTinyRace, "From Museum", Transitions.CastleRaceToMuseum), "Creepy Castle Car Race", ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleRaceToMuseum: ShufflableExit("Creepy Castle Car Race to Museum", Regions.CastleTinyRace, TransitionBack(Regions.MuseumBehindGlass, "From Car Race", Transitions.CastleMuseumToCarRace), "Creepy Castle Museum from Car Race", regionKongs={Kongs.tiny}),
    Transitions.CastleLowerToCrypt: ShufflableExit("Creepy Castle Lower Cave to Crypt", Regions.LowerCave, TransitionBack(Regions.Crypt, "From Lower Cave", Transitions.CastleCryptToLower), "Creepy Castle Crypt (Entrance)", ExitCategories.CastleLower, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}, regionKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleCryptToLower: ShufflableExit("Creepy Castle Crypt to Lower Cave", Regions.Crypt, TransitionBack(Regions.LowerCave, "From Crypt (DK/Diddy/Chunky)", Transitions.CastleLowerToCrypt), "Creepy Castle Lower Cave from Crypt", ExitCategories.CastleCrypt),
    Transitions.CastleLowerToMausoleum: ShufflableExit("Creepy Castle Lower Cave to Mausoleum", Regions.LowerCave, TransitionBack(Regions.Mausoleum, "From Lower Cave", Transitions.CastleMausoleumToLower), "Creepy Castle Mausoleum", ExitCategories.CastleLower, entryKongs={Kongs.lanky, Kongs.tiny}, regionKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleMausoleumToLower: ShufflableExit("Creepy Castle Mausoleum to Lower cave", Regions.Mausoleum, TransitionBack(Regions.LowerCave, "From Mausoleum (Lanky/Tiny)", Transitions.CastleLowerToMausoleum), "Creepy Castle Lower Cave from Mausoleum"),
    Transitions.CastleCryptToCarts: ShufflableExit("Creepy Castle Crypt to Minecart", Regions.Crypt, TransitionBack(Regions.CastleMinecarts, "From Crypt", Transitions.CastleCartsToCrypt), "Creepy Castle Minecart", ExitCategories.CastleCrypt, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.CastleCartsToCrypt: ShufflableExit("Creepy Castle Minecart to Crypt", Regions.CastleMinecarts, TransitionBack(Regions.Crypt, "From Minecart", Transitions.CastleCryptToCarts), "Creepy Castle Crypt from Minecart"),
    Transitions.CastleUpperToDungeon: ShufflableExit("Creepy Castle Upper Cave to Dungeon", Regions.UpperCave, TransitionBack(Regions.Dungeon, "From Tunnel", Transitions.CastleDungeonToUpper), "Creepy Castle Dungeon", ExitCategories.CastleUpper),
    Transitions.CastleDungeonToUpper: ShufflableExit("Creepy Castle Dungeon to Upper Cave", Regions.Dungeon, TransitionBack(Regions.UpperCave, "From Dungeon", Transitions.CastleUpperToDungeon), "Creepy Castle Upper Cave from Dungeon"),
}
