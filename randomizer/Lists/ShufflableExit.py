# fmt: off
"""Shufflable exit class and list file."""

from randomizer.Enums.ExitCategories import ExitCategories
from randomizer.Enums.TransitionFronts import TransitionFronts
from randomizer.Enums.Regions import Regions
from randomizer.Enums.Kongs import Kongs


class ShufflableExit:
    """Class that stores data about an exit to be shuffled."""

    def __init__(self, name, region, originalDest, category=None, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.lanky, Kongs.tiny, Kongs.chunky}, regionKongs={}, move=False):
        """Initialize with given parameters."""
        self.name = name
        self.region = region
        self.originalDest = originalDest
        self.category = category
        self.entryKongs = entryKongs  # Indicates either need to be one of a certain set of kongs to gain access to this (front)
        self.regionKongs = regionKongs  # Indicates need to be a certain kong or kongs in this area. Should only apply if the region doesn't have a tag barrel
        self.move = move  # Indicates this exit needs a kong-specific move to access, so it's even more restrictive
        # Here dest is the entrance to go to, rather than just the target region
        # Initialized as its original value
        self.dest = originalDest
        self.shuffled = False
        self.toBeShuffled = False


ShufflableExits = {
    # Level Exits
    TransitionFronts.IslesToJapes: ShufflableExit("DK Isles to Jungle Japes", Regions.JungleJapesLobby, TransitionFronts.JapesToIsles, ExitCategories.JapesLobby),
    TransitionFronts.JapesToIsles: ShufflableExit("Jungle Japes to DK Isles", Regions.JungleJapesMain, TransitionFronts.IslesToJapes, ExitCategories.JapesExterior),
    TransitionFronts.IslesToAztec: ShufflableExit("DK Isles to Angry Aztec", Regions.AngryAztecLobby, TransitionFronts.AztecToIsles, ExitCategories.AztecLobby),
    TransitionFronts.AztecToIsles: ShufflableExit("Angry Aztec to DK Isles", Regions.AngryAztecStart, TransitionFronts.IslesToAztec, ExitCategories.AztecExterior),
    TransitionFronts.IslesToFactory: ShufflableExit("DK Isles to Frantic Factory", Regions.FranticFactoryLobby, TransitionFronts.FactoryToIsles, ExitCategories.FactoryLobby),
    TransitionFronts.FactoryToIsles: ShufflableExit("Frantic Factory to DK Isles", Regions.FranticFactoryStart, TransitionFronts.IslesToFactory, ExitCategories.FactoryExterior),
    TransitionFronts.IslesToGalleon: ShufflableExit("DK Isles to Gloomy Galleon", Regions.GloomyGalleonLobby, TransitionFronts.GalleonToIsles, ExitCategories.GalleonLobby),
    TransitionFronts.GalleonToIsles: ShufflableExit("Gloomy Galleon to DK Isles", Regions.GloomyGalleonStart, TransitionFronts.IslesToGalleon, ExitCategories.GalleonExterior),
    TransitionFronts.IslesToForest: ShufflableExit("DK Isles to Fungi Forest", Regions.FungiForestLobby, TransitionFronts.ForestToIsles, ExitCategories.ForestLobby),
    TransitionFronts.ForestToIsles: ShufflableExit("Fungi Forest to DK Isles", Regions.FungiForestStart, TransitionFronts.IslesToForest, ExitCategories.ForestExterior),
    TransitionFronts.IslesToCaves: ShufflableExit("DK Isles to Crystal Caves", Regions.CrystalCavesLobby, TransitionFronts.CavesToIsles, ExitCategories.CavesLobby),
    TransitionFronts.CavesToIsles: ShufflableExit("Crystal Caves to DK Isles", Regions.CrystalCavesMain, TransitionFronts.IslesToCaves, ExitCategories.CavesExterior),
    TransitionFronts.IslesToCastle: ShufflableExit("DK Isles to Creepy Castle", Regions.CreepyCastleLobby, TransitionFronts.CastleToIsles, ExitCategories.CastleLobby),
    TransitionFronts.CastleToIsles: ShufflableExit("Creepy Castle to DK Isles", Regions.CreepyCastleMain, TransitionFronts.IslesToCastle, ExitCategories.CastleExterior),
    # DK Isles Exits
    TransitionFronts.IslesMainToFairy: ShufflableExit("DK Isles Main to Banana Fairy Queen", Regions.IslesMain, TransitionFronts.IslesFairyToMain, ExitCategories.IslesExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.IslesFairyToMain: ShufflableExit("DK Isles Banana Fairy Queen to Main", Regions.BananaFairyRoom, TransitionFronts.IslesMainToFairy, regionKongs={Kongs.tiny}),
    TransitionFronts.IslesMainToSnideRoom: ShufflableExit("DK Isles Crocodile Isle to Snide Room", Regions.CrocodileIsleBeyondLift, TransitionFronts.IslesSnideRoomToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesSnideRoomToMain: ShufflableExit("DK Isles Snide Room to Crocodile Isle", Regions.IslesSnideRoom, TransitionFronts.IslesMainToSnideRoom),
    TransitionFronts.IslesMainToJapesLobby: ShufflableExit("DK Isles Main to Jungle Japes Lobby", Regions.IslesMain, TransitionFronts.IslesJapesLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesJapesLobbyToMain: ShufflableExit("DK Isles Jungle Japes Lobby to Main", Regions.JungleJapesLobby, TransitionFronts.IslesMainToJapesLobby, ExitCategories.JapesLobby),
    TransitionFronts.IslesMainToAztecLobby: ShufflableExit("DK Isles Main to Angry Aztec Lobby", Regions.IslesMain, TransitionFronts.IslesAztecLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesAztecLobbyToMain: ShufflableExit("DK Isles Angry Aztec Lobby to Main", Regions.AngryAztecLobby, TransitionFronts.IslesMainToAztecLobby, ExitCategories.AztecLobby),
    TransitionFronts.IslesMainToFactoryLobby: ShufflableExit("DK Isles Main to Frantic Factory Lobby", Regions.CrocodileIsleBeyondLift, TransitionFronts.IslesFactoryLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesFactoryLobbyToMain: ShufflableExit("DK Isles Frantic Factory Lobby to Main", Regions.FranticFactoryLobby, TransitionFronts.IslesMainToFactoryLobby, ExitCategories.FactoryLobby),
    TransitionFronts.IslesMainToGalleonLobby: ShufflableExit("DK Isles Main to Gloomy Galleon Lobby", Regions.IslesMain, TransitionFronts.IslesGalleonLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesGalleonLobbyToMain: ShufflableExit("DK Isles Gloomy Galleon Lobby to Main", Regions.GloomyGalleonLobby, TransitionFronts.IslesMainToGalleonLobby, ExitCategories.GalleonLobby),
    TransitionFronts.IslesMainToForestLobby: ShufflableExit("DK Isles Cabin Isle to Fungi Forest Lobby", Regions.CabinIsle, TransitionFronts.IslesForestLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesForestLobbyToMain: ShufflableExit("DK Isles Fungi Forest Lobby to Cabin Isle", Regions.FungiForestLobby, TransitionFronts.IslesMainToForestLobby, ExitCategories.ForestLobby),
    TransitionFronts.IslesMainToCavesLobby: ShufflableExit("DK Isles Main to Crystal Caves Lobby", Regions.IslesMain, TransitionFronts.IslesCavesLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesCavesLobbyToMain: ShufflableExit("DK Isles Crystal Caves Lobby to Main", Regions.CrystalCavesLobby, TransitionFronts.IslesMainToCavesLobby, ExitCategories.CavesLobby),
    TransitionFronts.IslesMainToCastleLobby: ShufflableExit("DK Isles Main to Creepy Castle Lobby", Regions.IslesMain, TransitionFronts.IslesCastleLobbyToMain, ExitCategories.IslesExterior),
    TransitionFronts.IslesCastleLobbyToMain: ShufflableExit("DK Isles Creepy Castle Lobby to Main", Regions.CreepyCastleLobby, TransitionFronts.IslesMainToCastleLobby, ExitCategories.CastleLobby),
    # Jungle Japes Exits
    TransitionFronts.JapesMainToMine: ShufflableExit("Jungle Japes Main to Mine", Regions.JungleJapesMain, TransitionFronts.JapesMineToMain, ExitCategories.JapesExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.JapesMineToMain: ShufflableExit("Jungle Japes Mine to Main", Regions.Mine, TransitionFronts.JapesMainToMine, ExitCategories.JapesMine, regionKongs={Kongs.diddy}),
    TransitionFronts.JapesMainToLankyCave: ShufflableExit("Jungle Japes Main to Lanky Cave", Regions.IslesMain, TransitionFronts.JapesLankyCaveToMain, ExitCategories.JapesExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.JapesLankyCaveToMain: ShufflableExit("Jungle Japes Lanky Cave to Main", Regions.JapesLankyCave, TransitionFronts.JapesMainToLankyCave, regionKongs={Kongs.lanky}),
    TransitionFronts.JapesMainToCatacomb: ShufflableExit("Jungle Japes Main to Catacomb", Regions.JungleJapesMain, TransitionFronts.JapesCatacombToMain, ExitCategories.JapesExterior, entryKongs={Kongs.chunky}),
    TransitionFronts.JapesCatacombToMain: ShufflableExit("Jungle Japes Catacomb to Main", Regions.JapesCatacomb, TransitionFronts.JapesMainToCatacomb, regionKongs={Kongs.chunky}),
    TransitionFronts.JapesMainToTinyHive: ShufflableExit("Jungle Japes Main to Tiny Hive", Regions.JapesBeyondFeatherGate, TransitionFronts.JapesTinyHiveToMain, ExitCategories.JapesExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.JapesTinyHiveToMain: ShufflableExit("Jungle Japes Tiny Hive to Main", Regions.TinyHive, TransitionFronts.JapesMainToTinyHive, regionKongs={Kongs.tiny}),
    # Angry Aztec Exits
    # Exits.AztecStartToTemple: ShufflableExit("Angry Aztec Start to Temple", Regions.AngryAztecStart, Exits.AztecTempleToStart, ExitCategories.AztecExterior),
    # Exits.AztecTempleToStart: ShufflableExit("Angry Aztec Temple to Start", Regions.TempleStart, Exits.AztecStartToTemple),
    TransitionFronts.AztecMainToDonkey: ShufflableExit("Angry Aztec Main to Donkey 5DT", Regions.AngryAztecMain, TransitionFronts.AztecDonkeyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.AztecDonkeyToMain: ShufflableExit("Angry Aztec Donkey 5DT to Main", Regions.DonkeyTemple, TransitionFronts.AztecMainToDonkey, regionKongs={Kongs.donkey}),
    TransitionFronts.AztecMainToDiddy: ShufflableExit("Angry Aztec Main to Diddy 5DT", Regions.AngryAztecMain, TransitionFronts.AztecDiddyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.AztecDiddyToMain: ShufflableExit("Angry Aztec Diddy 5DT to Main", Regions.DiddyTemple, TransitionFronts.AztecMainToDiddy, regionKongs={Kongs.diddy}),
    TransitionFronts.AztecMainToLanky: ShufflableExit("Angry Aztec Main to Lanky 5DT", Regions.AngryAztecMain, TransitionFronts.AztecLankyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.AztecLankyToMain: ShufflableExit("Angry Aztec Lanky 5DT to Main", Regions.LankyTemple, TransitionFronts.AztecMainToLanky, regionKongs={Kongs.lanky}),
    TransitionFronts.AztecMainToTiny: ShufflableExit("Angry Aztec Main to Tiny 5DT", Regions.AngryAztecMain, TransitionFronts.AztecTinyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.AztecTinyToMain: ShufflableExit("Angry Aztec Tiny 5DT To Main", Regions.TinyTemple, TransitionFronts.AztecMainToTiny, regionKongs={Kongs.tiny}),
    TransitionFronts.AztecMainToChunky: ShufflableExit("Angry Aztec Main to Chunky 5DT", Regions.AngryAztecMain, TransitionFronts.AztecChunkyToMain, ExitCategories.AztecExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.AztecChunkyToMain: ShufflableExit("Angry Aztec Chunky 5DT to Main", Regions.ChunkyTemple, TransitionFronts.AztecMainToChunky, regionKongs={Kongs.chunky}),
    TransitionFronts.AztecMainToRace: ShufflableExit("Angry Aztec Main to Beetle Race", Regions.AngryAztecMain, TransitionFronts.AztecRaceToMain, ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.AztecRaceToMain: ShufflableExit("Angry Aztec Beetle Race to Main", Regions.AztecTinyRace, TransitionFronts.AztecMainToRace, regionKongs={Kongs.tiny}),
    # Exits.AztecMainToLlama: ShufflableExit("Angry Aztec Main to Llama Temple", Regions.AngryAztecMain, Exits.AztecLlamaToMain, ExitCategories.AztecExterior),
    # Exits.AztecLlamaToMain: ShufflableExit("Angry Aztec Llama Temple to Main", Regions.LlamaTemple, Exits.AztecMainToLlama),
    # Frantic Factory Exits
    TransitionFronts.FactoryRandDToRace: ShufflableExit("Frantic Factory R&D to Car Race", Regions.RandD, TransitionFronts.FactoryRaceToRandD, ExitCategories.FactoryExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.FactoryRaceToRandD: ShufflableExit("Frantic Factory Car Race to R&D", Regions.FactoryTinyRace, TransitionFronts.FactoryRandDToRace, regionKongs={Kongs.tiny}),
    TransitionFronts.FactoryChunkyRoomToPower: ShufflableExit("Frantic Factory Chunky Room to Power Room", Regions.ChunkyRoomPlatform, TransitionFronts.FactoryPowerToChunkyRoom, ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}),
    TransitionFronts.FactoryPowerToChunkyRoom: ShufflableExit("Frantic Factory Power Room to Chunky Room", Regions.PowerHut, TransitionFronts.FactoryChunkyRoomToPower, regionKongs={Kongs.donkey}),
    TransitionFronts.FactoryBeyondHatchToInsideCore: ShufflableExit("Frantic Factory Beyond Hatch to Inside Core", Regions.BeyondHatch, TransitionFronts.FactoryInsideCoreToBeyondHatch, ExitCategories.FactoryExterior),
    TransitionFronts.FactoryInsideCoreToBeyondHatch: ShufflableExit("Frantic Factory Inside Core to Beyond Hatch", Regions.InsideCore, TransitionFronts.FactoryBeyondHatchToInsideCore, regionKongs={Kongs.donkey, Kongs.lanky}),
    # Gloomy Galleon Exits
    TransitionFronts.GalleonLighthouseAreaToLighthouse: ShufflableExit("Gloomy Galleon Main to Lighthouse", Regions.LighthouseArea, TransitionFronts.GalleonLighthouseToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}),
    TransitionFronts.GalleonLighthouseToLighthouseArea: ShufflableExit("Gloomy Galleon Lighthouse to Main", Regions.Lighthouse, TransitionFronts.GalleonLighthouseAreaToLighthouse, regionKongs={Kongs.donkey}),
    TransitionFronts.GalleonLighthousAreaToMermaid: ShufflableExit("Gloomy Galleon Main to Mermaid Room", Regions.LighthouseArea, TransitionFronts.GalleonMermaidToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.GalleonMermaidToLighthouseArea: ShufflableExit("Gloomy Galleon Mermaid Room to Main", Regions.MermaidRoom, TransitionFronts.GalleonLighthousAreaToMermaid, regionKongs={Kongs.tiny}),
    TransitionFronts.GalleonLighthouseAreaToSickBay: ShufflableExit("Gloomy Galleon Main to Sick Bay", Regions.LighthouseArea, TransitionFronts.GalleonSickBayToLighthouseArea, ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.GalleonSickBayToLighthouseArea: ShufflableExit("Gloomy Galleon Sick Bay to Main", Regions.SickBay, TransitionFronts.GalleonLighthouseAreaToSickBay, regionKongs={Kongs.chunky}),
    TransitionFronts.GalleonShipyardToSeal: ShufflableExit("Gloomy Galleon Main to Seal Race", Regions.Shipyard, TransitionFronts.GalleonSealToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.GalleonSealToShipyard: ShufflableExit("Gloomy Galleon Seal Race to Main", Regions.SealRace, TransitionFronts.GalleonShipyardToSeal, regionKongs={Kongs.donkey}),
    TransitionFronts.GalleonShipyardToSubmarine: ShufflableExit("Gloomy Galleon Main to Submarine", Regions.Shipyard, TransitionFronts.GalleonSubmarineToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.GalleonSubmarineToShipyard: ShufflableExit("Gloomy Galleon Submarine to Main", Regions.Submarine, TransitionFronts.GalleonShipyardToSubmarine, regionKongs={Kongs.tiny}),
    TransitionFronts.GalleonShipyardToLanky: ShufflableExit("Gloomy Galleon Main to Lanky 2DS", Regions.Shipyard, TransitionFronts.GalleonLankyToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.GalleonLankyToShipyard: ShufflableExit("Gloomy Galleon Lanky 2DS to Main", Regions.LankyShip, TransitionFronts.GalleonShipyardToLanky, regionKongs={Kongs.lanky}),
    TransitionFronts.GalleonShipyardToTiny: ShufflableExit("Gloomy Galleon Main to Tiny 2DS", Regions.Shipyard, TransitionFronts.GalleonTinyToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}),
    TransitionFronts.GalleonTinyToShipyard: ShufflableExit("Gloomy Galleon Tiny 2DS to Main", Regions.TinyShip, TransitionFronts.GalleonShipyardToTiny, regionKongs={Kongs.tiny}),
    TransitionFronts.GalleonShipyardToBongos: ShufflableExit("Gloomy Galleon Main to Donkey 5DS", Regions.Shipyard, TransitionFronts.GalleonBongosToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.GalleonBongosToShipyard: ShufflableExit("Gloomy Galleon Donkey 5DS to Main", Regions.BongosShip, TransitionFronts.GalleonShipyardToBongos, regionKongs={Kongs.donkey}),
    TransitionFronts.GalleonShipyardToGuitar: ShufflableExit("Gloomy Galleon Main to Diddy 5DS", Regions.Shipyard, TransitionFronts.GalleonGuitarToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.GalleonGuitarToShipyard: ShufflableExit("Gloomy Galleon Diddy 5DS to Main", Regions.GuitarShip, TransitionFronts.GalleonShipyardToGuitar, regionKongs={Kongs.diddy}),
    TransitionFronts.GalleonShipyardToTrombone: ShufflableExit("Gloomy Galleon Main to Lanky 5DS", Regions.Shipyard, TransitionFronts.GalleonTromboneToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.GalleonTromboneToShipyard: ShufflableExit("Gloomy Galleon Lanky 5DS to Main", Regions.TromboneShip, TransitionFronts.GalleonShipyardToTrombone, regionKongs={Kongs.lanky}),
    TransitionFronts.GalleonShipyardToSaxophone: ShufflableExit("Gloomy Galleon Main to Tiny 5DS", Regions.Shipyard, TransitionFronts.GalleonSaxophoneToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.GalleonSaxophoneToShipyard: ShufflableExit("Gloomy Galleon Tiny 5DS to Main", Regions.SaxophoneShip, TransitionFronts.GalleonShipyardToSaxophone, regionKongs={Kongs.tiny}),
    TransitionFronts.GalleonShipyardToTriangle: ShufflableExit("Gloomy Galleon Main to Chunky 5DS", Regions.Shipyard, TransitionFronts.GalleonTriangleToShipyard, ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.GalleonTriangleToShipyard: ShufflableExit("Gloomy Galleon Chunky 5DS to Main", Regions.TriangleShip, TransitionFronts.GalleonShipyardToTriangle, regionKongs={Kongs.chunky}),
    TransitionFronts.GalleonTreasureToChest: ShufflableExit("Gloomy Galleon Main to Chest", Regions.TreasureRoom, TransitionFronts.GalleonChestToTreasure, ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.GalleonChestToTreasure: ShufflableExit("Gloomy Galleon Chest to Main", Regions.TinyChest, TransitionFronts.GalleonTreasureToChest, regionKongs={Kongs.tiny}),
    # Fungi Forest Exits
    TransitionFronts.ForestMainToLowerMushroom: ShufflableExit("Fungi Forest Main to Mushroom Lower", Regions.GiantMushroomArea, TransitionFronts.ForestLowerMushroomToMain, ExitCategories.ForestExterior),
    TransitionFronts.ForestLowerMushroomToMain: ShufflableExit("Fungi Forest Mushroom Lower to Main", Regions.MushroomLower, TransitionFronts.ForestMainToLowerMushroom, ExitCategories.ForestMushroom),
    TransitionFronts.ForestLowerExteriorToLowerMushroom: ShufflableExit("Fungi Forest Lower Exterior to Lower Mushroom", Regions.MushroomLowerExterior, TransitionFronts.ForestLowerMushroomToLowerExterior, ExitCategories.ForestExterior),
    TransitionFronts.ForestLowerMushroomToLowerExterior: ShufflableExit("Fungi Forest Lower Mushroom to Lower Exterior", Regions.MushroomLower, TransitionFronts.ForestLowerExteriorToLowerMushroom, ExitCategories.ForestMushroom),
    TransitionFronts.ForestLowerExteriorToUpperMushroom: ShufflableExit("Fungi Forest Lower Exterior to Upper Mushroom", Regions.MushroomLowerExterior, TransitionFronts.ForestUpperMushroomToLowerExterior, ExitCategories.ForestExterior),
    TransitionFronts.ForestUpperMushroomToLowerExterior: ShufflableExit("Fungi Forest Upper Mushroom to Lower Exterior", Regions.MushroomUpper, TransitionFronts.ForestLowerExteriorToUpperMushroom, ExitCategories.ForestMushroom),
    TransitionFronts.ForestUpperExteriorToUpperMushroom: ShufflableExit("Fungi Forest Upper Exterior to Upper Mushroom", Regions.MushroomUpperExterior, TransitionFronts.ForestUpperMushroomToUpperExterior, ExitCategories.ForestExterior),
    TransitionFronts.ForestUpperMushroomToUpperExterior: ShufflableExit("Fungi Forest Upper Mushroom to Upper Exterior", Regions.MushroomUpper, TransitionFronts.ForestUpperExteriorToUpperMushroom, ExitCategories.ForestMushroom),
    TransitionFronts.ForestExteriorToNight: ShufflableExit("Fungi Forest Night Exterior to Night Door", Regions.MushroomNightExterior, TransitionFronts.ForestNightToExterior, ExitCategories.ForestExterior),
    TransitionFronts.ForestNightToExterior: ShufflableExit("Fungi Forest Night Door to Night Exterior", Regions.MushroomNightDoor, TransitionFronts.ForestExteriorToNight, ExitCategories.ForestMushroom),
    TransitionFronts.ForestExteriorToChunky: ShufflableExit("Fungi Forest Upper Exterior to Chunky Room", Regions.MushroomUpperExterior, TransitionFronts.ForestChunkyToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.chunky}),
    TransitionFronts.ForestChunkyToExterior: ShufflableExit("Fungi Forest Chunky Room to Upper Exterior", Regions.MushroomChunkyRoom, TransitionFronts.ForestExteriorToChunky, regionKongs={Kongs.chunky}),
    TransitionFronts.ForestExteriorToZingers: ShufflableExit("Fungi Forest Upper Exterior to Zinger Room", Regions.MushroomUpperExterior, TransitionFronts.ForestZingersToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.ForestZingersToExterior: ShufflableExit("Fungi Forest Zinger Room to Upper Exterior", Regions.MushroomLankyZingersRoom, TransitionFronts.ForestExteriorToZingers, regionKongs={Kongs.lanky}),
    TransitionFronts.ForestExteriorToMushrooms: ShufflableExit("Fungi Forest Upper Exterior to Mushroom Room", Regions.MushroomUpperExterior, TransitionFronts.ForestMushroomsToExterior, ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.ForestMushroomsToExterior: ShufflableExit("Fungi Forest Mushroom Room to Upper Exterior", Regions.MushroomLankyMushroomsRoom, TransitionFronts.ForestExteriorToMushrooms, regionKongs={Kongs.lanky}),
    TransitionFronts.ForestTreeToAnthill: ShufflableExit("Fungi Forest Hollow Tree Area to Anthill", Regions.HollowTreeArea, TransitionFronts.ForestAnthillToTree, ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.ForestAnthillToTree: ShufflableExit("Fungi Forest Anthill to Hollow Tree Area", Regions.Anthill, TransitionFronts.ForestTreeToAnthill, regionKongs={Kongs.tiny}),
    TransitionFronts.ForestMainToChunkyMill: ShufflableExit("Fungi Forest Main to Mill Chunky Door", Regions.MillArea, TransitionFronts.ForestChunkyMillToMain, ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.ForestChunkyMillToMain: ShufflableExit("Fungi Forest Mill Chunky Door to Mill", Regions.MillChunkyArea, TransitionFronts.ForestMainToChunkyMill, ExitCategories.ForestMill, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    TransitionFronts.ForestMainToTinyMill: ShufflableExit("Fungi Forest Main to Mill Tiny Entrance", Regions.MillArea, TransitionFronts.ForestTinyMillToMain, ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.ForestTinyMillToMain: ShufflableExit("Fungi Forest Mill Tiny Entrance to Main", Regions.MillTinyArea, TransitionFronts.ForestMainToTinyMill, ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    TransitionFronts.ForestMainToGrinder: ShufflableExit("Fungi Forest Main to Grinder Room", Regions.MillArea, TransitionFronts.ForestGrinderToMain, ExitCategories.ForestExterior),
    TransitionFronts.ForestGrinderToMain: ShufflableExit("Fungi Forest Grinder Room to Main", Regions.GrinderRoom, TransitionFronts.ForestMainToGrinder, ExitCategories.ForestGrinder),
    TransitionFronts.ForestMainToRafters: ShufflableExit("Fungi Forest Main to Rafters", Regions.MillArea, TransitionFronts.ForestRaftersToMain, ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.ForestRaftersToMain: ShufflableExit("Fungi Forest Rafters to Main", Regions.MillRafters, TransitionFronts.ForestMainToRafters, regionKongs={Kongs.diddy}),
    TransitionFronts.ForestMainToWinch: ShufflableExit("Fungi Forest Main to Winch Room", Regions.MillArea, TransitionFronts.ForestWinchToMain, ExitCategories.ForestExterior, entryKongs={Kongs.diddy}),
    TransitionFronts.ForestWinchToMain: ShufflableExit("Fungi Forest Winch Room to Main", Regions.WinchRoom, TransitionFronts.ForestMainToWinch, regionKongs={Kongs.diddy}),
    TransitionFronts.ForestMainToAttic: ShufflableExit("Fungi Forest Main to Mill Attic", Regions.MillArea, TransitionFronts.ForestAtticToMain, ExitCategories.ForestExterior),
    TransitionFronts.ForestAtticToMain: ShufflableExit("Fungi Forest Mill Attic to Main", Regions.MillAttic, TransitionFronts.ForestMainToAttic, regionKongs={Kongs.lanky}),
    TransitionFronts.ForestTinyMillToSpider: ShufflableExit("Fungi Forest Mill to Spider Boss", Regions.MillTinyArea, TransitionFronts.ForestSpiderToTinyMill, ExitCategories.ForestMill, regionKongs={Kongs.tiny}),
    TransitionFronts.ForestSpiderToTinyMill: ShufflableExit("Fungi Forest Spider Boss to Mill", Regions.SpiderRoom, TransitionFronts.ForestTinyMillToSpider, regionKongs={Kongs.tiny}),
    TransitionFronts.ForestTinyMillToGrinder: ShufflableExit("Fungi Forest Tiny Entrance to Grinder Room", Regions.MillTinyArea, TransitionFronts.ForestGrinderToTinyMill, ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    TransitionFronts.ForestGrinderToTinyMill: ShufflableExit("Fungi Forest Grinder Room to Tiny Entrance", Regions.GrinderRoom, TransitionFronts.ForestTinyMillToGrinder, ExitCategories.ForestGrinder, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.ForestMainToBarn: ShufflableExit("Fungi Forest Main to Thornvine Barn", Regions.ThornvineArea, TransitionFronts.ForestBarnToMain, ExitCategories.ForestExterior, entryKongs={Kongs.donkey}),
    TransitionFronts.ForestBarnToMain: ShufflableExit("Fungi Forest Thornvine Barn to Main", Regions.ThornvineBarn, TransitionFronts.ForestMainToBarn, regionKongs={Kongs.donkey}),
    # Crystal Caves Exits
    TransitionFronts.CavesMainToRace: ShufflableExit("Crystal Caves Main to Beetle Race", Regions.CrystalCavesMain, TransitionFronts.CavesRaceToMain, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.CavesRaceToMain: ShufflableExit("Crystal Caves Beetle Race to Main", Regions.CavesLankyRace, TransitionFronts.CavesMainToRace, regionKongs={Kongs.lanky}),
    TransitionFronts.CavesMainToCastle: ShufflableExit("Crystal Caves Main to Frozen Castle", Regions.CrystalCavesMain, TransitionFronts.CavesCastleToMain, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.CavesCastleToMain: ShufflableExit("Crystal Caves Frozen Castle to Main", Regions.FrozenCastle, TransitionFronts.CavesMainToCastle, regionKongs={Kongs.lanky}),
    TransitionFronts.CavesIglooToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DI", Regions.IglooArea, TransitionFronts.CavesDonkeyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.CavesDonkeyToIgloo: ShufflableExit("Crystal Caves Donkey 5DI to Main", Regions.DonkeyIgloo, TransitionFronts.CavesIglooToDonkey, regionKongs={Kongs.donkey}),
    TransitionFronts.CavesIglooToDiddy: ShufflableExit("Crystal Caves Main to Diddy 5DI", Regions.IglooArea, TransitionFronts.CavesDiddyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.CavesDiddyToIgloo: ShufflableExit("Crystal Caves Diddy 5DI to Main", Regions.DiddyIgloo, TransitionFronts.CavesIglooToDiddy, regionKongs={Kongs.diddy}),
    TransitionFronts.CavesIglooToLanky: ShufflableExit("Crystal Caves Main to Lanky 5DI", Regions.IglooArea, TransitionFronts.CavesLankyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.CavesLankyToIgloo: ShufflableExit("Crystal Caves Lanky 5DI to Main", Regions.LankyIgloo, TransitionFronts.CavesIglooToLanky, regionKongs={Kongs.lanky}),
    TransitionFronts.CavesIglooToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DI", Regions.IglooArea, TransitionFronts.CavesTinyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.CavesTinyToIgloo: ShufflableExit("Crystal Caves Tiny 5DI to Main", Regions.TinyIgloo, TransitionFronts.CavesIglooToTiny, regionKongs={Kongs.tiny}),
    TransitionFronts.CavesIglooToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DI", Regions.IglooArea, TransitionFronts.CavesChunkyToIgloo, ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.CavesChunkyToIgloo: ShufflableExit("Crystal Caves Chunky 5DI to Main", Regions.ChunkyIgloo, TransitionFronts.CavesIglooToChunky, regionKongs={Kongs.chunky}),
    TransitionFronts.CavesCabinToRotating: ShufflableExit("Crystal Caves Main to Rotating Cabin", Regions.CabinArea, TransitionFronts.CavesRotatingToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.CavesRotatingToCabin: ShufflableExit("Crystal Caves Rotating Cabin to Main", Regions.RotatingCabin, TransitionFronts.CavesCabinToRotating, regionKongs={Kongs.donkey}),
    TransitionFronts.CavesCabinToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DC", Regions.CabinArea, TransitionFronts.CavesDonkeyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    TransitionFronts.CavesDonkeyToCabin: ShufflableExit("Crystal Caves Donkey 5DC to Main", Regions.DonkeyCabin, TransitionFronts.CavesCabinToDonkey, regionKongs={Kongs.donkey}),
    TransitionFronts.CavesCabinToDiddyLower: ShufflableExit("Crystal Caves Main to Diddy Lower 5DC", Regions.CabinArea, TransitionFronts.CavesDiddyLowerToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.CavesDiddyLowerToCabin: ShufflableExit("Crystal Caves Diddy Lower 5DC to Main", Regions.DiddyLowerCabin, TransitionFronts.CavesCabinToDiddyLower, regionKongs={Kongs.diddy}),
    TransitionFronts.CavesCabinToDiddyUpper: ShufflableExit("Crystal Caves Main to Diddy Upper 5DC", Regions.CabinArea, TransitionFronts.CavesDiddyUpperToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    TransitionFronts.CavesDiddyUpperToCabin: ShufflableExit("Crystal Caves Diddy Upper 5DC to Main", Regions.DiddyUpperCabin, TransitionFronts.CavesCabinToDiddyUpper, regionKongs={Kongs.diddy}),
    TransitionFronts.CavesCabinToLanky: ShufflableExit("Crystal Caves Main to Lanky 1DC", Regions.CabinArea, TransitionFronts.CavesLankyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    TransitionFronts.CavesLankyToCabin: ShufflableExit("Crystal Caves Lanky 1DC to Main", Regions.LankyCabin, TransitionFronts.CavesCabinToLanky, regionKongs={Kongs.lanky}),
    TransitionFronts.CavesCabinToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DC", Regions.CabinArea, TransitionFronts.CavesTinyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.CavesTinyToCabin: ShufflableExit("Crystal Caves Tiny 5DC to Main", Regions.TinyCabin, TransitionFronts.CavesCabinToTiny, regionKongs={Kongs.tiny}),
    TransitionFronts.CavesCabinToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DC", Regions.CabinArea, TransitionFronts.CavesChunkyToCabin, ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.CavesChunkyToCabin: ShufflableExit("Crystal Caves Chunky 5DC to Main", Regions.ChunkyCabin, TransitionFronts.CavesCabinToChunky, regionKongs={Kongs.chunky}),
    # Creepy Castle Exits
    TransitionFronts.CastleMainToTree: ShufflableExit("Creepy Castle Main to Tree", Regions.CreepyCastleMain, TransitionFronts.CastleTreeToMain, ExitCategories.CastleExterior),
    TransitionFronts.CastleTreeToMain: ShufflableExit("Creepy Castle Tree to Main", Regions.CastleTree, TransitionFronts.CastleMainToTree, regionKongs={Kongs.donkey, Kongs.chunky}),
    # At some point add tree drain pipe
    TransitionFronts.CastleMainToLibrary: ShufflableExit("Creepy Castle Main to Library", Regions.CreepyCastleMain, TransitionFronts.CastleLibraryToMain, ExitCategories.CastleExterior, entryKongs={Kongs.donkey}),
    TransitionFronts.CastleLibraryToMain: ShufflableExit("Creepy Castle Library to Main", Regions.Library, TransitionFronts.CastleMainToLibrary, regionKongs={Kongs.donkey}),
    # At some point add library back door
    TransitionFronts.CastleMainToBallroom: ShufflableExit("Creepy Castle Main to Ballroom", Regions.CreepyCastleMain, TransitionFronts.CastleBallroomToMain, ExitCategories.CastleExterior),
    TransitionFronts.CastleBallroomToMain: ShufflableExit("Creepy Castle Ballroom to Main", Regions.Ballroom, TransitionFronts.CastleMainToBallroom, ExitCategories.CastleBallroom),
    TransitionFronts.CastleMainToTower: ShufflableExit("Creepy Castle Main to Tower", Regions.CreepyCastleMain, TransitionFronts.CastleTowerToMain, ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.CastleTowerToMain: ShufflableExit("Creepy Castle Tower to Main", Regions.Tower, TransitionFronts.CastleMainToTower, regionKongs={Kongs.lanky}),
    TransitionFronts.CastleMainToGreenhouse: ShufflableExit("Creepy Castle Main to Greenhouse", Regions.CreepyCastleMain, TransitionFronts.CastleGreenhouseToMain, ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    TransitionFronts.CastleGreenhouseToMain: ShufflableExit("Creepy Castle Greenhouse to Main", Regions.Greenhouse, TransitionFronts.CastleMainToGreenhouse, regionKongs={Kongs.lanky}),
    # At some point add one to differentiate greenhouse back door/front door
    TransitionFronts.CastleMainToTrash: ShufflableExit("Creepy Castle Main to Trash Can", Regions.CreepyCastleMain, TransitionFronts.CastleTrashToMain, ExitCategories.CastleExterior, entryKongs={Kongs.tiny}, move=True),
    TransitionFronts.CastleTrashToMain: ShufflableExit("Creepy Castle Trash Can to Main", Regions.TrashCan, TransitionFronts.CastleMainToTrash, regionKongs={Kongs.tiny}),
    TransitionFronts.CastleMainToShed: ShufflableExit("Creepy Castle Main to Shed", Regions.CreepyCastleMain, TransitionFronts.CastleShedToMain, ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, move=True),
    TransitionFronts.CastleShedToMain: ShufflableExit("Creepy Castle Shed to Main", Regions.Shed, TransitionFronts.CastleMainToShed, regionKongs={Kongs.chunky}),
    TransitionFronts.CastleMainToMuseum: ShufflableExit("Creepy Castle Main to Museum", Regions.CreepyCastleMain, TransitionFronts.CastleMuseumToMain, ExitCategories.CastleExterior, entryKongs={Kongs.chunky}),
    TransitionFronts.CastleMuseumToMain: ShufflableExit("Creepy Castle Museum to Main", Regions.Museum, TransitionFronts.CastleMainToMuseum, regionKongs={Kongs.chunky}),
    TransitionFronts.CastleMainToLower: ShufflableExit("Creepy Castle Main to Lower Cave", Regions.CreepyCastleMain, TransitionFronts.CastleLowerToMain, ExitCategories.CastleExterior),
    TransitionFronts.CastleLowerToMain: ShufflableExit("Creepy Castle Lower Cave to Main", Regions.LowerCave, TransitionFronts.CastleMainToLower, ExitCategories.CastleLower),
    TransitionFronts.CastleMainToUpper: ShufflableExit("Creepy Castle Main to Upper Cave", Regions.CreepyCastleMain, TransitionFronts.CastleUpperToMain, ExitCategories.CastleExterior),
    TransitionFronts.CastleUpperToMain: ShufflableExit("Creepy Castle Upper Cave to Main", Regions.UpperCave, TransitionFronts.CastleMainToUpper, ExitCategories.CastleUpper),
    TransitionFronts.CastleWaterfallToUpper: ShufflableExit("Creepy Castle Waterfall to Upper Cave", Regions.CastleWaterfall, TransitionFronts.CastleUpperToWaterfall, ExitCategories.CastleExterior),
    TransitionFronts.CastleUpperToWaterfall: ShufflableExit("Creepy Castle Upper Cave to Waterfall", Regions.UpperCave, TransitionFronts.CastleWaterfallToUpper, ExitCategories.CastleUpper),
    TransitionFronts.CastleBallroomToRace: ShufflableExit("Creepy Castle Ballroom to Car Race", Regions.Ballroom, TransitionFronts.CastleRaceToBallroom, ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}),
    TransitionFronts.CastleRaceToBallroom: ShufflableExit("Creepy Castle Car Race to Ballroom", Regions.CastleTinyRace, TransitionFronts.CastleBallroomToRace, regionKongs={Kongs.tiny}),
    TransitionFronts.CastleLowerToCrypt: ShufflableExit("Creepy Castle Lower Cave to Crypt", Regions.LowerCave, TransitionFronts.CastleCryptToLower, ExitCategories.CastleLower, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    TransitionFronts.CastleCryptToLower: ShufflableExit("Creepy Castle Crypt to Lower Cave", Regions.Crypt, TransitionFronts.CastleLowerToCrypt, ExitCategories.CastleCrypt, regionKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    TransitionFronts.CastleLowerToMausoleum: ShufflableExit("Creepy Castle Lower Cave to Mausoleum", Regions.LowerCave, TransitionFronts.CastleMausoleumToLower, ExitCategories.CastleLower, entryKongs={Kongs.lanky, Kongs.tiny}),
    TransitionFronts.CastleMausoleumToLower: ShufflableExit("Creepy Castle Mausoleum to Lower cave", Regions.Mausoleum, TransitionFronts.CastleLowerToMausoleum, regionKongs={Kongs.lanky, Kongs.tiny}),
    TransitionFronts.CastleCryptToCarts: ShufflableExit("Creepy Castle Crypt to Minecarts", Regions.Crypt, TransitionFronts.CastleCartsToCrypt, ExitCategories.CastleCrypt, entryKongs={Kongs.donkey}),
    TransitionFronts.CastleCartsToCrypt: ShufflableExit("Creepy Castle Minecarts to Crypt", Regions.CastleMinecarts, TransitionFronts.CastleCryptToCarts, regionKongs={Kongs.donkey}),
    TransitionFronts.CastleUpperToDungeon: ShufflableExit("Creepy Castle Upper Cave to Dungeon", Regions.UpperCave, TransitionFronts.CastleDungeonToUpper, ExitCategories.CastleUpper),
    TransitionFronts.CastleDungeonToUpper: ShufflableExit("Creepy Castle Dungeon to Upper Cave", Regions.Dungeon, TransitionFronts.CastleUpperToDungeon),
}
