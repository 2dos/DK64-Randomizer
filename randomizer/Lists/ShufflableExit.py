# fmt: off
"""Shufflable exit class and list file."""

from randomizer.Enums.ExitCategories import ExitCategories
from randomizer.Enums.Transitions import Transitions
from randomizer.Enums.Kongs import Kongs
from randomizer.Enums.Regions import Regions
from randomizer.LogicClasses import TransitionBack
from randomizer.MapsAndExits import Maps


class ShufflableExit:
    """Class that stores data about an exit to be shuffled."""

    def __init__(self, name, region, back, category=None, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.lanky, Kongs.tiny, Kongs.chunky}, regionKongs={}, move=False):
        """Initialize with given parameters."""
        self.name = name
        self.region = region
        self.back = back
        self.category = category
        self.entryKongs = entryKongs  # Indicates either need to be one of a certain set of kongs to gain access to this transition
        self.regionKongs = regionKongs  # Indicates need to be a certain kong or kongs on the back side of the transition. Should only apply if the destination region doesn't have a tag barrel
        self.move = move  # Indicates this transition needs a kong-specific move to access, so it's even more restrictive
        # shuffledId is pointing to the shuffled destination exit within ShufflableExits
        # Initialized as none until it gets shuffled
        self.shuffledId = None
        self.shuffled = False
        self.toBeShuffled = False


ShufflableExits = {
    # Level Exits
    Transitions.IslesToJapes: ShufflableExit("DK Isles to Jungle Japes", Regions.JungleJapesLobby, TransitionBack(Regions.JungleJapesMain, Maps.JungleJapes, "From Japes Lobby", Transitions.JapesToIsles), ExitCategories.JapesLobby),
    Transitions.JapesToIsles: ShufflableExit("Jungle Japes to DK Isles", Regions.JungleJapesMain, TransitionBack(Regions.JungleJapesLobby, Maps.JungleJapesLobby, "From Japes", Transitions.IslesToJapes), ExitCategories.JapesExterior),
    Transitions.IslesToAztec: ShufflableExit("DK Isles to Angry Aztec", Regions.AngryAztecLobby, TransitionBack(Regions.AngryAztecStart, Maps.AngryAztec, "From Aztec Lobby", Transitions.AztecToIsles), ExitCategories.AztecLobby),
    Transitions.AztecToIsles: ShufflableExit("Angry Aztec to DK Isles", Regions.AngryAztecStart, TransitionBack(Regions.AngryAztecLobby, Maps.AngryAztecLobby, "From Aztec", Transitions.IslesToAztec), ExitCategories.AztecExterior),
    Transitions.IslesToFactory: ShufflableExit("DK Isles to Frantic Factory", Regions.FranticFactoryLobby, TransitionBack(Regions.FranticFactoryStart, Maps.FranticFactory, "From Factory Lobby", Transitions.FactoryToIsles), ExitCategories.FactoryLobby),
    Transitions.FactoryToIsles: ShufflableExit("Frantic Factory to DK Isles", Regions.FranticFactoryStart, TransitionBack(Regions.FranticFactoryLobby, Maps.FranticFactoryLobby, "From Factory", Transitions.IslesToFactory), ExitCategories.FactoryExterior),
    Transitions.IslesToGalleon: ShufflableExit("DK Isles to Gloomy Galleon", Regions.GloomyGalleonLobby, TransitionBack(Regions.GloomyGalleonStart, Maps.GloomyGalleon, "From Galleon Lobby", Transitions.GalleonToIsles), ExitCategories.GalleonLobby),
    Transitions.GalleonToIsles: ShufflableExit("Gloomy Galleon to DK Isles", Regions.GloomyGalleonStart, TransitionBack(Regions.GloomyGalleonLobby, Maps.GloomyGalleonLobby, "From Galleon", Transitions.IslesToGalleon), ExitCategories.GalleonExterior),
    Transitions.IslesToForest: ShufflableExit("DK Isles to Fungi Forest", Regions.FungiForestLobby, TransitionBack(Regions.FungiForestStart, Maps.FungiForest, "From Fungi Lobby", Transitions.ForestToIsles), ExitCategories.ForestLobby),
    Transitions.ForestToIsles: ShufflableExit("Fungi Forest to DK Isles", Regions.FungiForestStart, TransitionBack(Regions.FungiForestLobby, Maps.FungiForestLobby, "From Fungi", Transitions.IslesToForest), ExitCategories.ForestExterior),
    Transitions.IslesToCaves: ShufflableExit("DK Isles to Crystal Caves", Regions.CrystalCavesLobby, TransitionBack(Regions.CrystalCavesMain, Maps.CrystalCaves, "From Caves Lobby", Transitions.CavesToIsles), ExitCategories.CavesLobby),
    Transitions.CavesToIsles: ShufflableExit("Crystal Caves to DK Isles", Regions.CrystalCavesMain, TransitionBack(Regions.CrystalCavesLobby, Maps.CrystalCavesLobby, "From Caves", Transitions.IslesToCaves), ExitCategories.CavesExterior),
    Transitions.IslesToCastle: ShufflableExit("DK Isles to Creepy Castle", Regions.CreepyCastleLobby, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Castle Lobby", Transitions.CastleToIsles), ExitCategories.CastleLobby),
    Transitions.CastleToIsles: ShufflableExit("Creepy Castle to DK Isles", Regions.CreepyCastleMain, TransitionBack(Regions.CreepyCastleLobby, Maps.CreepyCastleLobby, "From Castle", Transitions.IslesToCastle), ExitCategories.CastleExterior),
    
    # DK Isles Exits
    Transitions.IslesMainToFairy: ShufflableExit("DK Isles Main to Banana Fairy Queen", Regions.IslesMain, TransitionBack(Regions.BananaFairyRoom, Maps.BananaFairyRoom, "From DK Isles", Transitions.IslesFairyToMain), ExitCategories.IslesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.IslesFairyToMain: ShufflableExit("DK Isles Banana Fairy Queen to Main", Regions.BananaFairyRoom, TransitionBack(Regions.IslesMain, Maps.Isles, "From Banana Fairy Isle", Transitions.IslesMainToFairy)),
    Transitions.IslesMainToSnideRoom: ShufflableExit("DK Isles Crocodile Isle to Snide Room", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.IslesSnideRoom, Maps.IslesSnideRoom, "From DK Isles", Transitions.IslesSnideRoomToMain), ExitCategories.IslesExterior),
    Transitions.IslesSnideRoomToMain: ShufflableExit("DK Isles Snide Room to Crocodile Isle", Regions.IslesSnideRoom, TransitionBack(Regions.CrocodileIsleBeyondLift, Maps.Isles, "From Snide's Room", Transitions.IslesMainToSnideRoom)),
    Transitions.IslesMainToJapesLobby: ShufflableExit("DK Isles Main to Jungle Japes Lobby", Regions.IslesMain, TransitionBack(Regions.JungleJapesLobby, Maps.JungleJapesLobby, "From DK Isles", Transitions.IslesJapesLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesJapesLobbyToMain: ShufflableExit("DK Isles Jungle Japes Lobby to Main", Regions.JungleJapesLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Japes Lobby", Transitions.IslesMainToJapesLobby), ExitCategories.JapesLobby),
    Transitions.IslesMainToAztecLobby: ShufflableExit("DK Isles Main to Angry Aztec Lobby", Regions.IslesMain, TransitionBack(Regions.AngryAztecLobby, Maps.AngryAztecLobby, "From DK Isles", Transitions.IslesAztecLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesAztecLobbyToMain: ShufflableExit("DK Isles Angry Aztec Lobby to Main", Regions.AngryAztecLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Aztec Lobby", Transitions.IslesMainToAztecLobby), ExitCategories.AztecLobby),
    Transitions.IslesMainToFactoryLobby: ShufflableExit("DK Isles Main to Frantic Factory Lobby", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.FranticFactoryLobby, Maps.FranticFactoryLobby, "From DK Isles", Transitions.IslesFactoryLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesFactoryLobbyToMain: ShufflableExit("DK Isles Frantic Factory Lobby to Main", Regions.FranticFactoryLobby, TransitionBack(Regions.CrocodileIsleBeyondLift, Maps.Isles,"From Factory Lobby", Transitions.IslesMainToFactoryLobby), ExitCategories.FactoryLobby),
    Transitions.IslesMainToGalleonLobby: ShufflableExit("DK Isles Main to Gloomy Galleon Lobby", Regions.IslesMain, TransitionBack(Regions.GloomyGalleonLobby, Maps.GloomyGalleonLobby, "From DK Isles",Transitions.IslesGalleonLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesGalleonLobbyToMain: ShufflableExit("DK Isles Gloomy Galleon Lobby to Main", Regions.GloomyGalleonLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Galleon Lobby", Transitions.IslesMainToGalleonLobby), ExitCategories.GalleonLobby),
    Transitions.IslesMainToForestLobby: ShufflableExit("DK Isles Cabin Isle to Fungi Forest Lobby", Regions.CabinIsle, TransitionBack(Regions.FungiForestLobby, Maps.FungiForestLobby, "From DK Isles", Transitions.IslesForestLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesForestLobbyToMain: ShufflableExit("DK Isles Fungi Forest Lobby to Cabin Isle", Regions.FungiForestLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Fungi Lobby", Transitions.IslesMainToForestLobby), ExitCategories.ForestLobby),
    Transitions.IslesMainToCavesLobby: ShufflableExit("DK Isles Main to Crystal Caves Lobby", Regions.IslesMain, TransitionBack(Regions.CrystalCavesLobby, Maps.CrystalCavesLobby, "From DK Isles", Transitions.IslesCavesLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesCavesLobbyToMain: ShufflableExit("DK Isles Crystal Caves Lobby to Main", Regions.CrystalCavesLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Caves Lobby", Transitions.IslesMainToCavesLobby), ExitCategories.CavesLobby),
    Transitions.IslesMainToCastleLobby: ShufflableExit("DK Isles Main to Creepy Castle Lobby", Regions.IslesMain, TransitionBack(Regions.CreepyCastleLobby, Maps.CreepyCastleLobby, "From DK Isles",Transitions.IslesCastleLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesCastleLobbyToMain: ShufflableExit("DK Isles Creepy Castle Lobby to Main", Regions.CreepyCastleLobby, TransitionBack(Regions.IslesMain, Maps.Isles,"From Castle Lobby", Transitions.IslesMainToCastleLobby), ExitCategories.CastleLobby),
    
    # Jungle Japes Exits
    Transitions.JapesMainToMine: ShufflableExit("Jungle Japes Main to Mine", Regions.JungleJapesMain, TransitionBack(Regions.Mine, Maps.JapesMountain, "From Japes Main", Transitions.JapesMineToMain), ExitCategories.JapesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.JapesMineToMain: ShufflableExit("Jungle Japes Mine to Main", Regions.Mine, TransitionBack(Regions.JungleJapesMain, Maps.JungleJapes, "From Mountain", Transitions.JapesMainToMine), ExitCategories.JapesMine),
    Transitions.JapesMainToLankyCave: ShufflableExit("Jungle Japes Main to Lanky Cave", Regions.IslesMain, TransitionBack(Regions.JapesLankyCave, Maps.JapesLankyCave, "From Japes Main", Transitions.JapesLankyCaveToMain), ExitCategories.JapesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.JapesLankyCaveToMain: ShufflableExit("Jungle Japes Lanky Cave to Main", Regions.JapesLankyCave, TransitionBack(Regions.JungleJapesMain, Maps.JungleJapes, "From Painting Room", Transitions.JapesMainToLankyCave)),
    Transitions.JapesMainToCatacomb: ShufflableExit("Jungle Japes Main to Catacomb", Regions.JungleJapesMain, TransitionBack(Regions.JapesCatacomb, Maps.JapesUnderGround, "From Japes Main",Transitions.JapesCatacombToMain), ExitCategories.JapesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.JapesCatacombToMain: ShufflableExit("Jungle Japes Catacomb to Main", Regions.JapesCatacomb, TransitionBack(Regions.JungleJapesMain,	Maps.JungleJapes, "From Underground", Transitions.JapesMainToCatacomb)),
    Transitions.JapesMainToTinyHive: ShufflableExit("Jungle Japes Main to Tiny Hive", Regions.JapesBeyondFeatherGate, TransitionBack(Regions.TinyHive, Maps.JapesTinyHive, "From Japes Main", Transitions.JapesTinyHiveToMain), ExitCategories.JapesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.JapesTinyHiveToMain: ShufflableExit("Jungle Japes Tiny Hive to Main", Regions.TinyHive, TransitionBack(Regions.JapesBeyondFeatherGate, Maps.JungleJapes, "From Beehive", Transitions.JapesMainToTinyHive)),
    Transitions.JapesMainToBBlast: ShufflableExit("Jungle Japes Main to BBlast", Regions.JungleJapesMain, TransitionBack(Regions.JapesBaboonBlast, Maps.JapesBaboonBlast, "From Japes Main"), ExitCategories.JapesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.JapesMineToCarts: ShufflableExit("Jungle Japes Mine to Minecart", Regions.Mine, TransitionBack(Regions.JapesMinecarts, Maps.JapesMinecarts, "From Mountain"), ExitCategories.JapesMine, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}),
    Transitions.JapesCartsToMain: ShufflableExit("Jungle Japes Minecart to Main", Regions.JapesMinecarts, TransitionBack(Regions.JungleJapesMain, Maps.JungleJapes, "From Minecart")),
    
    # Angry Aztec Exits
    Transitions.AztecTempleToStart: ShufflableExit("Angry Aztec Temple to Start", Regions.TempleStart, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Tiny Temple")),
    Transitions.AztecMainToDonkey: ShufflableExit("Angry Aztec Main to Donkey 5DT", Regions.AngryAztecMain, TransitionBack(Regions.DonkeyTemple, Maps.AztecDonkey5DTemple, "From Aztec Main", Transitions.AztecDonkeyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.AztecDonkeyToMain: ShufflableExit("Angry Aztec Donkey 5DT to Main", Regions.DonkeyTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From DK 5DTemple", Transitions.AztecMainToDonkey)),
    Transitions.AztecMainToDiddy: ShufflableExit("Angry Aztec Main to Diddy 5DT", Regions.AngryAztecMain, TransitionBack(Regions.DiddyTemple, Maps.AztecDiddy5DTemple, "From Aztec Main", Transitions.AztecDiddyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.AztecDiddyToMain: ShufflableExit("Angry Aztec Diddy 5DT to Main", Regions.DiddyTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Diddy 5DTemple", Transitions.AztecMainToDiddy)),
    Transitions.AztecMainToLanky: ShufflableExit("Angry Aztec Main to Lanky 5DT", Regions.AngryAztecMain, TransitionBack(Regions.LankyTemple, Maps.AztecLanky5DTemple, "From Aztec Main", Transitions.AztecLankyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.AztecLankyToMain: ShufflableExit("Angry Aztec Lanky 5DT to Main", Regions.LankyTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Lanky 5DTemple", Transitions.AztecMainToLanky)),
    Transitions.AztecMainToTiny: ShufflableExit("Angry Aztec Main to Tiny 5DT", Regions.AngryAztecMain, TransitionBack(Regions.TinyTemple, Maps.AztecTiny5DTemple, "From Aztec Main", Transitions.AztecTinyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.AztecTinyToMain: ShufflableExit("Angry Aztec Tiny 5DT To Main", Regions.TinyTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Tiny 5DTemple", Transitions.AztecMainToTiny)),
    Transitions.AztecMainToChunky: ShufflableExit("Angry Aztec Main to Chunky 5DT", Regions.AngryAztecMain, TransitionBack(Regions.ChunkyTemple, Maps.AztecChunky5DTemple, "From Aztec Main", Transitions.AztecChunkyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.AztecChunkyToMain: ShufflableExit("Angry Aztec Chunky 5DT to Main", Regions.ChunkyTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Chunky 5DTemple", Transitions.AztecMainToChunky)),
    Transitions.AztecMainToRace: ShufflableExit("Angry Aztec Main to Beetle Race", Regions.AngryAztecMain, TransitionBack(Regions.AztecTinyRace, Maps.AztecTinyRace, "From Aztec Main", Transitions.AztecRaceToMain), ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.AztecRaceToMain: ShufflableExit("Angry Aztec Beetle Race to Main", Regions.AztecTinyRace, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Beetle Race", Transitions.AztecMainToRace)),
    Transitions.AztecLlamaToMain: ShufflableExit("Angry Aztec Llama Temple to Main", Regions.LlamaTemple, TransitionBack(Regions.AngryAztecMain, Maps.AngryAztec, "From Llama Temple")),
    Transitions.AztecMainToBBlast: ShufflableExit("Angry Aztec Main to BBlast", Regions.AngryAztecMain, TransitionBack(Regions.AztecBaboonBlast, Maps.AztecBaboonBlast, "From Aztec Main"), ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Frantic Factory Exits
    Transitions.FactoryRandDToRace: ShufflableExit("Frantic Factory R&D to Car Race", Regions.RandD, TransitionBack(Regions.FactoryTinyRace, Maps.FactoryTinyRace, "From Factory Main", Transitions.FactoryRaceToRandD), ExitCategories.FactoryExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.FactoryRaceToRandD: ShufflableExit("Frantic Factory Car Race to R&D", Regions.FactoryTinyRace, TransitionBack(Regions.FactoryTinyRaceLobby, Maps.FranticFactory, "From Car Race", Transitions.FactoryRandDToRace)),
    Transitions.FactoryChunkyRoomToPower: ShufflableExit("Frantic Factory Chunky Room to Power Room", Regions.ChunkyRoomPlatform, TransitionBack(Regions.PowerHut, Maps.FactoryPowerHut, "From Factory Main", Transitions.FactoryPowerToChunkyRoom), ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.FactoryPowerToChunkyRoom: ShufflableExit("Frantic Factory Power Room to Chunky Room", Regions.PowerHut, TransitionBack(Regions.BeyondHatch, Maps.FranticFactory, "From Power Shed", Transitions.FactoryChunkyRoomToPower)),
    Transitions.FactoryBeyondHatchToInsideCore: ShufflableExit("Frantic Factory Beyond Hatch to Inside Core", Regions.BeyondHatch, TransitionBack(Regions.InsideCore, Maps.FactoryCrusher, "From Factory Main", Transitions.FactoryInsideCoreToBeyondHatch), ExitCategories.FactoryExterior, regionKongs={Kongs.donkey, Kongs.lanky}),
    Transitions.FactoryInsideCoreToBeyondHatch: ShufflableExit("Frantic Factory Inside Core to Beyond Hatch", Regions.InsideCore, TransitionBack(Regions.BeyondHatch, Maps.FranticFactory, "From Crusher Room", Transitions.FactoryBeyondHatchToInsideCore)),
    Transitions.FactoryMainToBBlast: ShufflableExit("Frantic Factory Main to BBlast", Regions.BeyondHatch, TransitionBack(Regions.FactoryBaboonBlast, Maps.FactoryBaboonBlast, "From Factory Main"), ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Gloomy Galleon Exits
    Transitions.GalleonLighthouseAreaToLighthouse: ShufflableExit("Gloomy Galleon Main to Lighthouse", Regions.LighthouseArea, TransitionBack(Regions.Lighthouse, Maps.GalleonLighthouse, "From Galleon Main", Transitions.GalleonLighthouseToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.GalleonLighthouseToLighthouseArea: ShufflableExit("Gloomy Galleon Lighthouse to Main", Regions.Lighthouse, TransitionBack(Regions.LighthouseArea, Maps.GloomyGalleon, "From Lighthouse", Transitions.GalleonLighthouseAreaToLighthouse)),
    Transitions.GalleonLighthousAreaToMermaid: ShufflableExit("Gloomy Galleon Main to Mermaid Room", Regions.LighthouseArea, TransitionBack(Regions.MermaidRoom, Maps.GalleonMermaidRoom, "From Galleon Main", Transitions.GalleonMermaidToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonMermaidToLighthouseArea: ShufflableExit("Gloomy Galleon Mermaid Room to Main", Regions.MermaidRoom, TransitionBack(Regions.LighthouseArea, Maps.GloomyGalleon, "From Mermaid", Transitions.GalleonLighthousAreaToMermaid)),
    Transitions.GalleonLighthouseAreaToSickBay: ShufflableExit("Gloomy Galleon Main to Sick Bay", Regions.LighthouseArea, TransitionBack(Regions.SickBay, Maps.GalleonSickBay, "From Galleon Main", Transitions.GalleonSickBayToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.GalleonSickBayToLighthouseArea: ShufflableExit("Gloomy Galleon Sick Bay to Main", Regions.SickBay, TransitionBack(Regions.LighthouseArea, Maps.GloomyGalleon, "From Seasick Ship", Transitions.GalleonLighthouseAreaToSickBay)),
    Transitions.GalleonShipyardToSeal: ShufflableExit("Gloomy Galleon Main to Seal Race", Regions.Shipyard, TransitionBack(Regions.SealRace, Maps.GalleonSealRace, "From Galleon Main", Transitions.GalleonSealToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.GalleonSealToShipyard: ShufflableExit("Gloomy Galleon Seal Race to Main", Regions.SealRace, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Seal Race", Transitions.GalleonShipyardToSeal)),
    Transitions.GalleonShipyardToSubmarine: ShufflableExit("Gloomy Galleon Main to Submarine", Regions.Shipyard, TransitionBack(Regions.Submarine, Maps.GalleonSubmarine, "From Galleon Main", Transitions.GalleonSubmarineToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSubmarineToShipyard: ShufflableExit("Gloomy Galleon Submarine to Main", Regions.Submarine, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Submarine", Transitions.GalleonShipyardToSubmarine)),
    Transitions.GalleonShipyardToLanky: ShufflableExit("Gloomy Galleon Main to Lanky 2DS", Regions.Shipyard, TransitionBack(Regions.LankyShip, Maps.Galleon2DShip, "From Galleon (Lanky Entrance)", Transitions.GalleonLankyToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.GalleonLankyToShipyard: ShufflableExit("Gloomy Galleon Lanky 2DS to Main", Regions.LankyShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Lanky 2DShip", Transitions.GalleonShipyardToLanky)),
    Transitions.GalleonShipyardToTiny: ShufflableExit("Gloomy Galleon Main to Tiny 2DS", Regions.Shipyard, TransitionBack(Regions.TinyShip, Maps.Galleon2DShip, "From Galleon (Tiny Entrance)", Transitions.GalleonTinyToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.GalleonTinyToShipyard: ShufflableExit("Gloomy Galleon Tiny 2DS to Main", Regions.TinyShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Tiny 2DShip", Transitions.GalleonShipyardToTiny)),
    Transitions.GalleonShipyardToBongos: ShufflableExit("Gloomy Galleon Main to Donkey 5DS", Regions.Shipyard, TransitionBack(Regions.BongosShip, Maps.Galleon5DShipDKTiny, "From Galleon (DK Entrance)", Transitions.GalleonBongosToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.GalleonBongosToShipyard: ShufflableExit("Gloomy Galleon Donkey 5DS to Main", Regions.BongosShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Donkey 5DShip", Transitions.GalleonShipyardToBongos)),
    Transitions.GalleonShipyardToGuitar: ShufflableExit("Gloomy Galleon Main to Diddy 5DS", Regions.Shipyard, TransitionBack(Regions.GuitarShip, Maps.Galleon5DShipDiddyLankyChunky, "From Galleon (Diddy Entrance)", Transitions.GalleonGuitarToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.GalleonGuitarToShipyard: ShufflableExit("Gloomy Galleon Diddy 5DS to Main", Regions.GuitarShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Diddy 5DShip", Transitions.GalleonShipyardToGuitar)),
    Transitions.GalleonShipyardToTrombone: ShufflableExit("Gloomy Galleon Main to Lanky 5DS", Regions.Shipyard, TransitionBack(Regions.TromboneShip, Maps.Galleon5DShipDiddyLankyChunky, "From Galleon (Lanky Entrance)", Transitions.GalleonTromboneToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.GalleonTromboneToShipyard: ShufflableExit("Gloomy Galleon Lanky 5DS to Main", Regions.TromboneShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Lanky 5DShip", Transitions.GalleonShipyardToTrombone)),
    Transitions.GalleonShipyardToSaxophone: ShufflableExit("Gloomy Galleon Main to Tiny 5DS", Regions.Shipyard, TransitionBack(Regions.SaxophoneShip, Maps.Galleon5DShipDKTiny, "From Galleon (Tiny Entrance)", Transitions.GalleonSaxophoneToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSaxophoneToShipyard: ShufflableExit("Gloomy Galleon Tiny 5DS to Main", Regions.SaxophoneShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Tiny 5DShip", Transitions.GalleonShipyardToSaxophone)),
    Transitions.GalleonShipyardToTriangle: ShufflableExit("Gloomy Galleon Main to Chunky 5DS", Regions.Shipyard, TransitionBack(Regions.TriangleShip, Maps.Galleon5DShipDiddyLankyChunky, "From Galleon (Chunky Entrance)", Transitions.GalleonTriangleToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.GalleonTriangleToShipyard: ShufflableExit("Gloomy Galleon Chunky 5DS to Main", Regions.TriangleShip, TransitionBack(Regions.Shipyard, Maps.GloomyGalleon, "From Chunky 5DShip", Transitions.GalleonShipyardToTriangle)),
    Transitions.GalleonTreasureToChest: ShufflableExit("Gloomy Galleon Main to Chest", Regions.TreasureRoom, TransitionBack(Regions.TinyChest, Maps.GalleonTreasureChest, "From Galleon Main", Transitions.GalleonChestToTreasure), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.GalleonChestToTreasure: ShufflableExit("Gloomy Galleon Chest to Main", Regions.TinyChest, TransitionBack(Regions.TreasureRoom, Maps.GloomyGalleon, "From Treasure Chest", Transitions.GalleonTreasureToChest)),
    Transitions.GalleonMainToBBlast: ShufflableExit("Gloomy Galleon Main to BBlast", Regions.LighthouseArea, TransitionBack(Regions.GalleonBaboonBlast, Maps.GalleonBaboonBlast, "From Galleon Main"), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),

    # Fungi Forest Exits
    Transitions.ForestMainToCarts: ShufflableExit("Fungi Forest Main To Minecart", Regions.FungiForestStart, TransitionBack(Regions.ForestMinecarts, Maps.ForestMinecarts, "From Fungi Main"), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestCartsToMain: ShufflableExit("Fungi Forest Minecart To Main", Regions.ForestMinecarts, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Fungi Minecart (Chunky)")),
    Transitions.ForestMainToLowerMushroom: ShufflableExit("Fungi Forest Main to Mushroom Lower", Regions.GiantMushroomArea, TransitionBack(Regions.MushroomLower, Maps.ForestGiantMushroom, "From Fungi (Low)", Transitions.ForestLowerMushroomToMain), ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToMain: ShufflableExit("Fungi Forest Mushroom Lower to Main", Regions.MushroomLower, TransitionBack(Regions.GiantMushroomArea, Maps.FungiForest, "From G. Mush (Low)", Transitions.ForestMainToLowerMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToLowerMushroom: ShufflableExit("Fungi Forest Lower Exterior to Lower Mushroom", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, Maps.ForestGiantMushroom, "From Fungi (Low Middle)", Transitions.ForestLowerMushroomToLowerExterior), ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToLowerExterior: ShufflableExit("Fungi Forest Lower Mushroom to Lower Exterior", Regions.MushroomLower, TransitionBack(Regions.MushroomLowerExterior, Maps.FungiForest, "From G. Mush (Low Middle)", Transitions.ForestLowerExteriorToLowerMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToUpperMushroom: ShufflableExit("Fungi Forest Lower Exterior to Upper Mushroom", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, Maps.ForestGiantMushroom, "From Fungi (Middle)", Transitions.ForestUpperMushroomToLowerExterior), ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToLowerExterior: ShufflableExit("Fungi Forest Upper Mushroom to Lower Exterior", Regions.MushroomUpper, TransitionBack(Regions.MushroomLowerExterior, Maps.FungiForest, "From G. Mush (Middle)", Transitions.ForestLowerExteriorToUpperMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestUpperExteriorToUpperMushroom: ShufflableExit("Fungi Forest Upper Exterior to Upper Mushroom", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomUpper, Maps.ForestGiantMushroom, "From Fungi (High)", Transitions.ForestUpperMushroomToUpperExterior), ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToUpperExterior: ShufflableExit("Fungi Forest Upper Mushroom to Upper Exterior", Regions.MushroomUpper, TransitionBack(Regions.MushroomUpperExterior, Maps.FungiForest, "From G. Mush (High)", Transitions.ForestUpperExteriorToUpperMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestMainToBBlast: ShufflableExit("Fungi Forest Main to BBlast", Regions.MushroomLowerExterior, TransitionBack(Regions.ForestBaboonBlast, Maps.ForestBaboonBlast, "From Fungi Main"), ExitCategories.ForestExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.ForestExteriorToNight: ShufflableExit("Fungi Forest Night Exterior to Night Door", Regions.MushroomNightExterior, TransitionBack(Regions.MushroomNightDoor, Maps.ForestGiantMushroom, "From Fungi (High Middle)", Transitions.ForestNightToExterior), ExitCategories.ForestExterior),
    Transitions.ForestNightToExterior: ShufflableExit("Fungi Forest Night Door to Night Exterior", Regions.MushroomNightDoor, TransitionBack(Regions.MushroomNightExterior, Maps.FungiForest, "From G. Mush (High Middle)", Transitions.ForestExteriorToNight), ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToChunky: ShufflableExit("Fungi Forest Upper Exterior to Chunky Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomChunkyRoom, Maps.ForestChunkyFaceRoom, "From Fungi Main", Transitions.ForestChunkyToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestChunkyToExterior: ShufflableExit("Fungi Forest Chunky Room to Upper Exterior", Regions.MushroomChunkyRoom, TransitionBack(Regions.MushroomUpperExterior, Maps.FungiForest, "From Face Puzzle (Chunky)", Transitions.ForestExteriorToChunky)),
    Transitions.ForestExteriorToZingers: ShufflableExit("Fungi Forest Upper Exterior to Zinger Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyZingersRoom, Maps.ForestLankyZingersRoom, "From Fungi Main", Transitions.ForestZingersToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.ForestZingersToExterior: ShufflableExit("Fungi Forest Zinger Room to Upper Exterior", Regions.MushroomLankyZingersRoom, TransitionBack(Regions.MushroomUpperExterior, Maps.FungiForest, "From Zingers Room (Lanky)", Transitions.ForestExteriorToZingers)),
    Transitions.ForestExteriorToMushrooms: ShufflableExit("Fungi Forest Upper Exterior to Mushroom Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyMushroomsRoom, Maps.ForestLankyMushroomsRoom, "From Fungi Main", Transitions.ForestMushroomsToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.ForestMushroomsToExterior: ShufflableExit("Fungi Forest Mushroom Room to Upper Exterior", Regions.MushroomLankyMushroomsRoom, TransitionBack(Regions.MushroomUpperExterior, Maps.FungiForest, "From Mushrooms Room (Lanky)",Transitions.ForestExteriorToMushrooms)),
    Transitions.ForestTreeToAnthill: ShufflableExit("Fungi Forest Hollow Tree Area to Anthill", Regions.HollowTreeArea, TransitionBack(Regions.Anthill, Maps.ForestAnthill, "From Fungi Main", Transitions.ForestAnthillToTree), ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestAnthillToTree: ShufflableExit("Fungi Forest Anthill to Hollow Tree Area", Regions.Anthill, TransitionBack(Regions.HollowTreeArea, Maps.FungiForest, "From Anthill", Transitions.ForestTreeToAnthill)),
    Transitions.ForestMainToChunkyMill: ShufflableExit("Fungi Forest Main to Mill Chunky Door", Regions.MillArea, TransitionBack(Regions.MillChunkyArea, Maps.ForestMillBack, "From Fungi (PPunch Door)", Transitions.ForestChunkyMillToMain), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.ForestChunkyMillToMain: ShufflableExit("Fungi Forest Mill Chunky Door to Main", Regions.MillChunkyArea, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Mill (PPunch Door)", Transitions.ForestMainToChunkyMill), ExitCategories.ForestMill, entryKongs={Kongs.chunky}),
    Transitions.ForestMainToTinyMill: ShufflableExit("Fungi Forest Main to Mill Tiny Entrance", Regions.MillArea, TransitionBack(Regions.MillTinyArea, Maps.ForestMillBack, "From Fungi (Tiny Hole)", Transitions.ForestTinyMillToMain), ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestTinyMillToMain: ShufflableExit("Fungi Forest Mill Tiny Entrance to Main", Regions.MillTinyArea, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Mill (Tiny Hole)", Transitions.ForestMainToTinyMill), ExitCategories.ForestMill, entryKongs={Kongs.tiny}),
    Transitions.ForestMainToGrinder: ShufflableExit("Fungi Forest Main to Grinder Room", Regions.MillArea, TransitionBack(Regions.GrinderRoom, Maps.ForestMillFront, "From Fungi (Front)", Transitions.ForestGrinderToMain), ExitCategories.ForestExterior),
    Transitions.ForestGrinderToMain: ShufflableExit("Fungi Forest Grinder Room to Main", Regions.GrinderRoom, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Mill (Front)", Transitions.ForestMainToGrinder), ExitCategories.ForestGrinder),
    Transitions.ForestMainToRafters: ShufflableExit("Fungi Forest Main to Rafters", Regions.MillArea, TransitionBack(Regions.MillRafters, Maps.ForestRafters, "From Fungi Main", Transitions.ForestRaftersToMain), ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.ForestRaftersToMain: ShufflableExit("Fungi Forest Rafters to Main", Regions.MillRafters, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Rafters", Transitions.ForestMainToRafters)),
    Transitions.ForestMainToWinch: ShufflableExit("Fungi Forest Main to Winch Room", Regions.MillArea, TransitionBack(Regions.WinchRoom, Maps.ForestWinchRoom, "From Fungi Main", Transitions.ForestWinchToMain), ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}),
    Transitions.ForestWinchToMain: ShufflableExit("Fungi Forest Winch Room to Main", Regions.WinchRoom, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Winch", Transitions.ForestMainToWinch)),
    Transitions.ForestMainToAttic: ShufflableExit("Fungi Forest Main to Mill Attic", Regions.MillArea, TransitionBack(Regions.MillAttic, Maps.ForestMillAttic, "From Fungi Main", Transitions.ForestAtticToMain), ExitCategories.ForestExterior, regionKongs={Kongs.lanky}),
    Transitions.ForestAtticToMain: ShufflableExit("Fungi Forest Mill Attic to Main", Regions.MillAttic, TransitionBack(Regions.MillArea, Maps.FungiForest, "From Mill Attic", Transitions.ForestMainToAttic)),
    Transitions.ForestTinyMillToSpider: ShufflableExit("Fungi Forest Mill to Spider Boss", Regions.MillTinyArea, TransitionBack(Regions.SpiderRoom, Maps.ForestSpider, "From Mill (Rear)", Transitions.ForestSpiderToTinyMill), ExitCategories.ForestMill, regionKongs={Kongs.tiny}),
    Transitions.ForestSpiderToTinyMill: ShufflableExit("Fungi Forest Spider Boss to Mill", Regions.SpiderRoom, TransitionBack(Regions.MillTinyArea, Maps.ForestMillBack, "From Spider Boss", Transitions.ForestTinyMillToSpider), regionKongs={Kongs.tiny}),
    Transitions.ForestTinyMillToGrinder: ShufflableExit("Fungi Forest Tiny Entrance to Grinder Room", Regions.MillTinyArea, TransitionBack(Regions.GrinderRoom, Maps.ForestMillFront, "From Mill (Rear)", Transitions.ForestGrinderToTinyMill), ExitCategories.ForestMill, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestGrinderToTinyMill: ShufflableExit("Fungi Forest Grinder Room to Tiny Entrance", Regions.GrinderRoom, TransitionBack(Regions.MillTinyArea, Maps.ForestMillBack, "From Mill (Front)", Transitions.ForestTinyMillToGrinder), ExitCategories.ForestGrinder, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestMainToBarn: ShufflableExit("Fungi Forest Main to Thornvine Barn", Regions.ThornvineArea, TransitionBack(Regions.ThornvineBarn, Maps.ForestThornvineBarn, "From Fungi Main", Transitions.ForestBarnToMain), ExitCategories.ForestExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.ForestBarnToMain: ShufflableExit("Fungi Forest Thornvine Barn to Main", Regions.ThornvineBarn, TransitionBack(Regions.ThornvineArea, Maps.FungiForest, "From Thornvine Barn", Transitions.ForestMainToBarn)),
    
    # Crystal Caves Exits
    Transitions.CavesMainToRace: ShufflableExit("Crystal Caves Main to Beetle Race", Regions.CrystalCavesMain, TransitionBack(Regions.CavesLankyRace, Maps.CavesLankyRace, "From Caves Main", Transitions.CavesRaceToMain), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesRaceToMain: ShufflableExit("Crystal Caves Beetle Race to Main", Regions.CavesLankyRace, TransitionBack(Regions.CrystalCavesMain, Maps.CrystalCaves, "From Beetle Race", Transitions.CavesMainToRace)),
    Transitions.CavesMainToCastle: ShufflableExit("Crystal Caves Main to Frozen Castle", Regions.CrystalCavesMain, TransitionBack(Regions.FrozenCastle, Maps.CavesFrozenCastle, "From Caves Main", Transitions.CavesCastleToMain), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CavesCastleToMain: ShufflableExit("Crystal Caves Frozen Castle to Main", Regions.FrozenCastle, TransitionBack(Regions.CrystalCavesMain, Maps.CrystalCaves, "From Tile Flipping", Transitions.CavesMainToCastle)),
    Transitions.CavesIglooToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DI", Regions.IglooArea, TransitionBack(Regions.DonkeyIgloo, Maps.CavesDonkeyIgloo, "From Caves Main", Transitions.CavesDonkeyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToIgloo: ShufflableExit("Crystal Caves Donkey 5DI to Main", Regions.DonkeyIgloo, TransitionBack(Regions.IglooArea, Maps.CrystalCaves, "From DK 5DIgloo", Transitions.CavesIglooToDonkey)),
    Transitions.CavesIglooToDiddy: ShufflableExit("Crystal Caves Main to Diddy 5DI", Regions.IglooArea, TransitionBack(Regions.DiddyIgloo, Maps.CavesDiddyIgloo, "From Caves Main", Transitions.CavesDiddyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyToIgloo: ShufflableExit("Crystal Caves Diddy 5DI to Main", Regions.DiddyIgloo, TransitionBack(Regions.IglooArea, Maps.CrystalCaves, "From Diddy 5DIgloo", Transitions.CavesIglooToDiddy)),
    Transitions.CavesIglooToLanky: ShufflableExit("Crystal Caves Main to Lanky 5DI", Regions.IglooArea, TransitionBack(Regions.LankyIgloo, Maps.CavesLankyIgloo, "From Caves Main", Transitions.CavesLankyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToIgloo: ShufflableExit("Crystal Caves Lanky 5DI to Main", Regions.LankyIgloo, TransitionBack(Regions.IglooArea, Maps.CrystalCaves, "From Lanky 5DIgloo", Transitions.CavesIglooToLanky)),
    Transitions.CavesIglooToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DI", Regions.IglooArea, TransitionBack(Regions.TinyIgloo, Maps.CavesTinyIgloo, "From Caves Main", Transitions.CavesTinyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToIgloo: ShufflableExit("Crystal Caves Tiny 5DI to Main", Regions.TinyIgloo, TransitionBack(Regions.IglooArea, Maps.CrystalCaves, "From Tiny 5DIgloo", Transitions.CavesIglooToTiny)),
    Transitions.CavesIglooToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DI", Regions.IglooArea, TransitionBack(Regions.ChunkyIgloo, Maps.CavesChunkyIgloo, "From Caves Main", Transitions.CavesChunkyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToIgloo: ShufflableExit("Crystal Caves Chunky 5DI to Main", Regions.ChunkyIgloo, TransitionBack(Regions.IglooArea, Maps.CrystalCaves, "From Chunky 5DIgloo", Transitions.CavesIglooToChunky)),
    Transitions.CavesCabinToRotating: ShufflableExit("Crystal Caves Main to Rotating Cabin", Regions.CabinArea, TransitionBack(Regions.RotatingCabin, Maps.CavesRotatingCabin, "From Caves Main", Transitions.CavesRotatingToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesRotatingToCabin: ShufflableExit("Crystal Caves Rotating Cabin to Main", Regions.RotatingCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Rotating Cabin", Transitions.CavesCabinToRotating)),
    Transitions.CavesCabinToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DC", Regions.CabinArea, TransitionBack(Regions.DonkeyCabin, Maps.CavesDonkeyCabin, "From Caves Main", Transitions.CavesDonkeyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToCabin: ShufflableExit("Crystal Caves Donkey 5DC to Main", Regions.DonkeyCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From DK 5DCabin", Transitions.CavesCabinToDonkey)),
    Transitions.CavesCabinToDiddyLower: ShufflableExit("Crystal Caves Main to Diddy Lower 5DC", Regions.CabinArea, TransitionBack(Regions.DiddyLowerCabin, Maps.CavesDiddyLowerCabin, "From Caves Main", Transitions.CavesDiddyLowerToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyLowerToCabin: ShufflableExit("Crystal Caves Diddy Lower 5DC to Main", Regions.DiddyLowerCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Diddy Lower 5DCabin", Transitions.CavesCabinToDiddyLower)),
    Transitions.CavesCabinToDiddyUpper: ShufflableExit("Crystal Caves Main to Diddy Upper 5DC", Regions.CabinArea, TransitionBack(Regions.DiddyUpperCabin, Maps.CavesDiddyUpperCabin, "From Caves Main", Transitions.CavesDiddyUpperToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, regionKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyUpperToCabin: ShufflableExit("Crystal Caves Diddy Upper 5DC to Main", Regions.DiddyUpperCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Diddy Upper 5DCabin", Transitions.CavesCabinToDiddyUpper)),
    Transitions.CavesCabinToLanky: ShufflableExit("Crystal Caves Main to Lanky 1DC", Regions.CabinArea, TransitionBack(Regions.LankyCabin, Maps.CavesLankyCabin, "From Caves Main", Transitions.CavesLankyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToCabin: ShufflableExit("Crystal Caves Lanky 1DC to Main", Regions.LankyCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Lanky Cabin", Transitions.CavesCabinToLanky)),
    Transitions.CavesCabinToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DC", Regions.CabinArea, TransitionBack(Regions.TinyCabin, Maps.CavesTinyCabin, "From Caves Main", Transitions.CavesTinyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToCabin: ShufflableExit("Crystal Caves Tiny 5DC to Main", Regions.TinyCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Tiny 5DCabin", Transitions.CavesCabinToTiny)),
    Transitions.CavesCabinToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DC", Regions.CabinArea, TransitionBack(Regions.ChunkyCabin, Maps.CavesChunkyCabin, "From Caves Main", Transitions.CavesChunkyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToCabin: ShufflableExit("Crystal Caves Chunky 5DC to Main", Regions.ChunkyCabin, TransitionBack(Regions.CabinArea, Maps.CrystalCaves, "From Chunky 5DCabin", Transitions.CavesCabinToChunky)),
    Transitions.CavesMainToBBlast: ShufflableExit("Crystal Caves Main to BBlast", Regions.CrystalCavesMain, TransitionBack(Regions.CavesBaboonBlast, Maps.CavesBaboonBlast, "From Caves Main"), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    
    # Creepy Castle Exits
    Transitions.CastleMainToBBlast: ShufflableExit("Creepy Castle Main to BBlast", Regions.CreepyCastleMain, TransitionBack(Regions.CastleBaboonBlast, Maps.CastleBaboonBlast, "From Castle Main"), ExitCategories.CastleExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}, move=True),
    Transitions.CastleMainToTree: ShufflableExit("Creepy Castle Main to Tree", Regions.CreepyCastleMain, TransitionBack(Regions.CastleTree, Maps.CastleTree, "From Castle Main", Transitions.CastleTreeToMain), ExitCategories.CastleExterior, regionKongs={Kongs.donkey, Kongs.chunky}),
    Transitions.CastleTreeToMain: ShufflableExit("Creepy Castle Tree to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Tree (Entrance)", Transitions.CastleMainToTree)),
    Transitions.CastleTreeDrainToMain: ShufflableExit("Creepy Castle Tree Drain to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Tree (Drain)"), entryKongs={Kongs.donkey}),
    Transitions.CastleMainToLibraryStart: ShufflableExit("Creepy Castle Main to Library", Regions.CreepyCastleMain, TransitionBack(Regions.Library, Maps.CastleLibrary, "From Castle Main (Start)", Transitions.CastleLibraryStartToMain), ExitCategories.CastleExterior, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.CastleLibraryStartToMain: ShufflableExit("Creepy Castle Library Start to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Library (Start)", Transitions.CastleMainToLibraryStart)),
    Transitions.CastleMainToLibraryEnd: ShufflableExit("Creepy Castle Main to Library Back Door", Regions.CreepyCastleMain, TransitionBack(Regions.Library, Maps.CastleLibrary, "From Castle Main (End)"), ExitCategories.CastleExterior),
    Transitions.CastleLibraryEndToMain: ShufflableExit("Creepy Castle Library End to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Library (End)"), entryKongs={Kongs.donkey}),
    Transitions.CastleMainToBallroom: ShufflableExit("Creepy Castle Main to Ballroom", Regions.CreepyCastleMain, TransitionBack(Regions.Ballroom, Maps.CastleBallroom, "From Castle Main", Transitions.CastleBallroomToMain), ExitCategories.CastleExterior, regionKongs={Kongs.diddy, Kongs.tiny}),
    Transitions.CastleBallroomToMain: ShufflableExit("Creepy Castle Ballroom to Main", Regions.Ballroom, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Ballroom", Transitions.CastleMainToBallroom), ExitCategories.CastleBallroom),
    Transitions.CastleMainToTower: ShufflableExit("Creepy Castle Main to Tower", Regions.CreepyCastleMain, TransitionBack(Regions.Tower, Maps.CastleTower, "From Castle Main", Transitions.CastleTowerToMain), ExitCategories.CastleExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CastleTowerToMain: ShufflableExit("Creepy Castle Tower to Main", Regions.Tower, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Tower", Transitions.CastleMainToTower)),
    Transitions.CastleMainToGreenhouse: ShufflableExit("Creepy Castle Main to Greenhouse", Regions.CreepyCastleMain, TransitionBack(Regions.Greenhouse, Maps.CastleGreenhouse, "From Castle Main", Transitions.CastleGreenhouseStartToMain), ExitCategories.CastleExterior, entryKongs={Kongs.lanky}, regionKongs={Kongs.lanky}),
    Transitions.CastleGreenhouseStartToMain: ShufflableExit("Creepy Castle Greenhouse to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Greenhouse (Start)", Transitions.CastleMainToGreenhouse)),
    Transitions.CastleGreenhouseEndToMain: ShufflableExit("Creepy Castle Greenhouse to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Greenhouse (End)"), entryKongs={Kongs.lanky}),
    Transitions.CastleMainToTrash: ShufflableExit("Creepy Castle Main to Trash Can", Regions.CreepyCastleMain, TransitionBack(Regions.TrashCan, Maps.CastleTrashCan, "From Castle Main", Transitions.CastleTrashToMain), ExitCategories.CastleExterior, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.CastleTrashToMain: ShufflableExit("Creepy Castle Trash Can to Main", Regions.TrashCan, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Trash Can", Transitions.CastleMainToTrash)),
    Transitions.CastleMainToShed: ShufflableExit("Creepy Castle Main to Shed", Regions.CreepyCastleMain, TransitionBack(Regions.Shed, Maps.CastleShed, "From Castle Main", Transitions.CastleShedToMain), ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}, move=True),
    Transitions.CastleShedToMain: ShufflableExit("Creepy Castle Shed to Main", Regions.Shed, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Shed", Transitions.CastleMainToShed)),
    Transitions.CastleMainToMuseum: ShufflableExit("Creepy Castle Main to Museum", Regions.CreepyCastleMain, TransitionBack(Regions.Museum, Maps.CastleMuseum, "From Castle Main", Transitions.CastleMuseumToMain), ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.CastleMuseumToMain: ShufflableExit("Creepy Castle Museum to Main", Regions.Museum, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Museum", Transitions.CastleMainToMuseum)),
    Transitions.CastleMainToLower: ShufflableExit("Creepy Castle Main to Lower Cave", Regions.CreepyCastleMain, TransitionBack(Regions.LowerCave, Maps.CastleLowerCave, "From Castle Main", Transitions.CastleLowerToMain), ExitCategories.CastleExterior),
    Transitions.CastleLowerToMain: ShufflableExit("Creepy Castle Lower Cave to Main", Regions.LowerCave, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Lower Cave", Transitions.CastleMainToLower), ExitCategories.CastleLower),
    Transitions.CastleMainToUpper: ShufflableExit("Creepy Castle Main to Upper Cave", Regions.CreepyCastleMain, TransitionBack(Regions.UpperCave, Maps.CastleUpperCave, "From Castle (Rear)", Transitions.CastleUpperToMain), ExitCategories.CastleExterior),
    Transitions.CastleUpperToMain: ShufflableExit("Creepy Castle Upper Cave to Main", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Tunnel (Rear)", Transitions.CastleMainToUpper), ExitCategories.CastleUpper),
    Transitions.CastleWaterfallToUpper: ShufflableExit("Creepy Castle Waterfall to Upper Cave", Regions.CastleWaterfall, TransitionBack(Regions.UpperCave, Maps.CastleUpperCave, "From Castle (Front)", Transitions.CastleUpperToWaterfall), ExitCategories.CastleExterior),
    Transitions.CastleUpperToWaterfall: ShufflableExit("Creepy Castle Upper Cave to Waterfall", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, Maps.CreepyCastle, "From Tunnel (Front)", Transitions.CastleWaterfallToUpper), ExitCategories.CastleUpper),
    Transitions.CastleBallroomToMuseum: ShufflableExit("Creepy Castle Ballroom to Museum", Regions.Ballroom, TransitionBack(Regions.MuseumBehindGlass, Maps.CastleMuseum, "From Ballroom (Monkeyport)", Transitions.CastleMuseumToBallroom), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleMuseumToBallroom: ShufflableExit("Creepy Castle Museum to Ballroom", Regions.MuseumBehindGlass, TransitionBack(Regions.Ballroom, Maps.CastleBallroom, "From Museum (Monkeyport)", Transitions.CastleBallroomToMuseum), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleMuseumToCarRace: ShufflableExit("Creepy Castle Museum to Car Race", Regions.MuseumBehindGlass, TransitionBack(Regions.CastleTinyRace, Maps.CastleTinyRace, "From Museum", Transitions.CastleRaceToMuseum), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleRaceToMuseum: ShufflableExit("Creepy Castle Car Race to Museum", Regions.CastleTinyRace, TransitionBack(Regions.MuseumBehindGlass, Maps.CastleMuseum, "From Car Race", Transitions.CastleMuseumToCarRace), regionKongs={Kongs.tiny}),
    Transitions.CastleLowerToCrypt: ShufflableExit("Creepy Castle Lower Cave to Crypt", Regions.LowerCave, TransitionBack(Regions.Crypt, Maps.CastleCrypt, "From Lower Cave", Transitions.CastleCryptToLower), ExitCategories.CastleLower, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}, regionKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleCryptToLower: ShufflableExit("Creepy Castle Crypt to Lower Cave", Regions.Crypt, TransitionBack(Regions.LowerCave, Maps.CastleLowerCave, "From Crypt (DK/Diddy/Chunky)", Transitions.CastleLowerToCrypt), ExitCategories.CastleCrypt),
    Transitions.CastleLowerToMausoleum: ShufflableExit("Creepy Castle Lower Cave to Mausoleum", Regions.LowerCave, TransitionBack(Regions.Mausoleum, Maps.CastleMausoleum, "From Lower Cave", Transitions.CastleMausoleumToLower), ExitCategories.CastleLower, entryKongs={Kongs.lanky, Kongs.tiny}, regionKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleMausoleumToLower: ShufflableExit("Creepy Castle Mausoleum to Lower cave", Regions.Mausoleum, TransitionBack(Regions.LowerCave, Maps.CastleLowerCave, "From Mausoleum (Lanky/Tiny)", Transitions.CastleLowerToMausoleum)),
    Transitions.CastleCryptToCarts: ShufflableExit("Creepy Castle Crypt to Minecarts", Regions.Crypt, TransitionBack(Regions.CastleMinecarts, Maps.CastleMinecarts, "From Crypt", Transitions.CastleCartsToCrypt), ExitCategories.CastleCrypt, entryKongs={Kongs.donkey}, regionKongs={Kongs.donkey}),
    Transitions.CastleCartsToCrypt: ShufflableExit("Creepy Castle Minecarts to Crypt", Regions.CastleMinecarts, TransitionBack(Regions.Crypt, Maps.CastleCrypt, "From Minecart", Transitions.CastleCryptToCarts)),
    Transitions.CastleUpperToDungeon: ShufflableExit("Creepy Castle Upper Cave to Dungeon", Regions.UpperCave, TransitionBack(Regions.Dungeon, Maps.CastleDungeon, "From Tunnel", Transitions.CastleDungeonToUpper), ExitCategories.CastleUpper),
    Transitions.CastleDungeonToUpper: ShufflableExit("Creepy Castle Dungeon to Upper Cave", Regions.Dungeon, TransitionBack(Regions.UpperCave, Maps.CastleUpperCave, "From Dungeon", Transitions.CastleUpperToDungeon)),
}
