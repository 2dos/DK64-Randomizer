# fmt: off
"""Shufflable exit class and list file."""

from randomizer.Enums.ExitCategories import ExitCategories
from randomizer.Enums.Transitions import Transitions
from randomizer.Enums.Regions import Regions
from randomizer.Enums.Kongs import Kongs
from randomizer.LogicClasses import Region, TransitionBack


class ShufflableExit:
    """Class that stores data about an exit to be shuffled."""

    def __init__(self, name, region, back, category=None, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.lanky, Kongs.tiny, Kongs.chunky}, regionKongs={}, move=False):
        """Initialize with given parameters."""
        self.name = name
        self.region = region
        self.back = back
        self.category = category
        self.entryKongs = entryKongs  # Indicates either need to be one of a certain set of kongs to gain access to this (front)
        self.regionKongs = regionKongs  # Indicates need to be a certain kong or kongs in this area. Should only apply if the region doesn't have a tag barrel
        self.move = move  # Indicates this exit needs a kong-specific move to access, so it's even more restrictive
        # Here dest is the entrance to go to, rather than just the target region
        # Initialized as none until it gets shuffled
        self.dest = None
        self.shuffled = False
        self.toBeShuffled = False


ShufflableExits = {
    # Level Exits
    Transitions.IslesToJapes: ShufflableExit("DK Isles to Jungle Japes", Regions.JungleJapesLobby, TransitionBack(Regions.JungleJapesMain, "From Japes Lobby", Transitions.JapesToIsles), ExitCategories.JapesLobby),
    Transitions.JapesToIsles: ShufflableExit("Jungle Japes to DK Isles", Regions.JungleJapesMain, TransitionBack(Regions.JungleJapesLobby, "From Japes", Transitions.IslesToJapes), ExitCategories.JapesExterior),
    Transitions.IslesToAztec: ShufflableExit("DK Isles to Angry Aztec", Regions.AngryAztecLobby, TransitionBack(Regions.AngryAztecStart, "From Aztec Lobby", Transitions.AztecToIsles), ExitCategories.AztecLobby),
    Transitions.AztecToIsles: ShufflableExit("Angry Aztec to DK Isles", Regions.AngryAztecStart, TransitionBack(Regions.AngryAztecLobby, "From Aztec", Transitions.IslesToAztec), ExitCategories.AztecExterior),
    Transitions.IslesToFactory: ShufflableExit("DK Isles to Frantic Factory", Regions.FranticFactoryLobby, TransitionBack(Regions.FranticFactoryStart, "From Factory Lobby", Transitions.FactoryToIsles), ExitCategories.FactoryLobby),
    Transitions.FactoryToIsles: ShufflableExit("Frantic Factory to DK Isles", Regions.FranticFactoryStart, TransitionBack(Regions.FranticFactoryLobby, "From Factory", Transitions.IslesToFactory), ExitCategories.FactoryExterior),
    Transitions.IslesToGalleon: ShufflableExit("DK Isles to Gloomy Galleon", Regions.GloomyGalleonLobby, TransitionBack(Regions.GloomyGalleonStart, "From Galleon Lobby", Transitions.GalleonToIsles), ExitCategories.GalleonLobby),
    Transitions.GalleonToIsles: ShufflableExit("Gloomy Galleon to DK Isles", Regions.GloomyGalleonStart, TransitionBack(Regions.GloomyGalleonLobby, "From Galleon", Transitions.IslesToGalleon), ExitCategories.GalleonExterior),
    Transitions.IslesToForest: ShufflableExit("DK Isles to Fungi Forest", Regions.FungiForestLobby, TransitionBack(Regions.FungiForestStart, "From Fungi Lobby", Transitions.ForestToIsles), ExitCategories.ForestLobby),
    Transitions.ForestToIsles: ShufflableExit("Fungi Forest to DK Isles", Regions.FungiForestStart, TransitionBack(Regions.FungiForestLobby, "From Fungi", Transitions.IslesToForest), ExitCategories.ForestExterior),
    Transitions.IslesToCaves: ShufflableExit("DK Isles to Crystal Caves", Regions.CrystalCavesLobby, TransitionBack(Regions.CrystalCavesMain, "From Caves Lobby", Transitions.CavesToIsles), ExitCategories.CavesLobby),
    Transitions.CavesToIsles: ShufflableExit("Crystal Caves to DK Isles", Regions.CrystalCavesMain, TransitionBack(Regions.CrystalCavesLobby, "From Caves", Transitions.IslesToCaves), ExitCategories.CavesExterior),
    Transitions.IslesToCastle: ShufflableExit("DK Isles to Creepy Castle", Regions.CreepyCastleLobby, TransitionBack(Regions.CreepyCastleMain, "From Castle Lobby", Transitions.CastleToIsles), ExitCategories.CastleLobby),
    Transitions.CastleToIsles: ShufflableExit("Creepy Castle to DK Isles", Regions.CreepyCastleMain, TransitionBack(Regions.CreepyCastleLobby, "From Castle", Transitions.IslesToCastle), ExitCategories.CastleExterior),
    
    # DK Isles Exits
    Transitions.IslesMainToFairy: ShufflableExit("DK Isles Main to Banana Fairy Queen", Regions.IslesMain, TransitionBack(Regions.BananaFairyRoom, "From DK Isles", Transitions.IslesFairyToMain), ExitCategories.IslesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.IslesFairyToMain: ShufflableExit("DK Isles Banana Fairy Queen to Main", Regions.BananaFairyRoom, TransitionBack(Regions.IslesMain, "From Banana Fairy Isle", Transitions.IslesMainToFairy), regionKongs={Kongs.tiny}),
    Transitions.IslesMainToSnideRoom: ShufflableExit("DK Isles Crocodile Isle to Snide Room", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.IslesSnideRoom, "From DK Isles", Transitions.IslesSnideRoomToMain), ExitCategories.IslesExterior),
    Transitions.IslesSnideRoomToMain: ShufflableExit("DK Isles Snide Room to Crocodile Isle", Regions.IslesSnideRoom, TransitionBack(Regions.CrocodileIsleBeyondLift, "From Snide's Room", Transitions.IslesMainToSnideRoom)),
    Transitions.IslesMainToJapesLobby: ShufflableExit("DK Isles Main to Jungle Japes Lobby", Regions.IslesMain, TransitionBack(Regions.JungleJapesLobby, "From DK Isles", Transitions.IslesJapesLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesJapesLobbyToMain: ShufflableExit("DK Isles Jungle Japes Lobby to Main", Regions.JungleJapesLobby, TransitionBack(Regions.IslesMain, "From Japes Lobby", Transitions.IslesMainToJapesLobby), ExitCategories.JapesLobby),
    Transitions.IslesMainToAztecLobby: ShufflableExit("DK Isles Main to Angry Aztec Lobby", Regions.IslesMain, TransitionBack(Regions.AngryAztecLobby, "From DK Isles", Transitions.IslesAztecLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesAztecLobbyToMain: ShufflableExit("DK Isles Angry Aztec Lobby to Main", Regions.AngryAztecLobby, TransitionBack(Regions.IslesMain, "From Aztec Lobby", Transitions.IslesMainToAztecLobby), ExitCategories.AztecLobby),
    Transitions.IslesMainToFactoryLobby: ShufflableExit("DK Isles Main to Frantic Factory Lobby", Regions.CrocodileIsleBeyondLift, TransitionBack(Regions.FranticFactoryLobby, "From DK Isles", Transitions.IslesFactoryLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesFactoryLobbyToMain: ShufflableExit("DK Isles Frantic Factory Lobby to Main", Regions.FranticFactoryLobby, TransitionBack(Regions.CrocodileIsleBeyondLift, "From Factory Lobby", Transitions.IslesMainToFactoryLobby), ExitCategories.FactoryLobby),
    Transitions.IslesMainToGalleonLobby: ShufflableExit("DK Isles Main to Gloomy Galleon Lobby", Regions.IslesMain, TransitionBack(Regions.GloomyGalleonLobby, "From DK Isles",Transitions.IslesGalleonLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesGalleonLobbyToMain: ShufflableExit("DK Isles Gloomy Galleon Lobby to Main", Regions.GloomyGalleonLobby, TransitionBack(Regions.IslesMain, "From Galleon Lobby", Transitions.IslesMainToGalleonLobby), ExitCategories.GalleonLobby),
    Transitions.IslesMainToForestLobby: ShufflableExit("DK Isles Cabin Isle to Fungi Forest Lobby", Regions.CabinIsle, TransitionBack(Regions.FungiForestLobby, "From DK Isles", Transitions.IslesForestLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesForestLobbyToMain: ShufflableExit("DK Isles Fungi Forest Lobby to Cabin Isle", Regions.FungiForestLobby, TransitionBack(Regions.IslesMain, "From Fungi Lobby", Transitions.IslesMainToForestLobby), ExitCategories.ForestLobby),
    Transitions.IslesMainToCavesLobby: ShufflableExit("DK Isles Main to Crystal Caves Lobby", Regions.IslesMain, TransitionBack(Regions.CrystalCavesLobby, "From DK Isles", Transitions.IslesCavesLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesCavesLobbyToMain: ShufflableExit("DK Isles Crystal Caves Lobby to Main", Regions.CrystalCavesLobby, TransitionBack(Regions.IslesMain, "From Caves Lobby", Transitions.IslesMainToCavesLobby), ExitCategories.CavesLobby),
    Transitions.IslesMainToCastleLobby: ShufflableExit("DK Isles Main to Creepy Castle Lobby", Regions.IslesMain, TransitionBack(Regions.CreepyCastleLobby, "From DK Isles",Transitions.IslesCastleLobbyToMain), ExitCategories.IslesExterior),
    Transitions.IslesCastleLobbyToMain: ShufflableExit("DK Isles Creepy Castle Lobby to Main", Regions.CreepyCastleLobby, TransitionBack(Regions.IslesMain, "From Castle Lobby", Transitions.IslesMainToCastleLobby), ExitCategories.CastleLobby),
    
    # Jungle Japes Exits
    Transitions.JapesMainToMine: ShufflableExit("Jungle Japes Main to Mine", Regions.JungleJapesMain, TransitionBack(Regions.Mine, "From Japes Main", Transitions.JapesMineToMain), ExitCategories.JapesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.JapesMineToMain: ShufflableExit("Jungle Japes Mine to Main", Regions.Mine, TransitionBack(Regions.JungleJapesMain, "From Mountain", Transitions.JapesMainToMine), ExitCategories.JapesMine, regionKongs={Kongs.diddy}),
    Transitions.JapesMainToLankyCave: ShufflableExit("Jungle Japes Main to Lanky Cave", Regions.IslesMain, TransitionBack(Regions.JapesLankyCave, "From Japes Main", Transitions.JapesLankyCaveToMain), ExitCategories.JapesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.JapesLankyCaveToMain: ShufflableExit("Jungle Japes Lanky Cave to Main", Regions.JapesLankyCave, TransitionBack(Regions.JungleJapesMain, "From Painting Room", Transitions.JapesMainToLankyCave), regionKongs={Kongs.lanky}),
    Transitions.JapesMainToCatacomb: ShufflableExit("Jungle Japes Main to Catacomb", Regions.JungleJapesMain, TransitionBack(Regions.JapesCatacomb, "From Japes Main",Transitions.JapesCatacombToMain), ExitCategories.JapesExterior, entryKongs={Kongs.chunky}),
    Transitions.JapesCatacombToMain: ShufflableExit("Jungle Japes Catacomb to Main", Regions.JapesCatacomb, TransitionBack(Regions.JungleJapesMain,	"From Underground", Transitions.JapesMainToCatacomb), regionKongs={Kongs.chunky}),
    Transitions.JapesMainToTinyHive: ShufflableExit("Jungle Japes Main to Tiny Hive", Regions.JapesBeyondFeatherGate, TransitionBack(Regions.TinyHive, "From Japes Main", Transitions.JapesTinyHiveToMain), ExitCategories.JapesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.JapesTinyHiveToMain: ShufflableExit("Jungle Japes Tiny Hive to Main", Regions.TinyHive, TransitionBack(Regions.JapesBeyondFeatherGate, "From Beehive", Transitions.JapesMainToTinyHive), regionKongs={Kongs.tiny}),
    # Transitions.JapesMainToBBlast: ShufflableExit("Jungle Japes Main to BBlast", Regions.JungleJapesMain, TransitionBack(Regions.JapesBBlast))
    # TransitionBack(Regions.JungleJapesMain, "From Minecart Exit"),
    
    # Angry Aztec Exits
    Transitions.AztecTempleToStart: ShufflableExit("Angry Aztec Temple to Start", Regions.TempleStart, TransitionBack(Regions.AngryAztecMain, "From Tiny Temple")),
    Transitions.AztecMainToDonkey: ShufflableExit("Angry Aztec Main to Donkey 5DT", Regions.AngryAztecMain, TransitionBack(Regions.DonkeyTemple, "From Aztec Main", Transitions.AztecDonkeyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.AztecDonkeyToMain: ShufflableExit("Angry Aztec Donkey 5DT to Main", Regions.DonkeyTemple, TransitionBack(Regions.AngryAztecMain, "From DK 5DTemple", Transitions.AztecMainToDonkey), regionKongs={Kongs.donkey}),
    Transitions.AztecMainToDiddy: ShufflableExit("Angry Aztec Main to Diddy 5DT", Regions.AngryAztecMain, TransitionBack(Regions.DiddyTemple, "From Aztec Main", Transitions.AztecDiddyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.AztecDiddyToMain: ShufflableExit("Angry Aztec Diddy 5DT to Main", Regions.DiddyTemple, TransitionBack(Regions.AngryAztecMain, "From Diddy 5DTemple", Transitions.AztecMainToDiddy), regionKongs={Kongs.diddy}),
    Transitions.AztecMainToLanky: ShufflableExit("Angry Aztec Main to Lanky 5DT", Regions.AngryAztecMain, TransitionBack(Regions.LankyTemple, "From Aztec Main", Transitions.AztecLankyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.AztecLankyToMain: ShufflableExit("Angry Aztec Lanky 5DT to Main", Regions.LankyTemple, TransitionBack(Regions.AngryAztecMain, "From Lanky 5DTemple", Transitions.AztecMainToLanky), regionKongs={Kongs.lanky}),
    Transitions.AztecMainToTiny: ShufflableExit("Angry Aztec Main to Tiny 5DT", Regions.AngryAztecMain, TransitionBack(Regions.TinyTemple, "From Aztec Main", Transitions.AztecTinyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.AztecTinyToMain: ShufflableExit("Angry Aztec Tiny 5DT To Main", Regions.TinyTemple, TransitionBack(Regions.AngryAztecMain, "From Tiny 5DTemple", Transitions.AztecMainToTiny), regionKongs={Kongs.tiny}),
    Transitions.AztecMainToChunky: ShufflableExit("Angry Aztec Main to Chunky 5DT", Regions.AngryAztecMain, TransitionBack(Regions.ChunkyTemple, "From Aztec Main", Transitions.AztecChunkyToMain), ExitCategories.AztecExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.AztecChunkyToMain: ShufflableExit("Angry Aztec Chunky 5DT to Main", Regions.ChunkyTemple, TransitionBack(Regions.AngryAztecMain, "From Chunky 5DTemple", Transitions.AztecMainToChunky), regionKongs={Kongs.chunky}),
    Transitions.AztecMainToRace: ShufflableExit("Angry Aztec Main to Beetle Race", Regions.AngryAztecMain, TransitionBack(Regions.AztecTinyRace, "From Aztec Main", Transitions.AztecRaceToMain), ExitCategories.AztecExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.AztecRaceToMain: ShufflableExit("Angry Aztec Beetle Race to Main", Regions.AztecTinyRace, TransitionBack(Regions.AngryAztecMain, "From Beetle Race", Transitions.AztecMainToRace), regionKongs={Kongs.tiny}),
    Transitions.AztecLlamaToMain: ShufflableExit("Angry Aztec Llama Temple to Main", Regions.LlamaTemple, TransitionBack(Regions.AngryAztecMain, "From Llama Temple")),
    # Frantic Factory Exits
    Transitions.FactoryRandDToRace: ShufflableExit("Frantic Factory R&D to Car Race", Regions.RandD, TransitionBack(Regions.FactoryTinyRace, "From Factory Main", Transitions.FactoryRaceToRandD), ExitCategories.FactoryExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.FactoryRaceToRandD: ShufflableExit("Frantic Factory Car Race to R&D", Regions.FactoryTinyRace, TransitionBack(Regions.FactoryTinyRaceLobby, "From Car Race", Transitions.FactoryRandDToRace), regionKongs={Kongs.tiny}),
    Transitions.FactoryChunkyRoomToPower: ShufflableExit("Frantic Factory Chunky Room to Power Room", Regions.ChunkyRoomPlatform, TransitionBack(Regions.PowerHut, "From Factory Main", Transitions.FactoryPowerToChunkyRoom), ExitCategories.FactoryExterior, entryKongs={Kongs.donkey}),
    Transitions.FactoryPowerToChunkyRoom: ShufflableExit("Frantic Factory Power Room to Chunky Room", Regions.PowerHut, TransitionBack(Regions.BeyondHatch, "From Power Shed", Transitions.FactoryChunkyRoomToPower), regionKongs={Kongs.donkey}),
    Transitions.FactoryBeyondHatchToInsideCore: ShufflableExit("Frantic Factory Beyond Hatch to Inside Core", Regions.BeyondHatch, TransitionBack(Regions.InsideCore, "From Factory Main", Transitions.FactoryInsideCoreToBeyondHatch), ExitCategories.FactoryExterior),
    Transitions.FactoryInsideCoreToBeyondHatch: ShufflableExit("Frantic Factory Inside Core to Beyond Hatch", Regions.InsideCore, TransitionBack(Regions.BeyondHatch, "From Crusher Room", Transitions.FactoryBeyondHatchToInsideCore), regionKongs={Kongs.donkey, Kongs.lanky}),
    # Gloomy Galleon Exits
    Transitions.GalleonLighthouseAreaToLighthouse: ShufflableExit("Gloomy Galleon Main to Lighthouse", Regions.LighthouseArea, TransitionBack(Regions.Lighthouse, "From Galleon Main", Transitions.GalleonLighthouseToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}),
    Transitions.GalleonLighthouseToLighthouseArea: ShufflableExit("Gloomy Galleon Lighthouse to Main", Regions.Lighthouse, TransitionBack(Regions.LighthouseArea, "From Lighthouse", Transitions.GalleonLighthouseAreaToLighthouse), regionKongs={Kongs.donkey}),
    Transitions.GalleonLighthousAreaToMermaid: ShufflableExit("Gloomy Galleon Main to Mermaid Room", Regions.LighthouseArea, TransitionBack(Regions.MermaidRoom, "From Galleon Main", Transitions.GalleonMermaidToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonMermaidToLighthouseArea: ShufflableExit("Gloomy Galleon Mermaid Room to Main", Regions.MermaidRoom, TransitionBack(Regions.LighthouseArea, "From Mermaid", Transitions.GalleonLighthousAreaToMermaid), regionKongs={Kongs.tiny}),
    Transitions.GalleonLighthouseAreaToSickBay: ShufflableExit("Gloomy Galleon Main to Sick Bay", Regions.LighthouseArea, TransitionBack(Regions.SickBay, "From Galleon Main", Transitions.GalleonSickBayToLighthouseArea), ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.GalleonSickBayToLighthouseArea: ShufflableExit("Gloomy Galleon Sick Bay to Main", Regions.SickBay, TransitionBack(Regions.LighthouseArea, "From Seasick Ship", Transitions.GalleonLighthouseAreaToSickBay), regionKongs={Kongs.chunky}),
    Transitions.GalleonShipyardToSeal: ShufflableExit("Gloomy Galleon Main to Seal Race", Regions.Shipyard, TransitionBack(Regions.Submarine, "From Galleon Main", Transitions.GalleonSealToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.GalleonSealToShipyard: ShufflableExit("Gloomy Galleon Seal Race to Main", Regions.SealRace, TransitionBack(Regions.Shipyard, "From Seal Race", Transitions.GalleonShipyardToSeal), regionKongs={Kongs.donkey}),
    Transitions.GalleonShipyardToSubmarine: ShufflableExit("Gloomy Galleon Main to Submarine", Regions.Shipyard, TransitionBack(Regions.Submarine, "From Galleon Main", Transitions.GalleonSubmarineToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSubmarineToShipyard: ShufflableExit("Gloomy Galleon Submarine to Main", Regions.Submarine, TransitionBack(Regions.Shipyard, "From Submarine", Transitions.GalleonShipyardToSubmarine), regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToLanky: ShufflableExit("Gloomy Galleon Main to Lanky 2DS", Regions.Shipyard, TransitionBack(Regions.LankyShip, "From Galleon Main", Transitions.GalleonLankyToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}),
    Transitions.GalleonLankyToShipyard: ShufflableExit("Gloomy Galleon Lanky 2DS to Main", Regions.LankyShip, TransitionBack(Regions.Shipyard, "From Lanky 2DShip", Transitions.GalleonShipyardToLanky), regionKongs={Kongs.lanky}),
    Transitions.GalleonShipyardToTiny: ShufflableExit("Gloomy Galleon Main to Tiny 2DS", Regions.Shipyard, TransitionBack(Regions.TinyShip, "From Galleon Main", Transitions.GalleonTinyToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}),
    Transitions.GalleonTinyToShipyard: ShufflableExit("Gloomy Galleon Tiny 2DS to Main", Regions.TinyShip, TransitionBack(Regions.Shipyard, "From Tiny 2DShip", Transitions.GalleonShipyardToTiny), regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToBongos: ShufflableExit("Gloomy Galleon Main to Donkey 5DS", Regions.Shipyard, TransitionBack(Regions.BongosShip, "From Galleon Main", Transitions.GalleonBongosToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.GalleonBongosToShipyard: ShufflableExit("Gloomy Galleon Donkey 5DS to Main", Regions.BongosShip, TransitionBack(Regions.Shipyard, "From Donkey 5DShip", Transitions.GalleonShipyardToBongos), regionKongs={Kongs.donkey}),
    Transitions.GalleonShipyardToGuitar: ShufflableExit("Gloomy Galleon Main to Diddy 5DS", Regions.Shipyard, TransitionBack(Regions.GuitarShip, "From Galleon Main", Transitions.GalleonGuitarToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.GalleonGuitarToShipyard: ShufflableExit("Gloomy Galleon Diddy 5DS to Main", Regions.GuitarShip, TransitionBack(Regions.Shipyard, "From Diddy 5DShip", Transitions.GalleonShipyardToGuitar), regionKongs={Kongs.diddy}),
    Transitions.GalleonShipyardToTrombone: ShufflableExit("Gloomy Galleon Main to Lanky 5DS", Regions.Shipyard, TransitionBack(Regions.TromboneShip, "From Galleon Main", Transitions.GalleonTromboneToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.GalleonTromboneToShipyard: ShufflableExit("Gloomy Galleon Lanky 5DS to Main", Regions.TromboneShip, TransitionBack(Regions.Shipyard, "From Lanky 5DShip", Transitions.GalleonShipyardToTrombone), regionKongs={Kongs.lanky}),
    Transitions.GalleonShipyardToSaxophone: ShufflableExit("Gloomy Galleon Main to Tiny 5DS", Regions.Shipyard, TransitionBack(Regions.SaxophoneShip, "From Galleon Main", Transitions.GalleonSaxophoneToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonSaxophoneToShipyard: ShufflableExit("Gloomy Galleon Tiny 5DS to Main", Regions.SaxophoneShip, TransitionBack(Regions.Shipyard, "From Tiny 5DShip", Transitions.GalleonShipyardToSaxophone), regionKongs={Kongs.tiny}),
    Transitions.GalleonShipyardToTriangle: ShufflableExit("Gloomy Galleon Main to Chunky 5DS", Regions.Shipyard, TransitionBack(Regions.TriangleShip, "From Galleon Main", Transitions.GalleonTriangleToShipyard), ExitCategories.GalleonExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.GalleonTriangleToShipyard: ShufflableExit("Gloomy Galleon Chunky 5DS to Main", Regions.TriangleShip, TransitionBack(Regions.Shipyard, "From Chunky 5DShip", Transitions.GalleonShipyardToTriangle), regionKongs={Kongs.chunky}),
    Transitions.GalleonTreasureToChest: ShufflableExit("Gloomy Galleon Main to Chest", Regions.TreasureRoom, TransitionBack(Regions.TinyChest, "From Galleon Main", Transitions.GalleonChestToTreasure), ExitCategories.GalleonExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.GalleonChestToTreasure: ShufflableExit("Gloomy Galleon Chest to Main", Regions.TinyChest, TransitionBack(Regions.TreasureRoom, "From Chest", Transitions.GalleonTreasureToChest), regionKongs={Kongs.tiny}),
    # Fungi Forest Exits
    Transitions.ForestMainToCarts: ShufflableExit("Fungi Forest Main To Minecart", Regions.FungiForestStart, TransitionBack(Regions.ForestMinecarts, "From Fungi Main"), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}),
    Transitions.ForestCartsToMain: ShufflableExit("Fungi Forest Minecart To Main", Regions.ForestMinecarts, TransitionBack(Regions.MillArea, "From Fungi Minecart (Chunky)"), regionKongs={Kongs.chunky}),
    Transitions.ForestMainToLowerMushroom: ShufflableExit("Fungi Forest Main to Mushroom Lower", Regions.GiantMushroomArea, TransitionBack(Regions.MushroomLower, "From Fungi (Low)", Transitions.ForestLowerMushroomToMain), ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToMain: ShufflableExit("Fungi Forest Mushroom Lower to Main", Regions.MushroomLower, TransitionBack(Regions.GiantMushroomArea, "From G. Mush (Low)", Transitions.ForestMainToLowerMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToLowerMushroom: ShufflableExit("Fungi Forest Lower Exterior to Lower Mushroom", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, "From Fungi (Low Middle)", Transitions.ForestLowerMushroomToLowerExterior), ExitCategories.ForestExterior),
    Transitions.ForestLowerMushroomToLowerExterior: ShufflableExit("Fungi Forest Lower Mushroom to Lower Exterior", Regions.MushroomLower, TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Low Middle)", Transitions.ForestLowerExteriorToLowerMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestLowerExteriorToUpperMushroom: ShufflableExit("Fungi Forest Lower Exterior to Upper Mushroom", Regions.MushroomLowerExterior, TransitionBack(Regions.MushroomLower, "From Fungi (Middle)", Transitions.ForestUpperMushroomToLowerExterior), ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToLowerExterior: ShufflableExit("Fungi Forest Upper Mushroom to Lower Exterior", Regions.MushroomUpper, TransitionBack(Regions.MushroomLowerExterior, "From G. Mush (Middle)", Transitions.ForestLowerExteriorToUpperMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestUpperExteriorToUpperMushroom: ShufflableExit("Fungi Forest Upper Exterior to Upper Mushroom", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomUpper, "From Fungi (High)", Transitions.ForestUpperMushroomToUpperExterior), ExitCategories.ForestExterior),
    Transitions.ForestUpperMushroomToUpperExterior: ShufflableExit("Fungi Forest Upper Mushroom to Upper Exterior", Regions.MushroomUpper, TransitionBack(Regions.MushroomUpperExterior, "From G. Mush (High)", Transitions.ForestUpperExteriorToUpperMushroom), ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToNight: ShufflableExit("Fungi Forest Night Exterior to Night Door", Regions.MushroomNightExterior, TransitionBack(Regions.MushroomNightDoor, "From Fungi (High Middle)", Transitions.ForestNightToExterior), ExitCategories.ForestExterior),
    Transitions.ForestNightToExterior: ShufflableExit("Fungi Forest Night Door to Night Exterior", Regions.MushroomNightDoor, TransitionBack(Regions.MushroomNightExterior, "From G. Mush (High Middle)", Transitions.ForestExteriorToNight), ExitCategories.ForestMushroom),
    Transitions.ForestExteriorToChunky: ShufflableExit("Fungi Forest Upper Exterior to Chunky Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomChunkyRoom, "From Fungi Main", Transitions.ForestChunkyToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}),
    Transitions.ForestChunkyToExterior: ShufflableExit("Fungi Forest Chunky Room to Upper Exterior", Regions.MushroomChunkyRoom, TransitionBack(Regions.MushroomUpperExterior, "From Face Puzzle (Chunky)", Transitions.ForestExteriorToChunky), regionKongs={Kongs.chunky}),
    Transitions.ForestExteriorToZingers: ShufflableExit("Fungi Forest Upper Exterior to Zinger Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyZingersRoom, "From Fungi Main", Transitions.ForestZingersToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    Transitions.ForestZingersToExterior: ShufflableExit("Fungi Forest Zinger Room to Upper Exterior", Regions.MushroomLankyZingersRoom, TransitionBack(Regions.MushroomUpperExterior, "From Zingers Room (Lanky)", Transitions.ForestExteriorToZingers), regionKongs={Kongs.lanky}),
    Transitions.ForestExteriorToMushrooms: ShufflableExit("Fungi Forest Upper Exterior to Mushroom Room", Regions.MushroomUpperExterior, TransitionBack(Regions.MushroomLankyMushroomsRoom, "From Fungi Main", Transitions.ForestMushroomsToExterior), ExitCategories.ForestExterior, entryKongs={Kongs.lanky}),
    Transitions.ForestMushroomsToExterior: ShufflableExit("Fungi Forest Mushroom Room to Upper Exterior", Regions.MushroomLankyMushroomsRoom, TransitionBack(Regions.MushroomUpperExterior, "From Mushrooms Room (Lanky)",Transitions.ForestExteriorToMushrooms), regionKongs={Kongs.lanky}),
    Transitions.ForestTreeToAnthill: ShufflableExit("Fungi Forest Hollow Tree Area to Anthill", Regions.HollowTreeArea, TransitionBack(Regions.Anthill, "From Fungi Main", Transitions.ForestAnthillToTree), ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestAnthillToTree: ShufflableExit("Fungi Forest Anthill to Hollow Tree Area", Regions.Anthill, TransitionBack(Regions.HollowTreeArea, "From Anthill", Transitions.ForestTreeToAnthill), regionKongs={Kongs.tiny}),
    Transitions.ForestMainToChunkyMill: ShufflableExit("Fungi Forest Main to Mill Chunky Door", Regions.MillArea, TransitionBack(Regions.MillChunkyArea, "From Fungi (PPunch Door)", Transitions.ForestChunkyMillToMain), ExitCategories.ForestExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.ForestChunkyMillToMain: ShufflableExit("Fungi Forest Mill Chunky Door to Main", Regions.MillChunkyArea, TransitionBack(Regions.MillArea, "From Mill (PPunch Door)", Transitions.ForestMainToChunkyMill), ExitCategories.ForestMill, entryKongs={Kongs.chunky}, regionKongs={Kongs.chunky}),
    Transitions.ForestMainToTinyMill: ShufflableExit("Fungi Forest Main to Mill Tiny Entrance", Regions.MillArea, TransitionBack(Regions.MillTinyArea, "From Fungi (Tiny Hole)", Transitions.ForestTinyMillToMain), ExitCategories.ForestExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestTinyMillToMain: ShufflableExit("Fungi Forest Mill Tiny Entrance to Main", Regions.MillTinyArea, TransitionBack(Regions.MillArea, "From Mill (Tiny Hole)", Transitions.ForestMainToTinyMill), ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.ForestMainToGrinder: ShufflableExit("Fungi Forest Main to Grinder Room", Regions.MillArea, TransitionBack(Regions.GrinderRoom, "From Fungi (Front)", Transitions.ForestGrinderToMain), ExitCategories.ForestExterior),
    Transitions.ForestGrinderToMain: ShufflableExit("Fungi Forest Grinder Room to Main", Regions.GrinderRoom, TransitionBack(Regions.MillArea, "From Mill (Front)", Transitions.ForestMainToGrinder), ExitCategories.ForestGrinder),
    Transitions.ForestMainToRafters: ShufflableExit("Fungi Forest Main to Rafters", Regions.MillArea, TransitionBack(Regions.MillRafters, "From Fungi Main", Transitions.ForestRaftersToMain), ExitCategories.ForestExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.ForestRaftersToMain: ShufflableExit("Fungi Forest Rafters to Main", Regions.MillRafters, TransitionBack(Regions.MillArea, "From Rafters", Transitions.ForestMainToRafters), regionKongs={Kongs.diddy}),
    Transitions.ForestMainToWinch: ShufflableExit("Fungi Forest Main to Winch Room", Regions.MillArea, TransitionBack(Regions.WinchRoom, "From Fungi Main", Transitions.ForestWinchToMain), ExitCategories.ForestExterior, entryKongs={Kongs.diddy}),
    Transitions.ForestWinchToMain: ShufflableExit("Fungi Forest Winch Room to Main", Regions.WinchRoom, TransitionBack(Regions.MillArea, "From Winch", Transitions.ForestMainToWinch), regionKongs={Kongs.diddy}),
    Transitions.ForestMainToAttic: ShufflableExit("Fungi Forest Main to Mill Attic", Regions.MillArea, TransitionBack(Regions.MillAttic, "From Fungi Main", Transitions.ForestAtticToMain), ExitCategories.ForestExterior),
    Transitions.ForestAtticToMain: ShufflableExit("Fungi Forest Mill Attic to Main", Regions.MillAttic, TransitionBack(Regions.MillArea, "From Mill Attic", Transitions.ForestMainToAttic), regionKongs={Kongs.lanky}),
    Transitions.ForestTinyMillToSpider: ShufflableExit("Fungi Forest Mill to Spider Boss", Regions.MillTinyArea, TransitionBack(Regions.SpiderRoom, "From Mill (Rear)", Transitions.ForestSpiderToTinyMill), ExitCategories.ForestMill, regionKongs={Kongs.tiny}),
    Transitions.ForestSpiderToTinyMill: ShufflableExit("Fungi Forest Spider Boss to Mill", Regions.SpiderRoom, TransitionBack(Regions.MillTinyArea, "From Spider Boss", Transitions.ForestTinyMillToSpider), regionKongs={Kongs.tiny}),
    Transitions.ForestTinyMillToGrinder: ShufflableExit("Fungi Forest Tiny Entrance to Grinder Room", Regions.MillTinyArea, TransitionBack(Regions.GrinderRoom, "From Mill (Rear)", Transitions.ForestGrinderToTinyMill), ExitCategories.ForestMill, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}, move=True),
    Transitions.ForestGrinderToTinyMill: ShufflableExit("Fungi Forest Grinder Room to Tiny Entrance", Regions.GrinderRoom, TransitionBack(Regions.MillTinyArea, "From Mill (Front)", Transitions.ForestTinyMillToGrinder), ExitCategories.ForestGrinder, entryKongs={Kongs.tiny}, move=True),
    Transitions.ForestMainToBarn: ShufflableExit("Fungi Forest Main to Thornvine Barn", Regions.ThornvineArea, TransitionBack(Regions.ThornvineBarn, "From Fungi Main", Transitions.ForestBarnToMain), ExitCategories.ForestExterior, entryKongs={Kongs.donkey}),
    Transitions.ForestBarnToMain: ShufflableExit("Fungi Forest Thornvine Barn to Main", Regions.ThornvineBarn, TransitionBack(Regions.ThornvineArea, "From Thornvine Barn", Transitions.ForestMainToBarn), regionKongs={Kongs.donkey}),
    # Crystal Caves Exits
    Transitions.CavesMainToRace: ShufflableExit("Crystal Caves Main to Beetle Race", Regions.CrystalCavesMain, TransitionBack(Regions.CavesLankyRace, "From Caves Main", Transitions.CavesRaceToMain), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesRaceToMain: ShufflableExit("Crystal Caves Beetle Race to Main", Regions.CavesLankyRace, TransitionBack(Regions.CrystalCavesMain, "From Beetle Race", Transitions.CavesMainToRace), regionKongs={Kongs.lanky}),
    Transitions.CavesMainToCastle: ShufflableExit("Crystal Caves Main to Frozen Castle", Regions.CrystalCavesMain, TransitionBack(Regions.FrozenCastle, "From Caves Main", Transitions.CavesCastleToMain), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}),
    Transitions.CavesCastleToMain: ShufflableExit("Crystal Caves Frozen Castle to Main", Regions.FrozenCastle, TransitionBack(Regions.CrystalCavesMain, "From Tile Flipping", Transitions.CavesMainToCastle), regionKongs={Kongs.lanky}),
    Transitions.CavesIglooToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DI", Regions.IglooArea, TransitionBack(Regions.DonkeyIgloo, "From Caves Main", Transitions.CavesDonkeyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToIgloo: ShufflableExit("Crystal Caves Donkey 5DI to Main", Regions.DonkeyIgloo, TransitionBack(Regions.IglooArea, "From DK 5DIgloo", Transitions.CavesIglooToDonkey), regionKongs={Kongs.donkey}),
    Transitions.CavesIglooToDiddy: ShufflableExit("Crystal Caves Main to Diddy 5DI", Regions.IglooArea, TransitionBack(Regions.DiddyIgloo, "From Caves Main", Transitions.CavesDiddyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyToIgloo: ShufflableExit("Crystal Caves Diddy 5DI to Main", Regions.DiddyIgloo, TransitionBack(Regions.IglooArea, "From Diddy 5DIgloo", Transitions.CavesIglooToDiddy), regionKongs={Kongs.diddy}),
    Transitions.CavesIglooToLanky: ShufflableExit("Crystal Caves Main to Lanky 5DI", Regions.IglooArea, TransitionBack(Regions.LankyIgloo, "From Caves Main", Transitions.CavesLankyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToIgloo: ShufflableExit("Crystal Caves Lanky 5DI to Main", Regions.LankyIgloo, TransitionBack(Regions.IglooArea, "From Lanky 5DIgloo", Transitions.CavesIglooToLanky), regionKongs={Kongs.lanky}),
    Transitions.CavesIglooToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DI", Regions.IglooArea, TransitionBack(Regions.TinyIgloo, "From Caves Main", Transitions.CavesTinyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToIgloo: ShufflableExit("Crystal Caves Tiny 5DI to Main", Regions.TinyIgloo, TransitionBack(Regions.IglooArea, "From Tiny 5DIgloo", Transitions.CavesIglooToTiny), regionKongs={Kongs.tiny}),
    Transitions.CavesIglooToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DI", Regions.IglooArea, TransitionBack(Regions.ChunkyIgloo, "From Caves Main", Transitions.CavesChunkyToIgloo), ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToIgloo: ShufflableExit("Crystal Caves Chunky 5DI to Main", Regions.ChunkyIgloo, TransitionBack(Regions.IglooArea, "From Chunky 5DIgloo", Transitions.CavesIglooToChunky), regionKongs={Kongs.chunky}),
    Transitions.CavesCabinToRotating: ShufflableExit("Crystal Caves Main to Rotating Cabin", Regions.CabinArea, TransitionBack(Regions.RotatingCabin, "From Caves Main", Transitions.CavesRotatingToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesRotatingToCabin: ShufflableExit("Crystal Caves Rotating Cabin to Main", Regions.RotatingCabin, TransitionBack(Regions.CabinArea, "From Rotating Cabin", Transitions.CavesCabinToRotating), regionKongs={Kongs.donkey}),
    Transitions.CavesCabinToDonkey: ShufflableExit("Crystal Caves Main to Donkey 5DC", Regions.CabinArea, TransitionBack(Regions.DonkeyCabin, "From Caves Main", Transitions.CavesDonkeyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.donkey}, move=True),
    Transitions.CavesDonkeyToCabin: ShufflableExit("Crystal Caves Donkey 5DC to Main", Regions.DonkeyCabin, TransitionBack(Regions.CabinArea, "From DK 5DCabin", Transitions.CavesCabinToDonkey), regionKongs={Kongs.donkey}),
    Transitions.CavesCabinToDiddyLower: ShufflableExit("Crystal Caves Main to Diddy Lower 5DC", Regions.CabinArea, TransitionBack(Regions.DiddyLowerCabin, "From Caves Main", Transitions.CavesDiddyLowerToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyLowerToCabin: ShufflableExit("Crystal Caves Diddy Lower 5DC to Main", Regions.DiddyLowerCabin, TransitionBack(Regions.CabinArea, "From Diddy Lower 5DCabin", Transitions.CavesCabinToDiddyLower), regionKongs={Kongs.diddy}),
    Transitions.CavesCabinToDiddyUpper: ShufflableExit("Crystal Caves Main to Diddy Upper 5DC", Regions.CabinArea, TransitionBack(Regions.DiddyUpperCabin, "From Caves Main", Transitions.CavesDiddyUpperToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.diddy}, move=True),
    Transitions.CavesDiddyUpperToCabin: ShufflableExit("Crystal Caves Diddy Upper 5DC to Main", Regions.DiddyUpperCabin, TransitionBack(Regions.CabinArea, "From Diddy Upper 5DCabin", Transitions.CavesCabinToDiddyUpper), regionKongs={Kongs.diddy}),
    Transitions.CavesCabinToLanky: ShufflableExit("Crystal Caves Main to Lanky 1DC", Regions.CabinArea, TransitionBack(Regions.LankyCabin, "From Caves Main", Transitions.CavesLankyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.lanky}, move=True),
    Transitions.CavesLankyToCabin: ShufflableExit("Crystal Caves Lanky 1DC to Main", Regions.LankyCabin, TransitionBack(Regions.CabinArea, "From Lanky Cabin", Transitions.CavesCabinToLanky), regionKongs={Kongs.lanky}),
    Transitions.CavesCabinToTiny: ShufflableExit("Crystal Caves Main to Tiny 5DC", Regions.CabinArea, TransitionBack(Regions.TinyCabin, "From Caves Main", Transitions.CavesTinyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CavesTinyToCabin: ShufflableExit("Crystal Caves Tiny 5DC to Main", Regions.TinyCabin, TransitionBack(Regions.CabinArea, "From Tiny 5DCabin", Transitions.CavesCabinToTiny), regionKongs={Kongs.tiny}),
    Transitions.CavesCabinToChunky: ShufflableExit("Crystal Caves Main to Chunky 5DC", Regions.CabinArea, TransitionBack(Regions.ChunkyCabin, "From Caves Main", Transitions.CavesChunkyToCabin), ExitCategories.CavesExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CavesChunkyToCabin: ShufflableExit("Crystal Caves Chunky 5DC to Main", Regions.ChunkyCabin, TransitionBack(Regions.CabinArea, "From Chunky 5DCabin", Transitions.CavesCabinToChunky), regionKongs={Kongs.chunky}),
    # Creepy Castle Exits
    Transitions.CastleMainToTree: ShufflableExit("Creepy Castle Main to Tree", Regions.CreepyCastleMain, TransitionBack(Regions.CastleTree, "From Castle Main", Transitions.CastleTreeToMain), ExitCategories.CastleExterior),
    Transitions.CastleTreeToMain: ShufflableExit("Creepy Castle Tree to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, "From Tree (Entrance)", Transitions.CastleMainToTree), regionKongs={Kongs.donkey, Kongs.chunky}),
    Transitions.CastleTreeDrainToMain: ShufflableExit("Creepy Castle Tree Drain to Main", Regions.CastleTree, TransitionBack(Regions.CreepyCastleMain, "From Tree (Drain)"), entryKongs={Kongs.donkey}),
    Transitions.CastleMainToLibraryStart: ShufflableExit("Creepy Castle Main to Library", Regions.CreepyCastleMain, TransitionBack(Regions.Library, "From Castle Main (Start)", Transitions.CastleLibraryStartToMain), ExitCategories.CastleExterior, entryKongs={Kongs.donkey}),
    Transitions.CastleLibraryStartToMain: ShufflableExit("Creepy Castle Library Start to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, "From Library (Start)", Transitions.CastleMainToLibraryStart), regionKongs={Kongs.donkey}),
    Transitions.CastleMainToLibraryEnd: ShufflableExit("Creepy Castle Main to Library Back Door", Regions.CreepyCastleMain, TransitionBack(Regions.Library, "From Castle Main (End)"), ExitCategories.CastleExterior),
    Transitions.CastleLibraryEndToMain: ShufflableExit("Creepy Castle Library End to Main", Regions.Library, TransitionBack(Regions.CreepyCastleMain, "From Library (End)"), entryKongs={Kongs.donkey}),
    Transitions.CastleMainToBallroom: ShufflableExit("Creepy Castle Main to Ballroom", Regions.CreepyCastleMain, TransitionBack(Regions.Ballroom, "From Castle Main", Transitions.CastleBallroomToMain), ExitCategories.CastleExterior),
    Transitions.CastleBallroomToMain: ShufflableExit("Creepy Castle Ballroom to Main", Regions.Ballroom, TransitionBack(Regions.CreepyCastleMain, "From Ballroom", Transitions.CastleMainToBallroom), ExitCategories.CastleBallroom),
    Transitions.CastleMainToTower: ShufflableExit("Creepy Castle Main to Tower", Regions.CreepyCastleMain, TransitionBack(Regions.Tower, "From Castle Main", Transitions.CastleTowerToMain), ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    Transitions.CastleTowerToMain: ShufflableExit("Creepy Castle Tower to Main", Regions.Tower, TransitionBack(Regions.CreepyCastleMain, "From Tower", Transitions.CastleMainToTower), regionKongs={Kongs.lanky}),
    Transitions.CastleMainToGreenhouse: ShufflableExit("Creepy Castle Main to Greenhouse", Regions.CreepyCastleMain, TransitionBack(Regions.Greenhouse, "From Castle Main", Transitions.CastleGreenhouseStartToMain), ExitCategories.CastleExterior, entryKongs={Kongs.lanky}),
    Transitions.CastleGreenhouseStartToMain: ShufflableExit("Creepy Castle Greenhouse to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (Start)", Transitions.CastleMainToGreenhouse), regionKongs={Kongs.lanky}),
    Transitions.CastleGreenhouseEndToMain: ShufflableExit("Creepy Castle Greenhouse to Main", Regions.Greenhouse, TransitionBack(Regions.CreepyCastleMain, "From Greenhouse (End)")),
    Transitions.CastleMainToTrash: ShufflableExit("Creepy Castle Main to Trash Can", Regions.CreepyCastleMain, TransitionBack(Regions.TrashCan, "From Castle Main", Transitions.CastleTrashToMain), ExitCategories.CastleExterior, entryKongs={Kongs.tiny}, move=True),
    Transitions.CastleTrashToMain: ShufflableExit("Creepy Castle Trash Can to Main", Regions.TrashCan, TransitionBack(Regions.CreepyCastleMain, "From Trash Can", Transitions.CastleMainToTrash), regionKongs={Kongs.tiny}),
    Transitions.CastleMainToShed: ShufflableExit("Creepy Castle Main to Shed", Regions.CreepyCastleMain, TransitionBack(Regions.Shed, "From Castle Main", Transitions.CastleShedToMain), ExitCategories.CastleExterior, entryKongs={Kongs.chunky}, move=True),
    Transitions.CastleShedToMain: ShufflableExit("Creepy Castle Shed to Main", Regions.Shed, TransitionBack(Regions.CreepyCastleMain, "From Shed", Transitions.CastleMainToShed), regionKongs={Kongs.chunky}),
    Transitions.CastleMainToMuseum: ShufflableExit("Creepy Castle Main to Museum", Regions.CreepyCastleMain, TransitionBack(Regions.Museum, "From Castle Main", Transitions.CastleMuseumToMain), ExitCategories.CastleExterior, entryKongs={Kongs.chunky}),
    Transitions.CastleMuseumToMain: ShufflableExit("Creepy Castle Museum to Main", Regions.Museum, TransitionBack(Regions.CreepyCastleMain, "From Museum", Transitions.CastleMainToMuseum), regionKongs={Kongs.chunky}),
    Transitions.CastleMainToLower: ShufflableExit("Creepy Castle Main to Lower Cave", Regions.CreepyCastleMain, TransitionBack(Regions.LowerCave, "From Castle Main", Transitions.CastleLowerToMain), ExitCategories.CastleExterior),
    Transitions.CastleLowerToMain: ShufflableExit("Creepy Castle Lower Cave to Main", Regions.LowerCave, TransitionBack(Regions.CreepyCastleMain, "From Lower Cave", Transitions.CastleMainToLower), ExitCategories.CastleLower),
    Transitions.CastleMainToUpper: ShufflableExit("Creepy Castle Main to Upper Cave", Regions.CreepyCastleMain, TransitionBack(Regions.UpperCave, "From Castle (Rear)", Transitions.CastleUpperToMain), ExitCategories.CastleExterior),
    Transitions.CastleUpperToMain: ShufflableExit("Creepy Castle Upper Cave to Main", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Rear)", Transitions.CastleMainToUpper), ExitCategories.CastleUpper),
    Transitions.CastleWaterfallToUpper: ShufflableExit("Creepy Castle Waterfall to Upper Cave", Regions.CastleWaterfall, TransitionBack(Regions.UpperCave, "From Castle (Front)", Transitions.CastleUpperToWaterfall), ExitCategories.CastleExterior),
    Transitions.CastleUpperToWaterfall: ShufflableExit("Creepy Castle Upper Cave to Waterfall", Regions.UpperCave, TransitionBack(Regions.CreepyCastleMain, "From Tunnel (Front)", Transitions.CastleWaterfallToUpper), ExitCategories.CastleUpper),
    Transitions.CastleBallroomToMuseum: ShufflableExit("Creepy Castle Ballroom to Museum", Regions.Ballroom, TransitionBack(Regions.MuseumBehindGlass, "From Ballroom (Monkeyport)", Transitions.CastleMuseumToBallroom), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}),
    Transitions.CastleMuseumToBallroom: ShufflableExit("Creepy Castle Museum to Ballroom", Regions.MuseumBehindGlass, TransitionBack(Regions.Ballroom, "From Museum (Monkeyport)", Transitions.CastleBallroomToMuseum), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}, regionKongs={Kongs.tiny}),
    Transitions.CastleMuseumToCarRace: ShufflableExit("Creepy Castle Museum to Car Race", Regions.MuseumBehindGlass, TransitionBack(Regions.CastleTinyRace, "From Museum", Transitions.CastleRaceToMuseum), ExitCategories.CastleBallroom, entryKongs={Kongs.tiny}),
    Transitions.CastleRaceToMuseum: ShufflableExit("Creepy Castle Car Race to Museum", Regions.CastleTinyRace, TransitionBack(Regions.MuseumBehindGlass, "From Car Race", Transitions.CastleMuseumToCarRace), regionKongs={Kongs.tiny}),
    Transitions.CastleLowerToCrypt: ShufflableExit("Creepy Castle Lower Cave to Crypt", Regions.LowerCave, TransitionBack(Regions.Crypt, "From Lower Cave", Transitions.CastleCryptToLower), ExitCategories.CastleLower, entryKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleCryptToLower: ShufflableExit("Creepy Castle Crypt to Lower Cave", Regions.Crypt, TransitionBack(Regions.LowerCave, "From Crypt (DK/Diddy/Chunky)", Transitions.CastleLowerToCrypt), ExitCategories.CastleCrypt, regionKongs={Kongs.donkey, Kongs.diddy, Kongs.chunky}),
    Transitions.CastleLowerToMausoleum: ShufflableExit("Creepy Castle Lower Cave to Mausoleum", Regions.LowerCave, TransitionBack(Regions.Mausoleum, "From Lower Cave", Transitions.CastleMausoleumToLower), ExitCategories.CastleLower, entryKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleMausoleumToLower: ShufflableExit("Creepy Castle Mausoleum to Lower cave", Regions.Mausoleum, TransitionBack(Regions.LowerCave, "From Mausoleum (Lanky/Tiny)", Transitions.CastleLowerToMausoleum), regionKongs={Kongs.lanky, Kongs.tiny}),
    Transitions.CastleCryptToCarts: ShufflableExit("Creepy Castle Crypt to Minecarts", Regions.Crypt, TransitionBack(Regions.CastleMinecarts, "From Crypt", Transitions.CastleCartsToCrypt), ExitCategories.CastleCrypt, entryKongs={Kongs.donkey}),
    Transitions.CastleCartsToCrypt: ShufflableExit("Creepy Castle Minecarts to Crypt", Regions.CastleMinecarts, TransitionBack(Regions.Crypt, "From Minecart", Transitions.CastleCryptToCarts), regionKongs={Kongs.donkey}),
    Transitions.CastleUpperToDungeon: ShufflableExit("Creepy Castle Upper Cave to Dungeon", Regions.UpperCave, TransitionBack(Regions.Dungeon, "From Tunnel", Transitions.CastleDungeonToUpper), ExitCategories.CastleUpper),
    Transitions.CastleDungeonToUpper: ShufflableExit("Creepy Castle Dungeon to Upper Cave", Regions.Dungeon, TransitionBack(Regions.UpperCave, "From Dungeon", Transitions.CastleUpperToDungeon)),
}
